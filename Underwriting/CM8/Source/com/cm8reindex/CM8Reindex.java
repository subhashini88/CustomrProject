/*
  This class has been generated by the Code Generator
*/

package com.cm8reindex;

import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.ibm.mm.sdk.common.*;
import java.sql.*;
import com.ibm.mm.sdk.server.*;
import com.ibm.mm.sdk.common.DKBlobV4;
import com.ibm.mm.sdk.common.DKConstant;
import com.ibm.mm.sdk.common.DKDDO;
import com.ibm.mm.sdk.common.DKException;
import com.ibm.mm.sdk.common.DKLobICM;
import com.ibm.mm.sdk.common.DKParts;
import com.ibm.mm.sdk.common.dkDataObjectBase;
import com.ibm.mm.sdk.common.dkIterator;


public class CM8Reindex extends CM8ReindexBase
{
private static String libServer;
  private static DKDatastoreICM dsICM;
	private static DKDatastoreExtICM dsExtICM;

    public CM8Reindex()
    {
        this((BusObjectConfig)null);
    }

    public CM8Reindex(BusObjectConfig config)
    {
        super(config);
    }
	
	public static String AttriUpdaterUW(String database, String userid, String password, String cm8docid, String AttributeName, String AttributeValue) throws DKException, Exception
    {
        DKDDO localDKDDO = null;         
         String query= null; 
       
         try
         {
         dsICM = new DKDatastoreICM();
         dsICM.connect(database, userid, password, "");
         DKRetrieveOptionsICM dkRetrieveOptions = DKRetrieveOptionsICM.createInstance(dsICM);
         dkRetrieveOptions.baseAttributes(true);
         dkRetrieveOptions.partsAttributes(true);
         dkRetrieveOptions.partsList(true);
         query = "/*[@ITEMID=\""+cm8docid+"\"]";
           DKNVPair options[] = new DKNVPair[3];
           options    = new DKNVPair[3];
         options[0] = new DKNVPair(DKConstant.DK_CM_PARM_MAX_RESULTS, "1");               // Specify max using a string value.
         options[1] = new DKNVPair(DKConstant.DK_CM_PARM_RETRIEVE,    dkRetrieveOptions); // Always specify desired Retrieve Options.
         options[2] = new DKNVPair(DKConstant.DK_CM_PARM_END,         null);   // Must mark the end of the NVPair
         // Search API
         DKResults results = (DKResults)dsICM.evaluate(query, DKConstantICM.DK_CM_XQPE_QL_TYPE, options);
         dkIterator iters = results.createIterator();
         System.out.println("  Number of Results:  "+ results.cardinality());
         String pID=null; 
         while(iters.more())
         {   // While there are still items to iterate through, continue.
              DKDDO  ddo = (DKDDO) iters.next();  // Move pointer to next element and obtain that object.
           pID=ddo.getPidObject().pidString();
           System.out.println("     - Item ID:  "+pID);
           
           ddo.retrieve(dkRetrieveOptions.dkNVPair());
           System.out.println("Checking Out Items...");
           
           
           try { 
              dsICM.checkOut(ddo); 
              } 
           catch (DKException e) 
           { 
                if (e.getErrorId() == DKMessageIdICM.DK_ICM_MSG_RC_ITEM_CHECKEDOUT_BYOTHER) 
                { 
                  System.out.println("Item checked out by another user"); 
                  throw e; 
                } 
                if (e.getErrorId() == DKMessageId.DK_CM_MSG_CHECK_OUT_FAILED) //..Ignore the error if checked out by same user
                { 
                    System.out.println("Checked Out Items.");
                     ddo.setData(ddo.dataId(DKConstant.DK_CM_NAMESPACE_ATTR, AttributeName),AttributeValue);
                                          ddo.update(); 
                          
                     System.out.println("Modified Item.");
                     System.out.println("Updating / Saving Item...");
                     dsICM.checkIn(ddo);
                     System.out.println("Item Checked In / Unlocked");
                  continue; 
                  
                } 
                
         }
          
           System.out.println("Checked Out Items.");
           ddo.setData(ddo.dataId(DKConstant.DK_CM_NAMESPACE_ATTR, AttributeName),AttributeValue);
           ddo.update(); 
                  
           System.out.println("Modified Item.");
           System.out.println("Updating / Saving Item...");
           dsICM.checkIn(ddo);
           System.out.println("Item Checked In / Unlocked");
           }
         }catch(Exception e)
            { 
                  System.out.println(e);
                       dsICM.checkIn(localDKDDO);
                  return e.toString();
           }
      
         dsICM.disconnect();
         dsICM.destroy();
         return  "Successfully Updated";
    }

    public static String Reindexer(String database, String userid, String password, String sqldatabase, String sqluser, String sqlpassword, String cm8docid, String targetindexclass, String keyvalue1, String keyvalue2, String keyvalue3, String keyvalue4, String keyvalue5, String keyvalue6, String keyvalue7, String keyvalue8) throws DKException, Exception
    {

            DKDDO localDKDDO = null;
            DKDDO localDKDDO1 = null;
	    DKDDO localDKDDO2 = null;
            String query= null; 
            String indexclass=null;
            String[] keyvalue = new String[9];
            String[] keyfield = new String[9];
            DKParts localDKParts;
            try
            {
            dsICM = new DKDatastoreICM();
            dsICM.connect(database, userid, password, "");
            DKRetrieveOptionsICM dkRetrieveOptions = DKRetrieveOptionsICM.createInstance(dsICM);
            dkRetrieveOptions.baseAttributes(true);
            dkRetrieveOptions.partsAttributes(true);
            dkRetrieveOptions.partsList(true);
            dkRetrieveOptions.childAttributes(true);
            dkRetrieveOptions.childListAllLevels(true);
            dkRetrieveOptions.childListOneLevel(true);
            dkRetrieveOptions.childListOneLevel(true);
            query = "/*[@ITEMID=\""+cm8docid+"\"]";
	    DKNVPair options[] = new DKNVPair[3];
	    options    = new DKNVPair[3];
            options[0] = new DKNVPair(DKConstant.DK_CM_PARM_MAX_RESULTS, "1");               // Specify max using a string value.
            options[1] = new DKNVPair(DKConstant.DK_CM_PARM_RETRIEVE,    dkRetrieveOptions); // Always specify desired Retrieve Options.
            options[2] = new DKNVPair(DKConstant.DK_CM_PARM_END,         null);   // Must mark the end of the NVPair
            // Search API
            DKResults results = (DKResults)dsICM.evaluate(query, DKConstantICM.DK_CM_XQPE_QL_TYPE, options);
            dkIterator iters = results.createIterator();
            System.out.println("  Number of Results:  "+ results.cardinality());
            String pID=null; 
            while(iters.more())
             {   // While there are still items to iterate through, continue.
              localDKDDO = (DKDDO) iters.next();  // Move pointer to next element and obtain that object.
              pID=localDKDDO.getPidObject().pidString();
              indexclass =localDKDDO.getObjectType().toString();
      
              }
              dsICM.checkOut(localDKDDO);
              localDKDDO1= dsICM.createDDO(targetindexclass,DKConstant.DK_CM_DOCUMENT);
              Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
              Connection con=DriverManager.getConnection(sqldatabase, sqluser, sqlpassword);
              Statement stmt=con.createStatement();
              ResultSet rs=stmt.executeQuery("Select Key1,Key2,Key3,Key4,Key5,Key6,Key7,Key8,Key9,Key10 from sop..CM_IndexClass where IndexClass_Name='"+targetindexclass +"'"); 
while (rs.next())
{
              keyfield[0]=rs.getString(1); 
              keyfield[1]=rs.getString(2); 
              keyfield[2]=rs.getString(3); 
              keyfield[3]=rs.getString(4); 
              keyfield[4]=rs.getString(5); 
              keyfield[5]=rs.getString(6); 
              keyfield[6]=rs.getString(7); 
              keyfield[7]=rs.getString(8); 
}
  
              keyvalue[0]=keyvalue1;
              keyvalue[1]=keyvalue2;
              keyvalue[2]=keyvalue3;
              keyvalue[3]=keyvalue4;
              keyvalue[4]=keyvalue5;
              keyvalue[5]=keyvalue6;
              keyvalue[6]=keyvalue7;
              keyvalue[7]=keyvalue8;

              for (int i = 0; i <8; i++)
              {
                if(keyfield[i]!=null)
              localDKDDO1.setData(localDKDDO1.dataId(DKConstant.DK_CM_NAMESPACE_ATTR, keyfield[i]),keyvalue[i]);
              }
              dsICM.moveObject(localDKDDO, localDKDDO1, DKConstant.DK_CM_CHECKIN);
              rs.close();
	      stmt.close();
	      con.close();
              //dsICM.checkIn(localDKDDO);
              dsICM.disconnect();
              dsICM.destroy();
              return  "Successfully reindexed";
             }
              catch(Exception e)
	      { 
			System.out.println(e);
                        dsICM.checkIn(localDKDDO);
			return e.toString();
	     }
             
}
    

    public static BusObjectIterator<com.cm8reindex.CM8Reindex> getCM8ReindexObjects(com.cordys.cpc.bsf.query.Cursor cursor)
    {
        // TODO implement body
        return null;
    }

    public void onInsert()
    {
    }

    public void onUpdate()
    {
    }

    public void onDelete()
    {
    }
	 public static String Reindex_Share(String database, String userid, String password, String sqldatabase, String sqluser, String sqlpassword, String cm8docid, String targetindexclass, String keyvalue1, String keyvalue2, String keyvalue3, String keyvalue4, String keyvalue5, String keyvalue6, String keyvalue7, String keyvalue8) throws DKException, Exception
    {
        	

		DKDDO localDKDDO = null;
		DKDDO localDKDDO1 = null;
		String query= null; 
		String wCLAIMDOCPOL = null;
		String indexclass=null;
		String[] keyvalue = new String[9];
		String[] keyfield = new String[9];
		String newCM8docID=null;
		String newPId=null;

			try
			{
				System.out.println("Sharing Document");


				dsICM = new DKDatastoreICM();
				dsICM.connect(database, userid, password, "");
				dsExtICM = (DKDatastoreExtICM) dsICM.getExtension(DKConstant.DK_CM_DATASTORE_EXT);
				DKRetrieveOptionsICM dkRetrieveOptions = DKRetrieveOptionsICM.createInstance(dsICM);
				dkRetrieveOptions.baseAttributes(true);
				dkRetrieveOptions.partsAttributes(true);
				dkRetrieveOptions.partsList(true);
				dkRetrieveOptions.childAttributes(true);
				dkRetrieveOptions.childListAllLevels(true);
				dkRetrieveOptions.childListOneLevel(true);
				dkRetrieveOptions.childListOneLevel(true);
				query = "/*[@ITEMID=\""+cm8docid+"\"]";
				DKNVPair options[] = new DKNVPair[3];
				options    = new DKNVPair[3];
				options[0] = new DKNVPair(DKConstant.DK_CM_PARM_MAX_RESULTS, "1");               // Specify max using a string value.
				options[1] = new DKNVPair(DKConstant.DK_CM_PARM_RETRIEVE,    dkRetrieveOptions); // Always specify desired Retrieve Options.
				options[2] = new DKNVPair(DKConstant.DK_CM_PARM_END,         null);   // Must mark the end of the NVPair
				// Search API
				DKResults results = (DKResults)dsICM.evaluate(query, DKConstantICM.DK_CM_XQPE_QL_TYPE, options);
				dkIterator iters = results.createIterator();
				System.out.println("  Number of Results:  "+ results.cardinality());
				if(results.cardinality()>0){
					String pID=null; 
					while(iters.more())
					{   // While there are still items to iterate through, continue.
						localDKDDO = (DKDDO) iters.next();  // Move pointer to next element and obtain that object.
						pID=localDKDDO.getPidObject().pidString();

						System.out.println("PID:"+pID);

						indexclass =localDKDDO.getObjectType().toString();

						System.out.println("Indexclass:"+indexclass);

					}

					System.out.println("Retrieving Content...");

					dkRetrieveOptions.resourceContent(true);

					localDKDDO.retrieve(dkRetrieveOptions.dkNVPair());

					dkRetrieveOptions.behaviorSkipResourceAttrRefresh(true);
					dkRetrieveOptions.behaviorSkipExistenceCheck(true);

					//DKParts dkParts = (DKParts) localDKDDO.getData(localDKDDO.dataId(DKConstant.DK_CM_NAMESPACE_ATTR,DKConstant.DK_CM_DKPARTS));

					DKParts dkParts =null;

					//..Get the parts that we will retrieve content for
					short dataid = localDKDDO.dataId(DKConstant.DK_CM_NAMESPACE_ATTR,DKConstant.DK_CM_DKPARTS); 

					if(dataid==0)
						throw new Exception("No DKParts Attribute Found!  DDO is either not a Document Model classified Item or Document has not been explicitly retrieved.");

					dkParts = (DKParts) localDKDDO.getData(dataid);
					
					localDKDDO1= dsICM.createDDO(targetindexclass,DKConstant.DK_CM_DOCUMENT);

					DKLobICM retrPart = null;

					if(dkParts!=null){

						dkIterator iter = (dkIterator) dkParts.createIterator();
						while (iter.more()) {
							DKDDO locLobDDO = (DKDDO)iter.next();
							if(locLobDDO instanceof DKLobICM && ((DKLobICM)locLobDDO).getSemanticType()==128 ) {                             //&& ICMBASE_OBJECT_TYPE_STR.equalsIgnoreCase(locLobDDO.getObjectType())
								System.out.println("Found Base Parts object with mimeType: "+ ((DKLobICM)locLobDDO).getMimeType() +"and Semantic Type:"+ ((DKLobICM)locLobDDO).getSemanticType());
								retrPart = (DKLobICM) locLobDDO;
							//	retrList.add(retrPart);
								String locmimetype=retrPart.getMimeType();
								byte[] arrayOfByte=retrPart.getContent();
								String orgFileName= retrPart.getOrgFileName();	
								
								addContent(localDKDDO1, locmimetype, arrayOfByte, orgFileName,false,"");
								
							}
							else if(locLobDDO instanceof DKLobICM && ((DKLobICM)locLobDDO).getSemanticType()==8){
								System.out.println("Found Base Parts object with mimeType: "+ ((DKLobICM)locLobDDO).getMimeType() +" and Semantic Type:"+ ((DKLobICM)locLobDDO).getSemanticType());
								retrPart = (DKLobICM) locLobDDO;
								String locmimetype=retrPart.getMimeType();
								byte[] arrayOfByte=retrPart.getContent();
								
								addAnnotation(localDKDDO1, arrayOfByte, locmimetype,"");								
							}
							else if(locLobDDO instanceof DKLobICM && ((DKLobICM)locLobDDO).getSemanticType()==64){
								System.out.println("Found Base Parts object with mimeType: "+ ((DKLobICM)locLobDDO).getMimeType() +" and Semantic Type:"+ ((DKLobICM)locLobDDO).getSemanticType());
								retrPart = (DKLobICM) locLobDDO;
								String locmimetype=retrPart.getMimeType();
								byte[] arrayOfByte=retrPart.getContent();
								
								addNote(localDKDDO1, arrayOfByte, locmimetype,"");								
							}
						}
					}
										

					Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
					Connection con=DriverManager.getConnection(sqldatabase, sqluser, sqlpassword);
					Statement stmt=con.createStatement();
					ResultSet rs=stmt.executeQuery("Select Key1,Key2,Key3,Key4,Key5,Key6,Key7,Key8,Key9,Key10 from sop..CM_IndexClass where IndexClass_Name='"+targetindexclass +"'"); 

					while (rs.next())
					{
						keyfield[0]=rs.getString(1); 
						keyfield[1]=rs.getString(2); 
						keyfield[2]=rs.getString(3); 
						keyfield[3]=rs.getString(4); 
						keyfield[4]=rs.getString(5); 
						keyfield[5]=rs.getString(6); 
						keyfield[6]=rs.getString(7); 
						keyfield[7]=rs.getString(8); 
					}

					keyvalue[0]=keyvalue1;
					keyvalue[1]=keyvalue2;
					keyvalue[2]=keyvalue3;
					keyvalue[3]=keyvalue4;
					keyvalue[4]=keyvalue5;
					keyvalue[5]=keyvalue6;
					keyvalue[6]=keyvalue7;
					keyvalue[7]=keyvalue8;


					for (int i = 0; i <8; i++)
					{
						if(keyvalue[i]!="")
						{

							wCLAIMDOCPOL = String.valueOf(i);

							localDKDDO1.setData(localDKDDO1.dataId(DKConstant.DK_CM_NAMESPACE_ATTR, keyfield[i]),keyvalue[i]);
							if (keyfield[i].equals("POLICY") && (targetindexclass.equals("CLAIMDOC" )|| targetindexclass.equals("MCLMDOC"))){wCLAIMDOCPOL = "Y";}
						}

					}


					// Check if claim document - accomodate POLICY and CLMFLG

					if (wCLAIMDOCPOL !="Y" &&  (targetindexclass.equals("CLAIMDOC" )|| targetindexclass.equals("MCLMDOC")))
					{
						localDKDDO1.setData(localDKDDO1.dataId(DKConstant.DK_CM_NAMESPACE_ATTR,"POLICY"),"666666666");
					}
					if (wCLAIMDOCPOL !="Y" &&  (targetindexclass.equals("CLAIMDOC" )))
					{ 
						localDKDDO1.setData(localDKDDO1.dataId(DKConstant.DK_CM_NAMESPACE_ATTR,"CLMFLG"),"6");
					}


					dsICM.addObject(localDKDDO1);
					newCM8docID=((DKPidICM) localDKDDO1.getPidObject()).getItemId();
					System.out.println("ItemID:" +newCM8docID);
										
					dsICM.checkOut(localDKDDO1);
					if(newCM8docID!=null){
						localDKDDO1.setData(localDKDDO1.dataId(DKConstant.DK_CM_NAMESPACE_ATTR,"CM8_DOCID"),newCM8docID);
					}
					dsICM.updateObject(localDKDDO1);
					dsICM.checkIn(localDKDDO1);
					
					rs.close();
					stmt.close();
					con.close();
					dsICM.disconnect();
					dsICM.destroy();
				}
				else{
					return "Item Not found";
				}
			}
			catch(Exception e)
			{ 
				System.out.println(e);

				return "Share Unsuccessful";
			}

			return "Successfully Shared. New CM8 Doc ID:"+newCM8docID;
		

    }
public static void addContent(DKDDO paramDKDDO,String paramString1, byte[] paramArrayOfByte, String paramString2, boolean paramBoolean, String paramString3)
		    throws DKException, Exception
		  {
		    DKLobICM localDKLobICM = null;
		    if (paramBoolean) {
		      localDKLobICM = (DKLobICM)dsICM.createDDO("ICMBASETEXT", 128);
		    } 
		    else {
		      localDKLobICM = (DKLobICM)dsICM.createDDO("ICMBASE", 128);
		    }
		    if ((paramString3 != null) && (!paramString3.equals("")))
		    {
		      short s1 = localDKLobICM.propertyId("SYSROOTATTRS.ACLCODE");
		      localDKLobICM.setProperty(s1, paramString3);
		    }
		    
		    localDKLobICM.setMimeType(paramString1);
		    localDKLobICM.setContent(paramArrayOfByte);
		    localDKLobICM.setOrgFileName(paramString2);
		    
		    short s1 = paramDKDDO.dataId("ATTR", "DKParts");
		    DKParts localDKParts;
		    
		    if (s1 > 0)
		    {
		      localDKParts = (DKParts)paramDKDDO.getData(s1);
		      
		      localDKLobICM.setPartNumber(highestNumber(localDKParts) + 1);
		      
		      localDKParts.addElement(localDKLobICM);
		    }
		    else
		    {
		      localDKParts = new DKParts();
		      
		      localDKLobICM.setPartNumber(1);
		      
		      localDKParts.addElement(localDKLobICM);
		      
		      short s2 = paramDKDDO.addData("DKParts");
		      
		      paramDKDDO.addDataProperty(s2, "type", new Short((short)1073));
		      
		      paramDKDDO.setData(s2, localDKParts);
		    }
		  }
		  
		  public static void addAnnotation(DKDDO paramDKDDO, byte[] paramArrayOfByte,String paramString1, String paramString2)
		    throws DKException, Exception
		  {
		    DKLobICM localDKLobICM = null;
		    localDKLobICM = (DKLobICM)dsICM.createDDO("ICMANNOTATION", 8);
		    if ((paramString2 != null) && (!paramString2.equals("")))
		    {
		      short s1 = localDKLobICM.propertyId("SYSROOTATTRS.ACLCODE");
		      localDKLobICM.setProperty(s1, paramString2);
		    }
		    localDKLobICM.setContent(paramArrayOfByte);
		    localDKLobICM.setMimeType(paramString1);
		    //localDKLobICM.setMimeType("application/vnd.ibm.modcap");
		    
		    short s1 = paramDKDDO.dataId("ATTR", "DKParts");
		    DKParts localDKParts;
		    if (s1 > 0)
		    {
		      localDKParts = (DKParts)paramDKDDO.getData(s1);
		      
		      localDKLobICM.setPartNumber(highestNumber(localDKParts) + 1);
		      
		      localDKParts.addElement(localDKLobICM);
		      
		    
		    }
		    else
		    {
		      localDKParts = new DKParts();
		      
		      localDKLobICM.setPartNumber(1);
		      
		      localDKParts.addElement(localDKLobICM);
		      
		      short s2 = paramDKDDO.addData("DKParts");
		      
		      paramDKDDO.addDataProperty(s2, "type", new Short((short)1073));
		      
		      paramDKDDO.setData(s2, localDKParts);
		    }
		    //paramDKDDO.add();
		  }
		  
		  public static void addNote(DKDDO paramDKDDO, byte[] paramArrayOfByte,String paramString1, String paramString2)
		    throws DKException, Exception
		  {		   
		    DKLobICM localDKLobICM = null;
		    localDKLobICM = (DKLobICM)dsICM.createDDO("ICMNOTELOG", 64);
		    if ((paramString2 != null) && (!paramString2.equals("")))
		    {
		      short s1 = localDKLobICM.propertyId("SYSROOTATTRS.ACLCODE");
		      localDKLobICM.setProperty(s1, paramString2);
		    }
		    localDKLobICM.setContent(paramArrayOfByte);
		    localDKLobICM.setMimeType(paramString1);
		    //localDKLobICM.setMimeType("text/plain");
		    
		    short s1 = paramDKDDO.dataId("ATTR", "DKParts");
		    DKParts localDKParts;
		    if (s1 > 0)
		    {
		      localDKParts = (DKParts)paramDKDDO.getData(s1);
		      
		      localDKLobICM.setPartNumber(highestNumber(localDKParts) + 1);
		      
		      localDKParts.addElement(localDKLobICM);
		    }
		    else
		    {
		      localDKParts = new DKParts();
		      
		      localDKLobICM.setPartNumber(1);
		      
		      localDKParts.addElement(localDKLobICM);
		      
		      short s2 = paramDKDDO.addData("DKParts");
		      
		      paramDKDDO.addDataProperty(s2, "type", new Short((short)1073));
		      
		      paramDKDDO.setData(s2, localDKParts);
		    }
		  }
private static int highestNumber(DKParts parts) throws DKException, Exception 
	{


		int max = 0;
		// Create an dkIterator (iter) to go through Collection
		dkIterator iter = parts.createIterator();
		// loop through the parts list
		while (iter.more()) {
			// Create a DKLobICM (part) and set it to the next one in the collection.
			DKLobICM part = (DKLobICM) iter.next();
			if (part.getPartNumber() > max)
				max = part.getPartNumber();
		}

		return (max);
	}


}
