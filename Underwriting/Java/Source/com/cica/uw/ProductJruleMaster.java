/*
  This class has been generated by the Code Generator
*/

package com.cica.uw;

import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.cpc.bsf.busobject.QueryObject;
import com.eibus.util.logger.CordysLogger;
import com.eibus.util.logger.Severity;

import com.cordys.cpc.bsf.busobject.BSF;
import com.cordys.cpc.bsf.busobject.BusObject;
import java.util.Arrays;

import com.eibus.xml.nom.Document;
import com.eibus.xml.nom.Node;
import com.eibus.xml.nom.XMLException;
import com.eibus.xml.xpath.XPath;
import java.text.ParseException; 

import java.time.*;  
import java.util.*;


import java.math.RoundingMode;
import java.text.DecimalFormat;

public class ProductJruleMaster extends ProductJruleMasterBase
{
private static CordysLogger logger	= CordysLogger.getCordysLogger(ProductJruleMaster.class);  
    public ProductJruleMaster()
    {
        this((BusObjectConfig)null);
    }

    public ProductJruleMaster(BusObjectConfig config)
    {
        super(config);
    }

    public static String getJruleCOXRecordsForCompanyCode(String CompanyCode, String COX, String Jrule_ip)
    {
String isFound="N";
   		try{
    String queryText = " select * from ProductJruleMaster where companycode='"+CompanyCode+"' and COX_Indicator='"+COX+"'";
	
        QueryObject query = new QueryObject(queryText);
       // query.setResultClass(ProductJruleMaster.class);
		//ProductJruleMaster PJM = (ProductJruleMaster)query.getObject();
		BusObject abiblData = query.getObject();
		logger.log(Severity.ERROR, "PJM: "+ abiblData );
		String RJrule = abiblData.getStringProperty("Jrule");
		logger.log(Severity.ERROR, "RJrule: "+ RJrule);
		String[]  str_array = RJrule.split(",");
		logger.log(Severity.ERROR, "RJrule arr: "+ Arrays.toString(str_array));
		for(String str: str_array) {
            
			if(Jrule_ip.contains(str)){
				isFound="Y";
				logger.log(Severity.ERROR, "inside flag:"+ isFound);
			} // true

        }
		logger.log(Severity.ERROR, "contain flag:"+ isFound);
		}
		catch(Exception e){
			logger.log(Severity.ERROR, "Error:"+e);
			return "Failure in fetching details" ;			
		}
        return isFound;
    }

    public static String getRecordForProductAndJrule(String Product, String Jrule, String Policy)
    {
      String isFound="N";
   		try{
    String queryText = " select * from ProductJruleMaster where Product='"+Product+"'";
	
        QueryObject query = new QueryObject(queryText);
		BusObject abiblData = query.getObject();
		logger.log(Severity.ERROR, "PJM: "+ abiblData );
		String RJrule = abiblData.getStringProperty("Jrule");
		logger.log(Severity.ERROR, "RJrule: "+ RJrule);
		String[]  str_array = RJrule.split(",");
		logger.log(Severity.ERROR, "RJrule arr: "+ Arrays.toString(str_array));
		String querytext2=  " select * from tbl_underwriting where policy_number='"+Policy+"'";
					 QueryObject query2 = new QueryObject(querytext2);
					BusObject dataJB1 = query2.getObject();
		
		for(String str: str_array) {
            
			if(Jrule.contains(str)){
				isFound="Y";
				logger.log(Severity.ERROR, "inside flag:"+ isFound);
				logger.log(Severity.ERROR, "Product::"+ Product);
				logger.log(Severity.ERROR, "Jrule ip::"+ Jrule);
				logger.log(Severity.ERROR, "str::"+ str);
				
			} // true

        }

	//---------------------------------
	//check ifJrule contains J07
				
					
				if(Jrule.contains("J07") && (Product.equalsIgnoreCase("HEA") || Product.equalsIgnoreCase("HES") )){
				String policySource = dataJB1.getStringProperty("eAgent_indicator");	
				logger.log(Severity.ERROR, "Check source"+ policySource);
				if(policySource=="E" || policySource.equalsIgnoreCase("E")){
					isFound="Y";
                               logger.log(Severity.ERROR, "Check isFound"+ isFound);
				}
				else{
					isFound="N";
				}
					//check source
				}
		
				//check province and age if Jrule contains JB1 set isJB1 as "Y"
				
				if(Jrule.contains("JB1")){
					
		logger.log(Severity.ERROR, "PJM: "+ abiblData );
		String ip_proveince = dataJB1.getStringProperty("state_code");
		String ip_DOB = dataJB1.getStringProperty("dob");
		String AgeCriteria="No";
		logger.log(Severity.ERROR, "Check proveince"+ ip_proveince);
		logger.log(Severity.ERROR, "Check DOB"+ ip_DOB);
		String CriteriaMatch = checkCriteria(Product,ip_proveince);
		logger.log(Severity.ERROR, "CriteriaMatch Age: "+ CriteriaMatch);
		
		if(CriteriaMatch!="NA"){
		String[] AString = CriteriaMatch.split("-"); //0.5-17
logger.log(Severity.ERROR, "AString  "+ AString );
		double Low_limit = Double.parseDouble(AString[0]);
		double Upper_limit = Double.parseDouble(AString[1]);
		logger.log(Severity.ERROR, "LowLimit"+ Low_limit);
		logger.log(Severity.ERROR, "UppLimit"+ Upper_limit);
		AgeCriteria =calculateCandidateAge(ip_DOB,Low_limit,Upper_limit);
		logger.log(Severity.ERROR, "AgeCriteria:"+ AgeCriteria);
		}		//check policy details in tbl_underwriting, statecode and calculate age
					//check criteria in config (product+Jrule) record if it match then set ifFound Y else N
					if(AgeCriteria=="Yes" || AgeCriteria.equalsIgnoreCase("Yes") ){isFound="Y";}
					else isFound="N";
				}
				
				
			//--------------------------
		logger.log(Severity.ERROR, "contain flag:"+ isFound);
		}
		catch(Exception e){
			logger.log(Severity.ERROR, "Error:"+e);
			return "Failure in fetching details" ;			
		}
        return isFound;
    }
	
	public static String calculateCandidateAge(String DOB,Double AgeLowlimit,Double AgeUplimit)

{  
//obtains an instance of LocalDate from a year, month and date  
String CreatePIRT="No";
logger.log(Severity.ERROR, "Method call DOB"+ DOB); //1998-03-03T00:00:00.0

String[]  DOB_Split1 = DOB.split("T");
String[]  DOB_Split2 = DOB_Split1[0].split("-");
logger.log(Severity.ERROR, "Method call i/p Int Year "+ Integer.parseInt(DOB_Split2[0]));
logger.log(Severity.ERROR, "Method call i/p int Month "+ Integer.parseInt(DOB_Split2[1]));
logger.log(Severity.ERROR, "Method call i/p int Day "+ Integer.parseInt(DOB_Split2[2]));

int ip_year = Integer.parseInt(DOB_Split2[0]);
int ip_month = Integer.parseInt(DOB_Split2[1]);
int ip_days = Integer.parseInt(DOB_Split2[2]);

LocalDate dob = LocalDate.of(ip_year, ip_month, ip_days);  
//obtains the current date from the system clock  
LocalDate curDate = LocalDate.now();  
//calculates the difference betwween two dates  
Period period = Period.between(dob, curDate);  

logger.log(Severity.ERROR, "Check Years"+ period.getYears());
logger.log(Severity.ERROR, "Check Months"+ period.getMonths());
logger.log(Severity.ERROR, "Check Days"+ period.getDays());

double Year = period.getYears();
if(Year>AgeLowlimit && Year<AgeUplimit && Year!=0){
	CreatePIRT="Yes";
	logger.log(Severity.ERROR, "Age flag"+ CreatePIRT);
}
else if(Year>AgeUplimit){
	CreatePIRT="No";
	logger.log(Severity.ERROR, "Age flag 2:"+ CreatePIRT);
}
else if(Year==0){
	if(AgeLowlimit % 1 != 0)//means lower limit is decimal
	{
		double ageLowlimitInMonths = AgeLowlimit*12;
		double month=period.getMonths();
		if(month>ageLowlimitInMonths){
			CreatePIRT="Yes";
			logger.log(Severity.ERROR, "Age flag 3:"+ CreatePIRT);
		}
		if(month==ageLowlimitInMonths){
			int days = period.getDays(); //lower limit of age criteria is considered
			
				CreatePIRT="Yes";
				logger.log(Severity.ERROR, "Age flag 4:"+ CreatePIRT);
			
			
		}
	}
}
else if(Year==AgeLowlimit){
	CreatePIRT="Yes";
	logger.log(Severity.ERROR, "Age flag 5:"+ CreatePIRT);
}
//when upper age limit is equal check for months


/*DecimalFormat df = new DecimalFormat("#.##");
df.setRoundingMode(RoundingMode.CEILING);
int month=period.getMonths();
logger.log(Severity.ERROR, "Check Age in months"+month);
double  M = month/12;
//M=1.345;
logger.log(Severity.ERROR, "Check Age in months without df"+ M);
logger.log(Severity.ERROR, "Check Age in months"+ df.format(M));

double D = (double) (period.getDays()/365);
logger.log(Severity.ERROR, "Check Age in days"+  df.format(D));
double Cal_Age= (double) (Y+M+D);

logger.log(Severity.ERROR, "Check Age in years"+ Cal_Age);
*/
return CreatePIRT;





}  

public static String checkCriteria(String Product, String Provience){
	String ProdDesc = Product+"JB1";
	logger.log(Severity.ERROR, "ProdDesc"+ ProdDesc);
	String ProisFound="N";
	String Agelimit="NA";
	String querytext3=  "select * from ProductJruleMaster where ProductDescription='"+ProdDesc+"'";
	logger.log(Severity.ERROR, "querytext3 : "+ querytext3);
					 QueryObject query3 = new QueryObject(querytext3);
					BusObject data2JB1 = query3.getObject();
					String ProvienAge_Desc = data2JB1.getStringProperty("JruleDescription");	
					//MB,ON,PEI,QC,SK,AB;0.5-17/NB,NL,NT,NS,NV,YT,BC;0.5-18
					logger.log(Severity.ERROR, "Provience"+ ProvienAge_Desc);
					String[]  ProAge = ProvienAge_Desc.split("/");
					String[]  ProvinceAgeString = ProAge[0].split(";");
					String[] PString = ProvinceAgeString[0].split(",");
					//String[] AString = ProvinceAgeString[1].split("-");
					logger.log(Severity.ERROR, "first Provience"+ Arrays.toString(ProvinceAgeString));
					logger.log(Severity.ERROR, "Iterate Provience"+ Arrays.toString(PString));
					
					for(String pstr: PString) {
            
					if(Provience.contains(pstr)){
					ProisFound="Y";
				logger.log(Severity.ERROR, "Provience flag:"+ ProisFound);
					} // true					

        }
					if(ProisFound=="Y" || ProisFound.equalsIgnoreCase("Y") ){
						Agelimit=ProvinceAgeString[1];
						logger.log(Severity.ERROR, "Age limit :"+ Agelimit);
						}
						
						else if(ProisFound=="N" || ProisFound.equalsIgnoreCase("N")){
							String[]  ProvinceAgeString1 = ProAge[1].split(";");
							String[] PString1 = ProvinceAgeString1[0].split(",");
							for(String pstr1: PString1) {
            
							if(Provience.contains(pstr1)){
							ProisFound="Y";
							logger.log(Severity.ERROR, "Provience flag:"+ ProisFound);
							} // true			
							if(ProisFound=="Y" || ProisFound.equalsIgnoreCase("Y")){
							Agelimit=ProvinceAgeString1[1];
							logger.log(Severity.ERROR, "Age limit :"+ Agelimit);
							}

							}
						}
						else{Agelimit="NA";}
					
					return Agelimit;
}
}
