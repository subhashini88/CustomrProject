/*
  This class has been generated by the Code Generator
*/

package com.cica.uw;

import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BSF;
import com.cordys.cpc.bsf.busobject.BusObject;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.cpc.bsf.busobject.QueryObject;
import com.cordys.cpc.bsf.busobject.exception.BsfConstraintViolationException;
import com.cordys.cpc.bsf.soap.SOAPRequestObject;
import com.eibus.xml.nom.Node;
import com.eibus.xml.xpath.XPath;
import com.cordys.cpc.bsf.soap.SOAPRequestObject;

public class InboundEmailDetail extends InboundEmailDetailBase
{
    public InboundEmailDetail()
    {
        this((BusObjectConfig)null);
    }

    public InboundEmailDetail(BusObjectConfig config)
    {
        super(config);
    }
    public static BusObjectIterator<com.cica.uw.InboundEmailDetail> getAllActiveMailTask()
	{
		String queryText = "select id,MessageId,FromAddress,ToAddress,Subject,Body from InboundEmailDetail where IsActive=1";
		QueryObject query1 = new QueryObject(queryText);
		query1.setResultClass(InboundEmailDetail.class);
		return  query1.getObjects();
	}
    public static String sendMailOftask(String toIDs,String FromID,String ccIDs,String bccIDs,String mailBody,String mailSubject)
	{
    	String cc="",to="",bcc="";
    	int respNode = 0;
    	SOAPRequestObject sendmailRequest = new SOAPRequestObject("http://schemas.cordys.com/1.0/email","SendMail",null,null);
		
		//Creating the To email address
		String toList[]={};
		if (toIDs.contains(","))
		toList = toIDs.split(",");
		to = "<to>";
		if(toList.length>0)
		{
			for(int i=0;i<toList.length;i++)
			{
				to = to+"<address><emailAddress>"+toList[i]+"</emailAddress></address>";
			}
		}
		else 
		{
			to = to+"<address><emailAddress>"+toIDs+"</emailAddress></address>";
		}
		to = to + "</to>";
		
		//Creating the From email address
		String from = "<from><emailAddress>"+FromID+"</emailAddress></from>";
		
		//Creating the CC email address
		if(!ccIDs.isEmpty())
		{
			String ccList[]={};
			if (ccIDs.contains(","))
			ccList = ccIDs.split(",");
			cc = "<cc>";
			if(ccList.length>0)
			{
				for(int i=0;i<ccList.length;i++)
				{
					cc = cc+"<address><emailAddress>"+ccList[i]+"</emailAddress></address>";
				}
			}
			else 
			{
				cc = cc+"<address><emailAddress>"+ccIDs+"</emailAddress></address>";
			}
			cc = cc + "</cc>";
		}
		//Creating the BCC email address
		if(!bccIDs.isEmpty())
		{
			String bccList[]={};
			if (bccIDs.contains(","))
			bccList = bccIDs.split(",");
			bcc = "<bcc>";
			if(bccList.length>0)
			{
				for(int i=0;i<bccList.length;i++)
				{
					bcc = bcc+"<address><emailAddress>"+bccList[i]+"</emailAddress></address>";
				}
			}
			else 
			{
				bcc = bcc+"<address><emailAddress>"+bccIDs+"</emailAddress></address>";
			}
			bcc = bcc + "</bcc>";
		}
		String subject = "<subject>"+mailSubject+"</subject>";
		String body = "<body type=\"html\"><![CDATA[<html>"+mailBody+"</html>]]></body>";
		try{
			int toNode = 0,fromNode = 0 ,ccNode = 0,bccNode = 0,subNode = 0,bodyNode = 0;
			toNode = BSF.getXMLDocument().parseString(to);
			sendmailRequest.addParameterAsXml(toNode);
			fromNode = BSF.getXMLDocument().parseString(from);
			sendmailRequest.addParameterAsXml(fromNode);
			if(!ccIDs.isEmpty())
			{
				ccNode = BSF.getXMLDocument().parseString(cc);
				sendmailRequest.addParameterAsXml(ccNode);
			}
			if(!bccIDs.isEmpty())
			{
				bccNode = BSF.getXMLDocument().parseString(bcc);
				sendmailRequest.addParameterAsXml(bccNode);
			}
			subNode = BSF.getXMLDocument().parseString(subject);
			sendmailRequest.addParameterAsXml(subNode);
			bodyNode = BSF.getXMLDocument().parseString(body);
			sendmailRequest.addParameterAsXml(bodyNode);
			respNode = sendmailRequest.execute();
			Node.writeToString(respNode, true);
		} catch(Exception e)
		{
			throw new BsfConstraintViolationException("Exception send mail"+e.getMessage());
		}
		
		return "Email sent successfully";
	}
}
