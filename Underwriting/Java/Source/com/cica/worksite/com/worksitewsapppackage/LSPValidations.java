/*
  This class has been generated by the Code Generator
*/

package com.worksitewsapppackage;

import org.json.JSONException;
import org.json.JSONObject;
import org.json.JSONString;
import java.util.*;
import com.cordys.cpc.bsf.busobject.BSF;
import com.cordys.cpc.bsf.busobject.BusObject;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;

import com.cordys.cpc.bsf.busobject.QueryObject;
import com.eibus.util.logger.CordysLogger;
import com.eibus.util.logger.Severity;
import com.eibus.xml.nom.Node;
import com.eibus.xml.xpath.XPath;


public class LSPValidations extends LSPValidationsBase
{
    public LSPValidations()
    {
        this((BusObjectConfig)null);
    }

    public LSPValidations(BusObjectConfig config)
    {
        super(config);
    }
    private static CordysLogger logvar = CordysLogger.getCordysLogger(LSPValidations.class);
	

    public static String getJsonString(String screenName,int bpmInput,String param1,String param2 ,String param3) throws Exception{
    	
        logvar._log("getJsonString", Severity.ERROR, null, "inside method --> bpminput: "+Node.writeToString(bpmInput, false));
    	if(!Node.isValidNode(bpmInput))
    	{
    		return "Not valid xml";
    	}
    	boolean validate = false;
        //int Node1 =  XPath.getFirstMatch(".//type", null, bpmInput);
        //String updatetype  =  Node.getDataWithDefault(Node1, "");
        
        JSONObject screenJson = new JSONObject();
        
        String query = "select Header,DisplayName from LSPValidations WHERE Header = '"+screenName+"' GROUP BY Header,DisplayName ORDER BY Header,DisplayName";
    	QueryObject queryObj = new QueryObject(query);
    	queryObj.setResultClass(LSPValidations.class);
        
    	BusObjectIterator<LSPValidations> screenSubScreenData = queryObj.getObjects();
        
        JSONObject subScreenJson = new JSONObject();
        
        subScreenJson.put("Transaction", "Add");
        
    	while(screenSubScreenData.hasMoreElements()){
        
    		LSPValidations screenSubscreen = screenSubScreenData.nextElement();
            
    		String query1 = "SELECT * FROM LSPValidations WHERE Header = '"+screenName+"' and DisplayName = '"+screenSubscreen.getDisplayName()+"'";
            
    		QueryObject queryObj1 = new QueryObject(query1);
    		queryObj1.setResultClass(LSPValidations.class);
            
    		BusObjectIterator<LSPValidations> tagsData = queryObj1.getObjects();
            
            
            JSONObject tagsJson = new JSONObject();
            
    		while(tagsData.hasMoreElements()){
                
                LSPValidations tag = tagsData.nextElement();

                if(tag.getSourceField() != null && !tag.getSourceField().equals("") && !tag.getSourceField().isEmpty()){

                    int tagNode = XPath.getFirstMatch(".//"+tag.getSourceField(),null,bpmInput);//input column

                    //logvar._log("getJsonString", Severity.ERROR, null, "inside do while --> tagNode: "+Node.writeToString(tagNode,false));

                    if(tagNode > 0){

                        tagsJson.put(tag.getField(),Node.getDataWithDefault(tagNode, ""));

                    }
                }
            };
            logvar._log("getJsonString", Severity.ERROR, null, "tagJson: "+tagsJson.toString());
            if(!tagsJson.toString().equals("{}")){
            	
                subScreenJson.put(screenSubscreen.getDisplayName(),tagsJson);
                validate =  true;
            }
    	}
    	//logvar._log("getJsonString", Severity.ERROR, null, "subScreenJson: "+subScreenJson.toString());
    	//if(!subScreenJson.toString().equals("{}")){
    	    //if(validate && !screenName.equals("Test Test")&& !screenName.equals("Emp Loc Maintenance") ){
    	 if(validate){
    	   screenName = screenName.replaceAll("\\s+", "");
    	   if(screenName.equals("RealCISetup"))
    	   {
    		   JSONObject  realcicetup = new JSONObject();
    		   subScreenJson.put("IsGIAvailable","Y");
    		   realcicetup.put("GISET01D",subScreenJson);
    		  
               screenJson.put(screenName,realcicetup);

    	   }
    	   else
    	   {
            screenJson.put(screenName,subScreenJson);
            logvar._log("getJsonString", Severity.ERROR, null, "screenJson: "+screenJson.toString());
    	   }
            return screenJson.toString();
        }
    	else{
    		screenName = screenName.replaceAll("\\s+", "");
    		return screenName;
    	}
    	//PartTimeIncome
    	
    }
  public static BusObjectIterator<com.worksitewsapppackage.LSPValidations> GetDistinctScreenNames()
    {
        String queryText = "Select distinct ScreenName,Header,ProgramName from LSPValidations";
        QueryObject query = new QueryObject(queryText);
     
        query.setResultClass(LSPValidations.class);
        return query.getObjects();
    }


public static BusObjectIterator<com.worksitewsapppackage.LSPValidations> GetLSPValidationFromHeader(String headerName)
    {
        String queryText = "select *  from \"LSPValidations\" where Header=:headerName";
        QueryObject query = new QueryObject(queryText);
      query.addParameter("headerName", "LSPValidations.Header", QueryObject.PARAM_STRING, headerName);
        query.setResultClass(LSPValidations.class);
        return query.getObjects();
    }
protected void onBeforeInsert()
{
String userDN = BSF.getUser();
this.setCreatedDate(new Date(new Date().getTime() - (new Date().getTimezoneOffset() * 60 * 1000)));
this.setCreatedBy(userDN.substring(3,userDN.indexOf(",")));
}
protected void onBeforeUpdate()
{
String userDN = BSF.getUser();
this.setUpdatedDate(new Date(new Date().getTime() - (new Date().getTimezoneOffset() * 60 * 1000)));
this.setUpdatedBy(userDN.substring(3,userDN.indexOf(",")));
}
}
