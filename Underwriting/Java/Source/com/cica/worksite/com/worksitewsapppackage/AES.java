/*
  This class has been generated by the Code Generator
*/

package com.worksitewsapppackage;

import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.Base64;
 
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import com.eibus.util.logger.CordysLogger;

import com.eibus.xml.nom.Node;
import com.cordys.cpc.bsf.busobject.BSF;
import com.cordys.cpc.bsf.busobject.BusObject;
import com.cordys.cpc.bsf.busobject.QueryObject;

public class AES extends AESBase
{
public static CordysLogger BRELogger=CordysLogger.getCordysLogger(AES .class);

 private static SecretKeySpec secretKey;
    private static byte[] key;
    public AES()
    {
        this((BusObjectConfig)null);
    }

    public AES(BusObjectConfig config)
    {
        super(config);
    }

    
 
    public static void setKey(String myKey) 
    {
        MessageDigest sha = null;
        try {
            key = myKey.getBytes("UTF-8");
            sha = MessageDigest.getInstance("SHA-1");
            key = sha.digest(key);
            key = Arrays.copyOf(key, 16); 
            secretKey = new SecretKeySpec(key, "AES");
        } 
        catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } 
        catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
    }
 
    public static String encrypt(String strToEncrypt, String secret) 
    {
        try
        {
            setKey(secret);
            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);
            return Base64.getEncoder().encodeToString(cipher.doFinal(strToEncrypt.getBytes("UTF-8")));
        } 
        catch (Exception e) 
        {

            System.out.println("Error while encrypting: " + e.toString());
        }
        return null;
    }
 
    public static String decrypt(String strToDecrypt, String secret) 
    {
        try
        {
            setKey(secret);
            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5PADDING");
            cipher.init(Cipher.DECRYPT_MODE, secretKey);
            return new String(cipher.doFinal(Base64.getDecoder().decode(strToDecrypt)));
        } 
        catch (Exception e) 
        {
BRELogger.error("Error while decrypting: " + e.toString());	
       //     System.out.println("Error while decrypting: " + e.toString());
        }
        return null;
    }
	public static String EncryptDecrypt(String Type, String SSNValue) 
{
    final String secretKey = "ZkFYWlhuTnZFcWNzTG9vOENTNkpUUT09LGZKLzVvM2N5NHJFVGpJNUd1eGNuL2c9PQ==";
     
   // String originalString = "EncryptORDecrypt";
	String opValue="";
	if(Type.equals("Encrypt"))
     opValue = AES.encrypt(SSNValue, secretKey) ;
	else if(Type.equals("Decrypt"))
     opValue = AES.decrypt(SSNValue, secretKey) ;
     
	 return opValue;
    /*System.out.println(originalString);
    System.out.println(encryptedString);
    System.out.println(decryptedString);*/
}


    public static BusObjectIterator<com.worksitewsapppackage.AES> getAesObjects(com.cordys.cpc.bsf.query.Cursor cursor)
    {
        // TODO implement body
        return null;
    }

    public void onInsert()
    {
    }

    public void onUpdate()
    {
    }

    public void onDelete()
    {
    }

}
