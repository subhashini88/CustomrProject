
/*
  This class has been generated by the Code Generator
*/

package com.worksitewsapppackage;
import java.text.DecimalFormat;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObject;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.cpc.bsf.busobject.DMLStatement;
import java.util.Locale;
import java.util.TimeZone;
import java.io.FileWriter;  
import java.io.IOException;
import java.util.Scanner;
import com.cordys.cpc.bsf.busobject.QueryObject;
import com.eibus.util.logger.CordysLogger;
import com.eibus.util.Base64;
import com.eibus.util.logger.Severity;
import java.text.DateFormat; 
import java.text.SimpleDateFormat; 
import java.util.Date; 
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import java.util.TimeZone; 
import com.cordys.cpc.bsf.soap.SOAPRequestObject;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.TimeZone;
import java.text.ParseException; 
import java.text.DateFormat;
import com.eibus.xml.nom.XMLException;
import java.io.*;
import java.util.Arrays;
import java.time.LocalDate;
import com.eibus.util.system.EIBProperties;
import com.eibus.util.system.Native;

import java.net.HttpURLConnection; 
import java.net.URL; 
import org.json.JSONObject;
import org.json.JSONArray;
import org.json.JSONTokener;
import org.json.XML;
import com.cordys.cpc.bsf.soap.SOAPRequestObject;
import com.eibus.xml.nom.Document;
import com.cordys.cpc.bsf.busobject.BSF;
import com.eibus.xml.nom.Node;
import com.eibus.xml.xpath.XPath;

import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.Arrays;
import java.util.Set;
import java.util.LinkedHashSet;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.channels.WritableByteChannel;
import java.nio.file.FileAlreadyExistsException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.nio.file.StandardOpenOption;
import java.sql.Timestamp;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;


public class WorksiteUtil extends WorksiteUtilBase
{
      public static CordysLogger logger=CordysLogger.getCordysLogger(WorksiteUtil.class);
	static SimpleDateFormat istDf = new SimpleDateFormat("MM/dd/yyyy' 'hh:mm:ss a");
    static SimpleDateFormat etDf = new SimpleDateFormat("MM/dd/yyyy' 'hh:mm:ss a");
private static final SimpleDateFormat fileTimeFormat = new SimpleDateFormat("yyyyMMddHHmmss");
 private static final int BUFFER_SIZE = 4096;
    static TimeZone etTimeZone = TimeZone.getTimeZone("America/New_York");
     
	public static String APP_SF_AUTHORISE_URI="";
    public static String APP_SF_TOKEN_URI="";   
    public static String APP_SF_REDIRECT_URI="";
     public static String APP_SF_QUERY_URI="";
      public static String APP_SF_DOWNLOAD_URI ;
	public static String APP_SF_CLIENT_ID="";
	public static String APP_SF_CLIENT_SECRET="";
	public static String APP_SF_AUTHORIZE_CODE="";
    public static String SF_ACCESS_TOKEN="";   
    public static String SF_REFRESH_TOKEN="";
	public static String SF_AUTH_VALUE="";
	public static String SF_TOKEN_TYPE="";
	public static String APP_SF_DOC_DOWNLOAD_URL="";
	public static int SF_CONFG_NODE=-1;
public static String fileformatConfig="";
    public static Document document=BSF.getXMLDocument();
	private static String[] fileArray;
	
    static {
        //Set ET timezone
        etDf.setTimeZone( etTimeZone );
    }
    public WorksiteUtil()
    {
        this((BusObjectConfig)null);
    }

    public WorksiteUtil(BusObjectConfig config)
    {
        super(config);
    }

    public static String getETTimeinMilliSeconds(long MilliSecondsToConvert)
    {
        
	   long currentDateTime=MilliSecondsToConvert;
		long convertedETTimeinMS=0;
	 String ETdate="";
	
       Date currentDate = new Date(currentDateTime); 
             
     SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy' 'hh:mm:ss a");
	 ETdate = etDf.format(currentDate);
							   
										
	 return ETdate;
    }
  public static String exportToexcelReInstatement(String param1,String param2)
  {
    	String headerArrar[] = {"S.NO","GROUPNAME","GROUPNUMBER","DESCRIPTION","POLICY","OTStatus"};
  	try 
  	{
  		HSSFWorkbook hwb = new HSSFWorkbook();
  		HSSFFont font = hwb.createFont();
  		/*font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
  		//font.setColor(HSSFColor.WHITE.index);*/
  		//font.setFontHeightInPoints((short)12);
  		HSSFCellStyle style = hwb.createCellStyle();
  		//style.setFont(font);
  		/*style.setFillForegroundColor(HSSFColor.RED.index);
  		style.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
  		style.setAlignment(HSSFCellStyle.ALIGN_CENTER);
  		style.setBorderLeft(HSSFCellStyle.BORDER_THIN);
  		style.setBorderRight(HSSFCellStyle.BORDER_THIN;*/
  		HSSFCellStyle rowstyle = hwb.createCellStyle();
  	/*	rowstyle.setBorderBottom(HSSFCellStyle.BORDER_THIN);
  		rowstyle.setBorderLeft(HSSFCellStyle.BORDER_THIN);
  		rowstyle.setBorderRight(HSSFCellStyle.BORDER_THIN) ;
  		rowstyle.setBorderTop(HSSFCellStyle.BORDER_MEDIUM);*/
  		
  		HSSFSheet sheet = hwb.createSheet("Reinstatment Report");   
  		BusObjectIterator<WorksiteUtil> Reinstaterecords = WorksiteUtil.getReInstatementrecordsforXL(param1);		
  		int rowNo = 0;
  		HSSFRow rowhead = sheet.createRow((short) rowNo);
  		for (int i = 0; i < headerArrar.length ; i++)	
  		{    			
  			HSSFCell cell = rowhead.createCell((short) i);    			
  			cell.setCellStyle(style);
  			cell.setCellValue(headerArrar[i]);    			
  			//rowhead.createCell((short) i).setCellValue(headerArrar[i]);
  		}
  		while (Reinstaterecords.hasMoreElements()) 
  		{
  			BusObject responseObject = Reinstaterecords.nextElement();
  			int data = responseObject._getObjectData(); 
  			int eleNode = Node.getFirstChild(data);
  			int len = Node.getNumChildElements(data);
  			rowNo++;
  			HSSFRow row = sheet.createRow((short) rowNo);
  			//row.createCell((short) 0).setCellValue(rowNo);
  			HSSFCell cell1 = row.createCell((short) 0);
  			cell1.setCellStyle(rowstyle);
  			cell1.setCellValue(rowNo);
  			for (int j = 1; j < headerArrar.length; j++)
  			{
  				String val = Node.getData(eleNode);
  				HSSFCell cell2 = row.createCell((short) j);
      			cell2.setCellStyle(rowstyle);
      			cell2.setCellValue(val);
  				//row.createCell((short) j).setCellValue(val);
  				eleNode = Node.getNextSibling(eleNode);
  			}		
  		} 
  		sheet.setColumnWidth((short)0, (short)2000);
  		sheet.setColumnWidth((short)1, (short)9000);
  		sheet.setColumnWidth((short)2, (short)9000);
  		sheet.setColumnWidth((short)3, (short)4000);
  		
  		String excelFileName = "Reinstatement.xls";
  		ByteArrayOutputStream fos = new ByteArrayOutputStream();
  		hwb.write(fos);    			
  		//return Base64.encode(fos.toByteArray());
	return java.util.Base64.getEncoder().encodeToString(fos.toByteArray());
	//return null;
  	}    	
  	catch(Exception e)
  	{
  		e.printStackTrace();
  	}
  	return null;
  }


    public static BusObjectIterator<com.worksitewsapppackage.WorksiteUtil> getWorksiteUtilObjects(com.cordys.cpc.bsf.query.Cursor cursor)
    {
        // TODO implement body

      
          return null;
    }

public static String postURLDetails_old(String strUrl, String method,boolean checkAuth) throws Exception
	{
		HttpURLConnection con=null;
		String responseMessage="",strResponse="";
		int responseCode=0;
                boolean flagDoInput=true,flagDoOutput=true;
		try 
        {                
            URL url = new URL(strUrl); 
            con =(HttpURLConnection) url.openConnection(); 
  
//          con.setRequestProperty("Content-Type", "application/json"); 
			con.setRequestMethod(method); 
			String authToken="Bearer "+SF_ACCESS_TOKEN;
            if(checkAuth)
            {
                con.setRequestProperty("Authorization",SF_AUTH_VALUE);                
            }
             con.setRequestProperty("Accept", "*/*");        
           /*   con.setInstanceFollowRedirects(false); 
                con.setReadTimeout(30000); 
                con.setConnectTimeout(60000); */

            if(method.equalsIgnoreCase("GET"))
           {
                flagDoInput=false;
                flagDoOutput=false;
           }
           else
           {
                flagDoInput=true;
                flagDoOutput=true;
            }
            con.setDoInput(true); 
            con.setDoOutput(flagDoOutput); 
			logger.error("Method:"+method+",SF_AUTH_VALUE:"+SF_AUTH_VALUE);
            
			logger.error("get output stream");
          //  OutputStream out = con.getOutputStream();                               
            responseCode=con.getResponseCode();
            responseMessage= con.getResponseMessage();

			logger.error("Response Code:"+responseCode); 
			logger.error("Response Message:"+responseMessage);  

            if(responseCode == HttpURLConnection.HTTP_OK)
			{
                 // InputStream ip = con.getInputStream(); 
                logger.error("inside if" ); 
                BufferedReader br1 = new BufferedReader(new InputStreamReader( con.getInputStream())); 
                StringBuilder response = new StringBuilder(); 
                String responseSingle = null; 
                while ((responseSingle = br1.readLine()) != null)  
                { 
                    response.append(responseSingle); 
                } 
                strResponse = response.toString(); 
                logger.error("BR close"+responseSingle ); 
                br1.close();
            }
            else
            {
                logger.error("Inside else" ); 
                BufferedReader br1 = new BufferedReader(new InputStreamReader(con.getErrorStream())); 
                StringBuilder response = new StringBuilder(); 
                String responseSingle = null; 
                logger.error("read stream" ); 
                while ((responseSingle = br1.readLine()) != null)  
                { 
                    response.append(responseSingle); 
                } 
                strResponse = response.toString(); 
                logger.error("BR close"+responseSingle); 
                br1.close();
			}
			con.disconnect(); 
            
            logger.error(strResponse); 
  
        } catch (Exception e)              
        { 
            logger.error("Error:"+e); 
            throw e;
        } 
		return strResponse;
	}

public static String postURLDetails(String strUrl, String method,boolean checkAuth) throws Exception
	{
		HttpURLConnection con=null;
		String responseMessage="",strResponse="";
		int responseCode=0;
        boolean flagDoInput=true,flagDoOutput=true;
		try 
        {                
            URL url = new URL(strUrl); 
            con =(HttpURLConnection) url.openConnection(); 
  
//          con.setRequestProperty("Content-Type", "application/json"); 
			con.setRequestMethod(method); 
			String authToken="Bearer "+SF_ACCESS_TOKEN;
            if(checkAuth)
            {
                con.setRequestProperty("Authorization",SF_AUTH_VALUE);                
            }
             con.setRequestProperty("Accept", "*/*");        
           /*   con.setInstanceFollowRedirects(false); 
                con.setReadTimeout(30000); 
                con.setConnectTimeout(60000); */

            if(method.equalsIgnoreCase("GET"))
           {
                flagDoInput=false;
                flagDoOutput=false;
           }
           else
           {
                flagDoInput=true;
                flagDoOutput=true;
            }
            con.setDoInput(true); 
            con.setDoOutput(flagDoOutput); 
		//	logger.error("Method:"+method+",SF_AUTH_VALUE:"+SF_AUTH_VALUE);
            
		//	logger.error("get output stream");
          //  OutputStream out = con.getOutputStream();                               
            responseCode=con.getResponseCode();
            responseMessage= con.getResponseMessage();

		//	logger.error("Response Code:"+responseCode); 
		//	logger.error("Response Message:"+responseMessage);  

            if(responseCode == HttpURLConnection.HTTP_OK)
			{
                 // InputStream ip = con.getInputStream(); 
          //      logger.error("inside if" ); 
                BufferedReader br1 = new BufferedReader(new InputStreamReader( con.getInputStream())); 
                StringBuilder response = new StringBuilder(); 
                String responseSingle = null; 
                while ((responseSingle = br1.readLine()) != null)  
                { 
                    response.append(responseSingle); 
                } 
                strResponse = response.toString(); 
            //    logger.error("BR close"+responseSingle ); 
                br1.close();
            }
            else
            {
              //  logger.error("Inside else" ); 
                BufferedReader br1 = new BufferedReader(new InputStreamReader(con.getErrorStream())); 
                StringBuilder response = new StringBuilder(); 
                String responseSingle = null; 
                //logger.error("read stream" ); 
                while ((responseSingle = br1.readLine()) != null)  
                { 
                    response.append(responseSingle); 
                } 
                strResponse = response.toString(); 
                //logger.error("BR close"+responseSingle); 
                br1.close();
			}
			con.disconnect(); 
            
            //logger.error(strResponse); 
  
        } catch (Exception e)              
        { 
            //logger.error("Error:"+e); 
            throw e;
        }
		finally
		{
			try
			{
				con=null;
				if(Node.isValidNode(responseCode))
				{
					Node.delete(responseCode);
				}
			}catch(Exception e)
			{
				logger.error("Error in postURLDetails, finally:"+e);
			}
		}
		return strResponse;
	}	
    public static String getSecurityToken(String authKey) throws Exception
	{
	
		if(!loadSfConfigurations())
		{
		
			throw new Exception("Error while reading salesforce configuration");
		}
        String response="";
/*
        String strUrl="https://test.salesforce.com/services/oauth2/authorize";
		String clientId="3MVG93MGy9V8hF9N41b_XSkCG9pZhTQl20pZlXtwQaC5CKDEBbGQnANxZyt.nEsejmFytIsfNJjM9pzADJhHG";
		String redirectUrl="https://worksite--wims.lightning.force.com/lightning/page/home";
		String clientSecret="0B74AF24A9CC6D636B1BB3A87B2605B186C5FB42A57F729DBF26F3CE8EE8462F";
		String code="aPrxYGFJ64NPUaTzhEvMYkF6qs5QMDaZOB_VFaMCixPY2VQQ2xCDurMD3s8puZUkqbyktRtHxA%3D%3D";*/
		String strUrl="",clientId="",redirectUrl="",clientSecret="",code="",grantType="",responseType="code";
		
		strUrl=APP_SF_TOKEN_URI;
		clientId=APP_SF_CLIENT_ID;
		redirectUrl=APP_SF_REDIRECT_URI;
		clientSecret=APP_SF_CLIENT_SECRET;
		code=APP_SF_AUTHORIZE_CODE;
		
		if(authKey.equalsIgnoreCase("NEW") && authKey!=null)
		{
			//strUrl="https://test.salesforce.com/services/oauth2/token";
			grantType="authorization_code";
			strUrl=strUrl+"?client_id="+clientId+"&code="+code+"&client_secret="+clientSecret+"&redirect_uri="+redirectUrl+"&grant_type="+grantType;


            response=postURLDetails(strUrl,"POST",false);
			JSONObject objResponse=new JSONObject(response);
            
            //logger.error("error description:"+objResponse.getString("error_description"));
			// Get the token
			if(hasKey(objResponse,"access_token"))
			{
				SF_ACCESS_TOKEN=objResponse.getString("access_token");
				SF_REFRESH_TOKEN=objResponse.getString("refresh_token");
				SF_TOKEN_TYPE=objResponse.getString("token_type");
				SF_AUTH_VALUE=SF_TOKEN_TYPE+" "+SF_ACCESS_TOKEN;
			}
        
		}
		else if(authKey.equalsIgnoreCase("REFRESH") && authKey!=null)
		{
			//strUrl="https://test.salesforce.com/services/oauth2/token";
			grantType="refresh_token";
			strUrl=strUrl+"?grant_type="+grantType+"&client_id="+clientId+"&refresh_token="+SF_REFRESH_TOKEN;				
			response=postURLDetails(strUrl,"POST",false);
			JSONObject objResponse=new JSONObject(response);
			if(hasKey(objResponse,"access_token"))
			{
				SF_ACCESS_TOKEN=objResponse.getString("access_token");				
				SF_AUTH_VALUE=SF_TOKEN_TYPE+" "+SF_ACCESS_TOKEN;
			}
		}
		else
		{
		   return "Key must be either NEW or REFRESH";			   
		}
        return response;
	}

public static boolean hasKey(JSONObject jsonObject, String key) {
    return jsonObject != null && jsonObject.has(key);
}

	public static String prepareQuery(String appName) throws Exception
	{
		String queryText="";
        if(appName.equalsIgnoreCase("Master_Application_c"))
        {
			queryText= Node.getData(XPath.getFirstMatch(".//*[local-name()='QRY_MASTER_APPL_C']",null,SF_CONFG_NODE));
        }
        else if(appName.equalsIgnoreCase("Commission_Data__c"))
        {
			queryText= Node.getData(XPath.getFirstMatch(".//*[local-name()='Commission_Data__c']",null,SF_CONFG_NODE));
        }
else if(appName.equalsIgnoreCase("Master_Application_Extension__c"))
        {
			queryText= Node.getData(XPath.getFirstMatch(".//*[local-name()='Master_Application_Extension__c']",null,SF_CONFG_NODE));
        }
	
		else
		{
			//throw new Exception("Application name is not valid");
                             queryText= Node.getData(XPath.getFirstMatch(".//*[local-name()='"+appName+"']",null,SF_CONFG_NODE));
		}

		return queryText;
	}
    public static String getSFAppObjectsByQuery(String applicationName) throws Exception
	{
		String strAppData="",json="",response="",URL="",strQuery="",strAppRoot="<AppInfo></AppInfo>";
		int jsonNode=-1,nodeAppInfo=-1;
		// Refresh teh access token
		response=getSecurityToken("refresh");
		JSONObject tokenObj=new JSONObject(response);
		if(hasKey(tokenObj,"error"))
		{
			String errorText=tokenObj.getString("error")+":"+tokenObj.getString("error_description");
			throw new Exception("Access token is not refreshed, Error- "+errorText);
		}	
		//URL="https://worksite--wims.my.salesforce.com/services/data/v40.0/query/?q=";
                URL=APP_SF_QUERY_URI;
		//applicationName = "Master_application__c";
		strQuery=prepareQuery(applicationName);
		URL=URL.concat(strQuery);
                //logger.error("URL:"+URL);
		response=postURLDetails(URL,"GET",true);
		JSONObject jsonObj=new JSONObject(response);
		if(hasKey(jsonObj,"errorcode"))
		{
			String errorText=tokenObj.getString("errorcode")+":"+tokenObj.getString("message");;
			throw new Exception("Query execution failed, Error - "+errorText);
		}		
		strAppData="<data>"+XML.toString(jsonObj)+"</data>";
		//logger.error("Query Response:"+jsonObj.toString());
		//logger.error("field name:"+jsonObj.getString("name"));
		jsonNode=document.parseString(strAppData);
        nodeAppInfo=document.parseString(strAppRoot);
		Node.appendToChildren(jsonNode,nodeAppInfo);
		//logger.error("field name:"+Node.writeToString(nodeAppInfo,true));
		return Node.writeToString(nodeAppInfo,true);      
		//return strAppData;
	}
 
  public static int getAttachmentIdForAppID(String masterAppID) throws Exception
	{
		String strAppData="",json="",response="",URL="",strQuery="",strAppRoot="<AttachmentInfo></AttachmentInfo>";
		int jsonNode=-1,nodeAppInfo=-1;
		// Refresh teh access token //
		response=getSecurityToken("refresh");
		JSONObject tokenObj=new JSONObject(response);
                loadSfConfigurations();
		if(hasKey(tokenObj,"error"))
		{
			String errorText=tokenObj.getString("error")+":"+tokenObj.getString("error_description");
			throw new Exception("Access token is not refreshed, Error- "+errorText);
		}	
		
                URL=APP_SF_QUERY_URI +"select+ContentDocument.Title,ContentDocument.FileType,ContentDocument.CreatedDate,ContentDocument.FileExtension,ContentDocument.LatestPublishedVersionId,contentdocumentId+from+contentdocumentlink+where+ContentDocument.FileType+!=+'SNOTE'+AND+linkedentityid='"+masterAppID+"'";
	
		response=postURLDetails(URL,"GET",true);
                       JSONObject jObj=new JSONObject(response);
			//jsonNode=convertJsonToXml(jObj,"<Data></Data>");
                 strAppData=XML.toString(jObj,"Attachment");
		
		jsonNode=document.parseString(strAppData);
		
		return jsonNode;     
		
	}
 


	public static boolean loadSfConfigurations() throws Exception
	{
		String args[]={"key"};
		String values[]={"com/cica/worksite/Saleforce_Configurations.xml"};
		SOAPRequestObject srObj=null;
		int response=-1;boolean flag=false;
		
		
		try
		{
                       if(Node.isValidNode(SF_CONFG_NODE))
			{
				
					logger.error("Existing node is return");
					return true;
				
			}
			logger.error("From xml store");
			srObj=new SOAPRequestObject("http://schemas.cordys.com/1.0/xmlstore","GetXMLObject",args,values);
			response=srObj.sendAndWait();
			SF_CONFG_NODE=response;
			APP_SF_AUTHORISE_URI = Node.getData(XPath.getFirstMatch(".//*[local-name()='APP_SF_AUTHORISE_URI']",null,response));
			APP_SF_TOKEN_URI = Node.getData(XPath.getFirstMatch(".//*[local-name()='APP_SF_TOKEN_URI']",null,response));
			APP_SF_REDIRECT_URI = Node.getData(XPath.getFirstMatch(".//*[local-name()='APP_SF_REDIRECT_URI']",null,response));
			APP_SF_QUERY_URI = Node.getData(XPath.getFirstMatch(".//*[local-name()='APP_SF_QUERY_URI']",null,response));
			SF_ACCESS_TOKEN = Node.getData(XPath.getFirstMatch(".//*[local-name()='SF_ACCESS_TOKEN']",null,response));
			SF_REFRESH_TOKEN = Node.getData(XPath.getFirstMatch(".//*[local-name()='SF_REFRESH_TOKEN']",null,response));
			SF_TOKEN_TYPE = Node.getData(XPath.getFirstMatch(".//*[local-name()='SF_TOKEN_TYPE']",null,response));
			APP_SF_CLIENT_ID = Node.getData(XPath.getFirstMatch(".//*[local-name()='APP_SF_CLIENT_ID']",null,response));
			APP_SF_CLIENT_SECRET = Node.getData(XPath.getFirstMatch(".//*[local-name()='APP_SF_CLIENT_SECRET']",null,response));
			APP_SF_AUTHORIZE_CODE = Node.getData(XPath.getFirstMatch(".//*[local-name()='APP_SF_AUTHORIZE_CODE']",null,response));
                        APP_SF_DOWNLOAD_URI =  Node.getData(XPath.getFirstMatch(".//*[local-name()='APP_SF_DOWNLOAD_URI']",null,response));
                        APP_SF_DOC_DOWNLOAD_URL=Node.getData(XPath.getFirstMatch(".//*[local-name()='APP_SF_DOC_DOWNLOAD_URL']",null,response));

			flag=true;

			
		}catch(Exception ex)
		{
			logger.error("Error in loadSfConfigurations method:"+ex);
			flag=false;
		}
		return flag;
	}

        public static int convertJSONTolXMLLocal(String request,String rootName) throws Exception
	{
		
		int responseNode = -1;		
		if(request!=null && rootName!=null)
		{
			responseNode=document.parseString(rootName);
			JSONObject jsonObj=new JSONObject(request);
			Iterator<String> iterator = jsonObj.keys();
			while(iterator.hasNext())
			{
				String keyName=iterator.next();
				String keyValue="";
				if(JSONObject.NULL!=jsonObj.get(keyName))
				{
					keyValue=jsonObj.get(keyName).toString();
				}
				else
				{
					keyValue="";
				}
				document.createTextElement(keyName, keyValue, responseNode);
			//System.out.println(keyName+":"+keyValue);
			}
		}
		return responseNode;
	}
public static String getJSONKeyValue(JSONObject jsonObject,String key) throws Exception
	{
		String keyValue="";
		if(jsonObject!=null && hasKey(jsonObject,key))			
		{
			keyValue=jsonObject.get(key).toString();
			keyValue=(keyValue!=null && !keyValue.equalsIgnoreCase("null"))?keyValue:"";
		}
		return keyValue;
	}
public static int getMasterAppObjectById(String ID)
	{
		String URL="",response="";
		String strAppData="",strAppRoot="<AppInfo><MasterApplicationDetails></MasterApplicationDetails><BillCallContactDetails></BillCallContactDetails><BrokerDetails></BrokerDetails><AccountDetails></AccountDetails><ClientDetails></ClientDetails><OpportunityDetails></OpportunityDetails><CommissionDetails></CommissionDetails><AccountContactDetails></AccountContactDetails><ExtensionDetails></ExtensionDetails></AppInfo>";

		int masterAppNode=-1,nodeAppInfo=-1,brokerNode=-1,clientNode=-1,accountNode=-1,billCallContactNode=-1,userNode=-1,opportunityNode=-1,commissionNode=-1,payrollContactNode=-1,accountContactNode=-1,ExtensionNode=-1;
		String brokerId="",brokerName="",brokerEmail="",clientID="",clientName="",clientEmail="",clientPhone="",clientAddress="",accountID="",accountName="",billCallContactId="",billContactName="",opportunityId="",opportunityName="";
		String accountObjURL="",contactObjURL="",implMngrID="",userObjURL="",contactName="",opportunityObjURL="";
		JSONObject jObj=null,accountObj=null,userObj=null,bcontactObj=null,opportunityObj=null;
		try
		{
                 
			nodeAppInfo=document.parseString(strAppRoot);
            response=getSecurityToken("refresh");
			JSONObject tokenObj=new JSONObject(response);
			if(hasKey(tokenObj,"error"))
			{
				String errorText=tokenObj.getString("error")+":"+tokenObj.getString("error_description");
				throw new Exception("Access token is not refreshed, Error- "+errorText);
			}	
			URL = Node.getData(XPath.getFirstMatch(".//*[local-name()='APP_SF_MASTER_APP_OBJECT']",null,SF_CONFG_NODE));
			URL=URL+"/"+ID;
			response=postURLDetails(URL,"GET",true);
			
            jObj=new JSONObject(response);
            masterAppNode=convertJsonToXml(jObj,"<MasterApplication></MasterApplication>"); 
            Node.appendToChildren(masterAppNode, XPath.getFirstMatch(".//*[local-name()='MasterApplicationDetails']", null, nodeAppInfo));

			

// get the broker details// client details, account details from Account Object
       //     logger.error("brokerId:"+brokerId);

String implManagerId="";
			// Broker Details
			implManagerId=getJSONKeyValue(jObj, "Implementation_Manager__c");
			if(hasKey(jObj,"Broker__c"))
			{
				brokerId=jObj.get("Broker__c").toString();
				brokerId=(brokerId!=null && !brokerId.equalsIgnoreCase("null"))?brokerId:"";
				accountObjURL=Node.getData(XPath.getFirstMatch(".//*[local-name()='APP_SF_ACCOUNT_OBJECT']",null,SF_CONFG_NODE));				
				accountObjURL=accountObjURL+"/"+brokerId;
logger.error("accountObjURL:"+accountObjURL);
				response=postURLDetails(accountObjURL,"GET",true);				
	                        brokerNode=convertJSONTolXMLLocal(response,"<BrokerData></BrokerData>");
                                JSONObject brokerObj=new JSONObject(response);
				brokerName=getJSONKeyValue(brokerObj,"Name");
	                        //brokerEmail=brokerObj.get("PEO_CSR_Email__c").toString();
		                brokerEmail=getJSONKeyValue(brokerObj,"PEO_CSR_Email__c"); 	
	                        Node.createTextElement("BrokerName", brokerName, brokerNode);
	                        Node.createTextElement("BrokerEmail", brokerEmail, brokerNode);	           	            
	                        Node.appendToChildren(brokerNode, XPath.getFirstMatch(".//*[local-name()='BrokerDetails']", null, nodeAppInfo));
			}
			if(hasKey(jObj,"Master_App_Account__c") )   // Get account Name and Client details
			{
				clientID=jObj.get("Client__c").toString();
	            accountID=jObj.get("Master_App_Account__c").toString();
	            accountID=(accountID !=null && !accountID.equalsIgnoreCase("null"))?accountID:"";
				if(!accountID.isEmpty() && !ID.equalsIgnoreCase(""))
				{
					accountObjURL=Node.getData(XPath.getFirstMatch(".//*[local-name()='APP_SF_ACCOUNT_OBJECT']",null,SF_CONFG_NODE));	
					accountObjURL=accountObjURL+"/"+accountID;
					response=postURLDetails(accountObjURL,"GET",true);					
					accountObj=new JSONObject(response);					
					accountName=accountObj.get("Name").toString();	  
					accountNode=convertJSONTolXMLLocal(response,"<AccountData></AccountData>");
					Node.createTextElement("AccountName", accountName, accountNode);	            
					Node.appendToChildren(accountNode, XPath.getFirstMatch(".//*[local-name()='AccountDetails']", null, nodeAppInfo));
					clientNode=document.parseString("<ClientData></ClientData>");
					clientName = accountName;
					clientEmail=accountObj.get("PEO_CSR_Email__c").toString();
					clientEmail=(clientEmail.equalsIgnoreCase("null"))?"":clientEmail;
					clientPhone=accountObj.get("Phone").toString();
					clientPhone=(clientPhone.equalsIgnoreCase("null"))?"":clientPhone;
					clientAddress=getJSONKeyValue(accountObj,"BillingAddress");
					if(clientAddress!=null && !clientAddress.equalsIgnoreCase(""))
					{
						JSONObject bilingAddress=new JSONObject(clientAddress);
						String address="",street="",city="",country="",postalCode="",state="";
						street = getJSONKeyValue(bilingAddress,"street");
						address=(street.isEmpty())?address:address+street+"\n";
						city=getJSONKeyValue(bilingAddress,"city");
						address=(city.isEmpty())?address:address+""+city;
						state=getJSONKeyValue(bilingAddress,"state");
						address=(state.isEmpty())?address:address+", "+state;
						postalCode=getJSONKeyValue(bilingAddress,"postalCode");
						address=(postalCode.isEmpty())?address:address+" "+postalCode;
						country = getJSONKeyValue(bilingAddress,"country");
						address=(country.isEmpty())?address:address+"\n"+country;
						clientAddress=address;
					}
					Node.createTextElement("ClientName", clientName, clientNode);
					Node.createTextElement("ClientEmail", clientEmail, clientNode);
					Node.createTextElement("ClientPhone", clientPhone, clientNode);
					Node.createTextElement("ClientAddress", clientAddress, clientNode);
					Node.appendToChildren(clientNode, XPath.getFirstMatch(".//*[local-name()='ClientDetails']", null, nodeAppInfo));	
					//implManagerId=getJSONKeyValue(accountObj, "Implementation_Manager_ID__c");

				/*	if(implManagerId!=null && !implManagerId.equalsIgnoreCase("") && !implManagerId.equalsIgnoreCase("NONE") && !implManagerId.equalsIgnoreCase("Missing ID"))
					{
						userObjURL=Node.getData(XPath.getFirstMatch(".//*[local-name()='APP_SF_USER_OBJECT']",null,SF_CONFG_NODE));
						userObjURL=userObjURL+"/"+implManagerId;		
						response=postURLDetails(userObjURL,"GET",true);					
						userObj=new JSONObject(response);
		
						if(!hasKey(userObj, "errorCode"))
						{
							contactName=getJSONKeyValue(userObj, "Name");
							userNode=convertJSONTolXMLLocal(response,"<ImplementatationManager></ImplementatationManager>");	          
							Node.createTextElement("GroupContactName", contactName, userNode);	            
							Node.appendToChildren(userNode, nodeAppInfo);
						}
					} */
					// Read account contact details
					String qryContact=prepareQuery("Account_Contact_Details_c");
					qryContact=(qryContact==null)?"":qryContact;
					//String commissionUrl="";					
					qryContact=qryContact.replaceAll("SF_Account_ID", accountID);
					qryContact=APP_SF_QUERY_URI+qryContact;
				logger.error("qryContact:"+qryContact);
					response=postURLDetails(qryContact, "GET", true);
				logger.error("response:"+response);
					JSONObject contactObject=new JSONObject(response);
					if(hasKey(contactObject, "records"))
					{
						String jsonToken=contactObject.get("records").toString();
						jsonToken=(jsonToken==null)?"":jsonToken;
						if(!jsonToken.isEmpty() && !jsonToken.equalsIgnoreCase(""))
						{
							JSONTokener tokener=new JSONTokener(jsonToken);
							while(tokener.more())
							{
								JSONArray objContacts=(JSONArray)tokener.nextValue();
								/*JSONObject obj=array.getJSONObject(0);
								accountContactNode=convertJSONTolXMLLocal(obj.toString(),"<AccountContact></AccountContact>");
								Node.appendToChildren(accountContactNode, XPath.getFirstMatch(".//*[local-name()='AccountContactDetails']", null, nodeAppInfo));*/
								for (int k=0;k<objContacts.length();k++) {
									JSONObject objContact=objContacts.getJSONObject(k);
									accountContactNode=convertJSONTolXMLLocal(objContact.toString(),"<AccountContact></AccountContact>");
									Node.appendToChildren(accountContactNode, XPath.getFirstMatch(".//*[local-name()='AccountContactDetails']", null, nodeAppInfo));
								}
							}
							
						}
						
					}
				}				
			}
if(implManagerId!=null && !implManagerId.equalsIgnoreCase("") && !implManagerId.equalsIgnoreCase("NONE") && !implManagerId.equalsIgnoreCase("Missing ID"))
					{
						userObjURL=Node.getData(XPath.getFirstMatch(".//*[local-name()='APP_SF_USER_OBJECT']",null,SF_CONFG_NODE));
						userObjURL=userObjURL+"/"+implManagerId;		
						response=postURLDetails(userObjURL,"GET",true);					
						userObj=new JSONObject(response);
		
						if(!hasKey(userObj, "errorCode"))
						{
							contactName=getJSONKeyValue(userObj, "Name");
							userNode=convertJSONTolXMLLocal(response,"<ImplementatationManager></ImplementatationManager>");	          
							Node.createTextElement("GroupContactName", contactName, userNode);	            
							Node.appendToChildren(userNode, nodeAppInfo);
						}
			} 			
			if(hasKey(jObj,"Client__c") && (clientID!=null && !clientID.equalsIgnoreCase("") && !clientID.equalsIgnoreCase("null")))
			{
				
				//clientID="0037A00000XB2roQAD";
				String strURL=Node.getData(XPath.getFirstMatch(".//*[local-name()='APP_SF_CONTACT_OBJECT']",null,SF_CONFG_NODE));
				strURL=strURL+"/"+clientID;
				response=postURLDetails(strURL,"GET",true);
				//logger.error("broker respo:"+response);
	            JSONObject clientObj=new JSONObject(response);

	            payrollContactNode=convertJSONTolXMLLocal(response,"<PayrollContact></PayrollContact>");
	            Node.createTextElement("PayrollContactFirstName", getJSONKeyValue(clientObj,"FirstName"), payrollContactNode);
	            Node.createTextElement("PayrollContactLastName", getJSONKeyValue(clientObj,"LastName"), payrollContactNode);
	            Node.createTextElement("PayrollContactPhone", getJSONKeyValue(clientObj,"Phone"), payrollContactNode);
	            Node.createTextElement("PayrollContactEmail", getJSONKeyValue(clientObj,"Email"), payrollContactNode);
	            Node.appendToChildren(payrollContactNode,nodeAppInfo);
	          
			}
try
{
			if(hasKey(jObj,"Bill_Call_Contact__c"))
			{
				billCallContactId=jObj.get("Bill_Call_Contact__c").toString();
				if(!billCallContactId.equalsIgnoreCase("null")) {
					contactObjURL=Node.getData(XPath.getFirstMatch(".//*[local-name()='APP_SF_CONTACT_OBJECT']",null,SF_CONFG_NODE));
					
					//String strURL="https://worksite--wims.my.salesforce.com/services/data/v40.0/sobjects/Contact";
					contactObjURL=contactObjURL+"/"+billCallContactId;
	//logger.error("contactObjURL:"+contactObjURL);
					response=postURLDetails(contactObjURL,"GET",true);
	
					
		            bcontactObj=new JSONObject(response);
		            //brokerNode=convertJsonToXml(brokerObj,"<BrokerData></BrokerData>");
//		            billContactName=bcontactObj.getString("Salutation")+bcontactObj.getString("Name");
		            billContactName=bcontactObj.get("Salutation").toString()+bcontactObj.get("Name").toString();
		            billCallContactNode=convertJSONTolXMLLocal(response,"<BillCallContactData></BillCallContactData>");
		            //billCallContactNode=document.parseString("<BillCallContactData></BillCallContactData>");
		            Node.createTextElement("BillCallContactName", billContactName, billCallContactNode);	            
		            Node.appendToChildren(billCallContactNode, XPath.getFirstMatch(".//*[local-name()='BillCallContactDetails']", null, nodeAppInfo));
				}
			}
}catch(Exception e)
{
logger.error("Error:"+e);
}

try
{

			if(hasKey(jObj,"Opportunity__c"))
			{
		        opportunityId = jObj.get("Opportunity__c").toString();
		        if (opportunityId != null && !opportunityId.equalsIgnoreCase("null") && !opportunityId.isEmpty()) {
		          opportunityObjURL = Node.getData(XPath.getFirstMatch(".//*[local-name()='APP_SF_OPPORTUNITY_OBJECT']", null, SF_CONFG_NODE));
		          opportunityObjURL = opportunityObjURL + "/" + opportunityId;
		          response = postURLDetails(opportunityObjURL, "GET", true);
		          opportunityObj = new JSONObject(response);
		          opportunityName = opportunityObj.get("Name").toString();
		          opportunityNode = convertJSONTolXMLLocal(response, "<OpportunityData></OpportunityData>");
		          Node.createTextElement("OpportunityName", opportunityName, opportunityNode);
		          Node.appendToChildren(opportunityNode, XPath.getFirstMatch(".//*[local-name()='OpportunityDetails']", null, nodeAppInfo));
		        } 
		  	}
}catch(Exception e)
{
logger.error("Error:"+e);
}

try
{
			if(!ID.isEmpty() && !ID.equalsIgnoreCase(""))
			{
				String commisionQuery=prepareQuery("Commission_Data__c");
				String commissionUrl="";
				commisionQuery=(commisionQuery==null)?"":commisionQuery;
				commisionQuery=commisionQuery.replaceAll("SF_Master_App_ID", ID);
				commissionUrl=APP_SF_QUERY_URI+commisionQuery;
				response=postURLDetails(commissionUrl, "GET", true);
				JSONObject commissionObject=new JSONObject(response);
				if(hasKey(commissionObject, "records"))
				{
					String jsonToken=commissionObject.get("records").toString();
					jsonToken=(jsonToken==null)?"":jsonToken;
					if(!jsonToken.isEmpty() && !jsonToken.equalsIgnoreCase(""))
					{
						JSONTokener tokener=new JSONTokener(jsonToken);
						while(tokener.more())
						{
							JSONArray array=(JSONArray)tokener.nextValue();
							JSONObject obj=array.getJSONObject(0);
							commissionNode=convertJSONTolXMLLocal(obj.toString(),"<CommissionData></CommissionData>");
							Node.appendToChildren(commissionNode, XPath.getFirstMatch(".//*[local-name()='CommissionDetails']", null, nodeAppInfo));
						}
						
					}
					
				}
				
			}
}catch(Exception e)
{
logger.error("Error:"+e);

}
try
{
			if(!ID.isEmpty() && !ID.equalsIgnoreCase(""))
{
String ExtensionQuery=prepareQuery("Master_Application_Extension__c");
				String ExtensionUrl="";
				ExtensionQuery=(ExtensionQuery==null)?"":ExtensionQuery;
				ExtensionQuery=ExtensionQuery.replaceAll("SF_Master_App_ID", ID);
				ExtensionUrl=APP_SF_QUERY_URI+ExtensionQuery;

				logger.error("ExtensionUrl:"+ExtensionUrl);
				response=postURLDetails(ExtensionUrl, "GET", true);

				JSONObject ExtensionObject=new JSONObject(response);
				if(hasKey(ExtensionObject, "records"))
				{
					String jsonToken=ExtensionObject.get("records").toString();
					jsonToken=(jsonToken==null)?"":jsonToken;
					if(!jsonToken.isEmpty() && !jsonToken.equalsIgnoreCase(""))
					{
						JSONTokener tokener=new JSONTokener(jsonToken);
						while(tokener.more())
						{
							JSONArray array=(JSONArray)tokener.nextValue();
							JSONObject obj=array.getJSONObject(0);
							ExtensionNode=convertJSONTolXMLLocal(obj.toString(),"<ExtensionData></ExtensionData>");
							Node.appendToChildren(ExtensionNode, XPath.getFirstMatch(".//*[local-name()='ExtensionDetails']", null, nodeAppInfo));
						}
						
					}
					
				}
}
}catch(Exception e)
{
logger.error("Error:"+e);
}

				
}catch(Exception e)
		{
			logger.error("Error in getMasterAppObjectById method:"+e);
		}
		finally
		{
			try
			{
				userObj=null;bcontactObj=null;jObj=null;accountObj=null;opportunityObj=null;
				brokerId="";brokerName="";brokerEmail="";clientID="";clientName="";clientEmail="";clientPhone="";clientAddress="";accountID="";accountName="";billCallContactId="";billContactName=""; accountObjURL="";contactObjURL="";implMngrID="";userObjURL="";contactName="";
				strAppData="";URL="";response="";opportunityName="";opportunityId="";opportunityObjURL="";
		/*		if(Node.isValidNode(userNode))
				{
					Node.delete(userNode);
				}
				if(Node.isValidNode(billCallContactNode))
				{
					Node.delete(billCallContactNode);
				}
				if(Node.isValidNode(accountNode))
				{
					Node.delete(accountNode);
				}
				if(Node.isValidNode(clientNode))
				{
					Node.delete(clientNode);
				}
				if(Node.isValidNode(brokerNode))
				{
					Node.delete(brokerNode);
				}
				if(Node.isValidNode(masterAppNode))
				{
					Node.delete(masterAppNode);
				}				*/
			}catch(Exception ex)
			{
				logger.error("Error in getMasterAppObjectById method finally block:"+ex);
				
			}
		}
		return nodeAppInfo;
	}
public static int convertJsonToXml(JSONObject jsonObj,String parentNodeString) throws Exception
	{
		String respNode="",fieldName="",fieldValue="";
		String fieldArray[]=JSONObject.getNames(jsonObj);
		int parentNode=-1;
		parentNode=document.parseString(parentNodeString);
		for(int i=0;i<fieldArray.length;i++)
		{
			fieldName=fieldArray[i];			
			fieldValue=jsonObj.get(fieldName).toString();
                       if(fieldValue.equalsIgnoreCase("true") && fieldValue !=null)
                       {
                               fieldValue="Yes";
                       }
                        else if(fieldValue.equalsIgnoreCase("false") && fieldValue !=null)
                        {
                               fieldValue="No";
                        }
			fieldValue=(fieldValue!=null && fieldValue.equalsIgnoreCase("null"))?null:fieldValue;                        
			//fieldValue =(fieldValue!=null)?fieldValue.replaceAll("\\r|\\n", ""):fieldValue;
                        
                        //fieldValue=(fieldValue.equalsIgnoreCase("true"))?"Yes":"No";
			Node.createTextElement(fieldName,fieldValue,parentNode);
		}
		//respNode=Node.writeToString(parentNode,true);
		//logger.error("respoNode:"+respNode);
		//return respNode;
                return parentNode;
	}
	
	public static BusObject getValidationRulesForField(String fieldName)
	{
		
		String queryText = "select ScreenName,Header,ProgramName,Field,MinLength,MaxLength,Mandatory,DefaultValues,AllowedValues,DataType,Nullable,SourceField from LSPValidations where SourceField= :fieldname";
        QueryObject query = new QueryObject(queryText);
        query.addParameter("fieldname", "LSPValidations.Field", QueryObject.PARAM_STRING, fieldName);        
        query.setResultClass(WorksiteUtil.class);
        return query.getObject();
		
	}

        public static int validateData(int appData)
	{
		String strRoot="<Root><ValidationStatus></ValidationStatus></Root>",strErrorDetails="<ErrorDetails></ErrorDetails>",strError="<Error><ErrorField>abcd</ErrorField><ErrorMessage>absdfghj</ErrorMessage><DefaultValue></DefaultValue></Error>",strLabel="",strValue="",errorMessage="",errorCode="",errorField="";
		int rootNode=-1,errorDetailsNode=-1,paramNode=-1,errorNode=-1,paramNodes[];
		String mandateFlag="",nullableFlag="",defaultValue="",allowedValues="",validationStatus="", dataType="";
		int maxLengthFlag=0,minLengthFlag=0;
		String alwdValArray[]=null;
		boolean isValidationFailed=false;
		try{
		rootNode=document.parseString(strRoot);
		errorDetailsNode=document.parseString(strErrorDetails);
		
		paramNodes=XPath.getMatchingNodes(".//*[local-name()='param']",null,appData);
		//paramNode = XPath.getFirstMatch(".//*[local-name()='param1']",null,appData);
		for(int i=0;i<paramNodes.length;i++)
		{
			try
			{
				paramNode=paramNodes[i];
                errorField=Node.getAttribute(paramNode,"field");
				strLabel=Node.getAttribute(paramNode,"label");
				strValue=Node.getAttribute(paramNode,"value");
				strValue=(strValue==null)?"":strValue;
				// execute the query and get the result
				//BusObject obj=getValidationRulesForField(strLabel);
                                BusObject obj=getValidationRulesForField(errorField);
				if(obj!=null)
				{
					mandateFlag=obj.getStringProperty("Mandatory");
					nullableFlag=obj.getStringProperty("Nullable");
                    dataType=obj.getStringProperty("DataType");
					maxLengthFlag=obj.getIntProperty("MaxLength");
					minLengthFlag=obj.getIntProperty("MinLength");
					defaultValue=obj.getStringProperty("DefaultValues");
					allowedValues=obj.getStringProperty("AllowedValues");
				}
				else
				{
					throw new Exception("Validation rules not defined for the field:"+strLabel);
				}
				// apply the validation rules and set flag success/failed
				//mandateFlag="Y";
			if((mandateFlag.equalsIgnoreCase("Y"))&&(strValue == null || strValue.equalsIgnoreCase("")))
			{
				throw new Exception(strLabel+" is mandatory field");
			}

                       if(dataType.equalsIgnoreCase("number"))
			{
				boolean numeric = true;
		
				numeric = strValue.matches("\\d+");
		
				if(!numeric)
					throw new Exception("Only numeric values are allowed for the field: "+strLabel);
			
			}

			if(strValue.length()< minLengthFlag)
			{
				throw new Exception("The minimum length should be "+minLengthFlag+" of field: "+strLabel);
			}
			if(strValue.length()> maxLengthFlag)
			{
				throw new Exception("The maximum length should be "+maxLengthFlag+" of field: "+strLabel);
			}


			if(allowedValues!=null && !allowedValues.equalsIgnoreCase(""))
			{
				alwdValArray=allowedValues.split("~/~");
				if(!(Arrays.asList(alwdValArray)).contains(strValue))
				{
					throw new Exception("The allowed values of field:"+strLabel+" are "+Arrays.toString(alwdValArray));
				}
			}
			}catch(Exception e)
			{
                                isValidationFailed=true;
				errorCode="ERROR_"+(i+1);
				errorMessage=e.getMessage();
                errorNode=document.parseString(strError);
				Node.setDataElement(errorNode,"ErrorField",errorField);
				Node.setDataElement(errorNode,"ErrorMessage",errorMessage);
				Node.setDataElement(errorNode,"DefaultValue",defaultValue);
				Node.appendToChildren(errorNode,errorDetailsNode);
			}
			
		}		
		validationStatus=(isValidationFailed)?"FAILED":"SUCCESS";
		Node.setDataElement(rootNode,"ValidationStatus",validationStatus);
            //logger.error("Error Node:"+Node.writeToString(errorNode,true));
		Node.appendToChildren(errorDetailsNode,rootNode);
		
		}catch(Exception ex)
		{
			logger.error("Error :"+ex);
		}
		finally
		{
			try
			{
				Node.delete(paramNode);
				Node.delete(paramNode);
				Node.delete(errorDetailsNode);				
				strRoot=null;strErrorDetails=null;strError=null;strLabel=null;strValue=null;errorMessage=null;errorCode=null;			
				mandateFlag=null;nullableFlag=null;defaultValue=null;validationStatus=null;
			}catch(Exception q)
			{
				logger.error("Error in validateData method:"+q);
			}
		}
		return rootNode;
	}



  public static String getAttachmentDownloadURL(String masterAppID) throws Exception
	{
		String strAppData="",json="",response="",URL="",strQuery="",strAppRoot="<DownLoadInfo></DownLoadInfo>";
		int jsonNode=-1,nodeAppInfo=-1;
		// Refresh teh access token
		loadSfConfigurations();
		response=getSecurityToken("refresh");
		JSONObject tokenObj=new JSONObject(response);
		if(hasKey(tokenObj,"error"))
		{
			String errorText=tokenObj.getString("error")+":"+tokenObj.getString("error_description");
			throw new Exception("Access token is not refreshed, Error- "+errorText);
		}	
		
                URL=APP_SF_DOWNLOAD_URI +"/"+masterAppID+"?Autorization= Bearer Token "+SF_ACCESS_TOKEN;
	
		
		
		return URL;     
		
	}
 
public static int getMasterAppIDForGroup(String GroupID) throws Exception
    {
        String strAppData="",json="",response="",URL="",strQuery="",strAppRoot="<MasterAppInfo></MasterAppInfo>";
        int jsonNode=-1,nodeAppInfo=-1;
        // Refresh teh access token
        response=getSecurityToken("refresh");
        JSONObject tokenObj=new JSONObject(response);
                loadSfConfigurations();
        if(hasKey(tokenObj,"error"))
        {
            String errorText=tokenObj.getString("error")+":"+tokenObj.getString("error_description");
            throw new Exception("Access token is not refreshed, Error- "+errorText);
        }   
       
                URL=APP_SF_QUERY_URI +"select+ID+from+Master_Application__c+where+Group__c='"+GroupID+"'+and+Master_Application_Status__c='Approved'+order+by+CreatedDate+desc";
   
        response=postURLDetails(URL,"GET",true);
                       JSONObject jObj=new JSONObject(response);
            //jsonNode=convertJsonToXml(jObj,"<Data></Data>");
                 strAppData=XML.toString(jObj,"MasterAppID");
       
        jsonNode=document.parseString(strAppData);
       
        return jsonNode;    
       
    }
public static String getMasterAppDataFromLSP(String screenName,String header, String programName,String masterApp) throws Exception
	{
    	String jsonResponse="";
		String queryText="select * from LSPTransactions where MasterAppNumber= :masterApp " + 
				"and ScreenName= :screenName and replace(Header,' ','')=replace(:header,' ','') " + 
				"and ProgramName=:programName  order by ActivityId desc";
		QueryObject obj=new QueryObject(queryText);
		obj.addParameter("masterApp", "LSPTransactions.MasterAppNumber", QueryObject.PARAM_STRING, masterApp);
		obj.addParameter("screenName", "LSPTransactions.ScreenName", QueryObject.PARAM_STRING, screenName);
		obj.addParameter("header", "LSPTransactions.Header", QueryObject.PARAM_STRING, header);
		obj.addParameter("programName", "LSPTransactions.ProgramName", QueryObject.PARAM_STRING, programName);
		obj.setResultClass(WorksiteUtil.class);
		BusObject object= obj.getObject();
		if(object!=null)
		{
			jsonResponse=object.getStringProperty("Response");
		}
		return jsonResponse;
	}

      public static BusObjectIterator<BusObject> getErrorDetailsFromLSPMaster(String masterApp,String taskType,String companyCode,String groupNumber) throws Exception
	{
    	QueryObject obj=null;
    	String queryText="";
    	BusObjectIterator<BusObject> busObjects=null;
    	if(taskType.equalsIgnoreCase("GSTASK") && taskType!=null)
    	{
    		//queryText="select * from LSPMaster where CompanyCode= :CompanyCode and GroupNumber= :GroupNumber and Status in ('Screen Error','Data Error') and MasterAppNumber= :masterApp";
/*
queryText="select a.*,b.Sno,b.CurrentScreenData from LSPMaster a left join WIMSDataRequest b on a.ScreenName=b.ScreenName and a.Header=b.header and a.ProgramName=b.ProgramName and a.MasterAppNumber=b.MasterAppNumber where a.CompanyCode= :CompanyCode and a.GroupNumber= :GroupNumber and a.Status in ('Screen Error','Data Error') and a.MasterAppNumber= :masterApp";
*/
queryText="select a.*,b.Sno,b.CurrentScreenData from LSPScreenMaster a join WIMSDataRequest b on a.ScreenName=b.ScreenName and replace(a.Header,' ','')=replace(b.header,' ','') and a.GroupNumber=b.GroupNumber and a.CompanyCode=b.CompanyCode and a.RecentAttempt=b.AttemptNumber and a.MasterAppNumber=b.MasterAppNumber where a.CompanyCode= :CompanyCode and a.GroupNumber= :GroupNumber  and (a.Status in ('Screen Error','Data Error','') OR a.Status is null) and a.MasterAppNumber= :masterApp";
    		obj=new QueryObject(queryText);
    		obj.addParameter("masterApp", "LSPScreenMaster.MasterAppNumber", QueryObject.PARAM_STRING, masterApp);
    		obj.addParameter("CompanyCode", "LSPScreenMaster.CompanyCode", QueryObject.PARAM_STRING, companyCode);
    		obj.addParameter("GroupNumber", "LSPScreenMaster.GroupNumber", QueryObject.PARAM_STRING, groupNumber);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
    	else if(taskType.equalsIgnoreCase("IMTASK") && taskType!=null)
    	{
    		queryText="select * from WIMSDataRequest where CompanyCode=:CompanyCode and GroupNumber=:GroupNumber " + 
    				" and MasterAppNumber=:masterApp and (CurrentScreenData is not null AND CurrentScreenData!='')";
    		obj=new QueryObject(queryText);
    		obj.addParameter("masterApp", "WIMSDataRequest.MasterAppNumber", QueryObject.PARAM_STRING, masterApp);
    		obj.addParameter("CompanyCode", "WIMSDataRequest.CompanyCode", QueryObject.PARAM_STRING, companyCode);
    		obj.addParameter("GroupNumber", "WIMSDataRequest.GroupNumber", QueryObject.PARAM_STRING, groupNumber);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();
    	}
    	else
    	{
    		throw new Exception("Task details not found");
    	}
		return busObjects;
	}

public static BusObjectIterator<BusObject> getLSPTransactionByMasterApp(String screenName,String header, String programName,String masterApp) throws Exception
	{
    	String jsonResponse="";
		String queryText="select * from LSPTransactions where MasterAppNumber= :masterApp " + 
				"and ScreenName= :screenName and replace(Header,' ','')=replace(:header,' ','') " + 
				"and ProgramName=:programName  order by ActivityId desc";
		QueryObject obj=new QueryObject(queryText);
		obj.addParameter("masterApp", "LSPTransactions.MasterAppNumber", QueryObject.PARAM_STRING, masterApp);
		obj.addParameter("screenName", "LSPTransactions.ScreenName", QueryObject.PARAM_STRING, screenName);
		obj.addParameter("header", "LSPTransactions.Header", QueryObject.PARAM_STRING, header);
		obj.addParameter("programName", "LSPTransactions.ProgramName", QueryObject.PARAM_STRING, programName);
		obj.setResultClass(WorksiteUtil.class);
		return obj.getObjects();
		
	}
public static int GetMasterAppValidationDetails(String taskName,String masterAppNo)
	{
		int responseNode=-1,rootNode=-1;
		String lspResponse="",lspNodeStr="",screenName="",header="",programName="",masterApp="",errorType="";
		 int j=0;
		String arrayStr[]= {"[][{\"ErrorField\":[{\"Name\":\"Conservation\",\"Position\":\"x12y36\",\"Value\":\"X\"} ,{ \"Name\":\"OutboundCampaign\",\"Position\":\"x15y36\",\"Value\":\"X\"} ],\"ScreenName\":\"BLC800B\",\"errorMessage\":\"LSP BLC800B msg: Valid values 'Y' or 'N' \",\"Status\":\"Screen Error\"}]","[][{\"ErrorField\":[{\"Name\":\"FederalID\",\"Position\":\"x17y27\",\"Value\":\"000-00-0000\"} ],\"ScreenName\":\"CMS000A\",\"errorMessage\":\"LSP CMS000A msg: Federal tax I.D. is required.\",\"Status\":\"Screen Error\"}]","[][{\"ErrorField\":[{\"Name\":\"State code\",\"Position\":\"x12y36\",\"Value\":\"tyu\"} ,{ \"Name\":\"County\",\"Position\":\"x15y36\",\"Value\":\"US\"} ,{ \"Name\":\"city\",\"Position\":\"x11y36\",\"Value\":\"US\"}],\"ScreenName\":\"CMS000C\",\"errorMessage\":\"LSP CMS000C msg: City\",\"Status\":\"Screen Error\"}]","[][{\"ErrorField\":[{\"Name\":\"Email Id\",\"Position\":\"2791\",\"Value\":\"HLUser\"},{\"Name\":\"Confirm Email Id\",\"Position\":\"x20y37\",\"Value\":\"Itest@testmail.com\"}],\"ScreenName\":\"UTL004\",\"errorMessage\":\"LSP UTL004 msg:Both Email Ids should be same\",\"Status\":\"Screen Error\"}]"};

		try
		{
			// check the mode
			if(taskName.equalsIgnoreCase("GS Task") && taskName!=null)
			{
				//read data from the LSP master
				rootNode=document.parseString("<Root></Root>");
				BusObjectIterator<BusObject> errorDetailsIterator = getErrorDetailsFromLSPMaster(masterAppNo,taskName,"","");
				while(errorDetailsIterator.hasMoreElements())
				{
					
					BusObject errorDetails = errorDetailsIterator.nextElement();
					programName=errorDetails.getStringProperty("ProgramName");
					header=errorDetails.getStringProperty("Header");
					screenName=errorDetails.getStringProperty("ScreenName");
					errorType=errorDetails.getStringProperty("Status");
					
				
			/*	programName="CMS100A";
				header="Add Client Information";
				screenName="CMS100";*/
					
				//BusObject lspObject=getMasterAppDataFromLSP(screenName,header,programName,masterAppNo);
				//lspResponse=getMasterAppDataFromLSP(screenName,header,programName,masterAppNo);
					String queryText="select * from LSPTransactions where MasterAppNumber= :masterApp " + 
							"and ScreenName= :screenName and replace(Header,' ','')=replace(:header,' ','') " + 
							"and ProgramName=:programName  order by ActivityId desc";
					QueryObject obj=new QueryObject(queryText);

					obj.addParameter("masterApp", "LSPTransactions.MasterAppNumber", QueryObject.PARAM_STRING, masterAppNo);
					obj.addParameter("screenName", "LSPTransactions.ScreenName", QueryObject.PARAM_STRING, screenName);
					obj.addParameter("header", "LSPTransactions.Header", QueryObject.PARAM_STRING, header);
					obj.addParameter("programName", "LSPTransactions.ProgramName", QueryObject.PARAM_STRING, programName);
					obj.setResultClass(WorksiteUtil.class);
					BusObject transaction= obj.getObject();
					if(transaction!=null)
					{
						lspResponse=transaction.getStringProperty("Response").toString();
					}
				if(lspResponse!=null)
				{
					//lspResponse=object.getStringProperty("Response");
					responseNode=document.parseString("<Screen></Screen>");
					//document.createTextElement("Name", header, responseNode);

					//lspResponse=lspObject.getStringProperty("Response");
logger.error("LSP transaction:"+lspResponse);				

					//lspResponse=object.getStringProperty("Response");
logger.error("LSP transaction:"+lspResponse+","+screenName+","+header+","+programName+","+masterAppNo);				


					//lspResponse="[][{\"ErrorField\":[{\"Name\":\"Conservation\",\"Position\":\"x12y36\",\"Value\":\"X\"} ,{ \"Name\":\"OutboundCampaign\",\"Position\":\"x15y36\",\"Value\":\"X\"} ],\"ScreenName\":\"BLC800B\",\"errorMessage\":\"LSP BLC800B msg: Valid values Y or N \",\"Status\":\"Screen Error\"}]";
				/*	if(j<4)
					{
						lspResponse=arrayStr[j];
						j=j+1;
					}*/
					JSONTokener tokener=new JSONTokener(lspResponse);
					while(tokener.more())
					{
						JSONArray array=(JSONArray)tokener.nextValue();
						if(array.length()==0)
						{
							continue;
						}
						else
						{
							JSONObject responseObject=array.getJSONObject(0);
							logger.error("lsp object:"+responseObject);
							
							JSONArray errorFields=responseObject.getJSONArray("ErrorField");
							int fieldNode=-1;
							logger.error("lsp object array:"+errorFields);
							String lspFieldName="",lspFieldValue="",errorMessage="",status="",wimsFieldName="",wimsFieldType="",scName="",scHeader="";
							for(int i=0;i<errorFields.length();i++)    // create the fields xml
							{
							fieldNode=document.parseString("<Field></Field>");
							//System.out.println(errorFields.getJSONObject(i));
							JSONObject errorField=errorFields.getJSONObject(i);
							if(hasKey(responseObject, "ScreenName"))
							{
								scName=responseObject.get("ScreenName").toString();
								//document.createTextElement("Status",status, responseNode);
								
							}
							if(hasKey(errorField, "Name"))
							{
								lspFieldName=errorField.get("Name").toString();
								lspFieldName=(lspFieldName!=null && lspFieldName.equalsIgnoreCase("null"))?"":lspFieldName;

								//BusObject busObj=getWIMSFieldName(scName,header,programName,lspFieldName);
								
								BusObject busObj=getWIMSFieldName(screenName,header,programName,lspFieldName,taskName);
								if(busObj!=null)
								{
									wimsFieldName=busObj.getStringProperty("SourceField");
									wimsFieldType=busObj.getStringProperty("DataType");
									//scHeader=busObj.getStringProperty("Header");
								}
								
							}
							if(hasKey(errorField, "Value"))
							{
								lspFieldValue=errorField.get("Value").toString();
								lspFieldValue=(lspFieldValue!=null && lspFieldValue.equalsIgnoreCase("null"))?"":lspFieldValue;
							}
							document.createTextElement("LSPLabel",lspFieldName, fieldNode);
							document.createTextElement("Label",wimsFieldName, fieldNode);
							document.createTextElement("OriginalValue",lspFieldValue, fieldNode);
							document.createTextElement("Type",wimsFieldType, fieldNode);
							Node.appendToChildren(fieldNode, responseNode);
wimsFieldName="";wimsFieldType="";
						}
						// create the error messages
						if(hasKey(responseObject, "errorMessage"))
						{
							errorMessage=responseObject.get("errorMessage").toString();
							document.createTextElement("Error",errorMessage, responseNode);
						}
						// create the status
						if(hasKey(responseObject, "Status"))
						{
							status=responseObject.get("Status").toString();
							document.createTextElement("Status",status, responseNode);
						}
						document.createTextElement("Name", header, responseNode);
						//document.createTextElement("Name", scName, responseNode);
						//System.out.println(responseObject);
						}
					
					}
					//lspResponse="{\"ErrorPosition\":[],\"ScreenName\":\"CMS100A\",\"ErrorField\":null,\"errorMessage\":null,\"Status\":\"Successful\"}";
					//JSONObject obj=new JSONObject(lspResponse);
					//lspNodeStr=XML.toString(obj,"root");
					
					//responseNode=document.parseString(lspNodeStr);
					// convert to XML
					
				// 
					Node.appendToChildren(responseNode, rootNode);
				}	
				}
			}
			else if(taskName.equalsIgnoreCase("IM Task") && taskName!=null)
			{
				// read validation response from the WIMS
			}
			else
			{
				throw new Exception("Invalid task");
			}
			// read the data from the table as per the mode
			
			// convert json object to linearize XML as per the format
			
			// 
		}catch(Exception ex)
		{
			logger.error("Error in GetMasterAppValidationDetails method:"+ex);
		}
		return rootNode;
	}

    private static BusObject getWIMSFieldName(String screenName, String header, String programName, String lspFieldName,String taskName) 
    {
    	String fieldName="",queryText="";
    	QueryObject obj=null;
    	if(taskName.equalsIgnoreCase("IMTask"))
    	{
    		queryText="select * from LSPValidations where Field = :field and Header=:header and DisplayName=:displayName";
    		obj=new QueryObject(queryText);
    		obj.addParameter("field", "LSPValidations.Field", QueryObject.PARAM_STRING, lspFieldName);
    		obj.addParameter("displayName", "LSPValidations.DisplayName", QueryObject.PARAM_STRING, programName);
    		obj.addParameter("header", "LSPValidations.Header", QueryObject.PARAM_STRING, header);
    	}
    	else
    	{
    		queryText="select * from LSPValidations where Field =:field" + 
    				" and ScreenName= :screenName and replace(Header,' ','')=replace(:header,' ','') "+ 
    				" and DisplayName=:displayName";
    		obj=new QueryObject(queryText);
    		obj.addParameter("field", "LSPValidations.Field", QueryObject.PARAM_STRING, lspFieldName);
    		obj.addParameter("screenName", "LSPValidations.ScreenName", QueryObject.PARAM_STRING, screenName);
    		obj.addParameter("header", "LSPValidations.Header", QueryObject.PARAM_STRING, header);
//    		obj.addParameter("programName", "LSPValidations.ProgramName", QueryObject.PARAM_STRING, programName);    		
    		obj.addParameter("displayName", "LSPValidations.DisplayName", QueryObject.PARAM_STRING, programName);
    	}
    	obj.setResultClass(WorksiteUtil.class);
		return obj.getObject();
		
    }

    public static JSONArray removeDuplicateJSONObjects(JSONArray jsonArray,String keyName) throws Exception
	{
		Set<String> set=new HashSet<String>(); 
		JSONArray tempArray=new JSONArray();
		JSONObject object=jsonArray.getJSONObject(0);
		if(hasKey(object, keyName) && !object.get(keyName).toString().equalsIgnoreCase("null"))
		{
			JSONArray errorFields=(JSONArray)object.get(keyName);
			//System.out.println(errorFields.length());
			for (int i=0;i<errorFields.length();i++) {				
				set.add((String) errorFields.get(i).toString());
			}		
			Iterator<String> iterator=set.iterator();
			while(iterator.hasNext())
			{
				String jsonString=iterator.next();
				//System.out.println(jsonString);
				JSONObject jsonObject=new JSONObject(jsonString);
				tempArray.put(jsonObject);
			}
		}		
		return tempArray;
	}
  	 
      public static int convertJSONErrortoXMLByType(String screenName,String headerName,String programName,String errorType,String json,String taskName) throws Exception
	{
		int responseNode=-1;
		String lspFieldName="",lspFieldValue="",errorMessage="",status="",wimsFieldName="",wimsFieldType="",scName="",scHeader="",headerString="";
		try
		{
			// validate the request json is not null
			if(taskName.equalsIgnoreCase("IMTASK") && taskName!=null)
			{
					JSONObject imRepsonse=new JSONObject(json);
				//String respXMLString=XML.toString(imRepsonse);
			
				//responseNode=document.parseString(respXMLString);
if(!headerName.equalsIgnoreCase("") && headerName!=null)
				{
					headerString=headerName.replaceAll("\\s+", "");
				}
scHeader="<"+headerName+"></"+headerName+">";

scHeader=scHeader.replaceAll("\\s+", "");
				responseNode=document.parseString(scHeader);
				//document.createTextElement("Name", headerName,responseNode);
//				logger.error("Error in headerName"+headerName);
//logger.error("Error in scHeader"+scHeader);

				// get Field Details
				
				imRepsonse=new JSONObject(json);
		//		JSONObject headerObj=(JSONObject) imRepsonse.get(headerName);
JSONObject headerObj=(JSONObject) imRepsonse.get(headerString);
				if((headerName.equalsIgnoreCase("Real CI Setup")|| headerString.equalsIgnoreCase("RealCISetup")) && headerName!=null)
				{
					headerObj=(JSONObject) headerObj.get("GISET01D");
				
				}
				Iterator itr=headerObj.keys();
				while(itr.hasNext())
				{
					String displayName=(String)itr.next();JSONObject displayNameObj=null;		
String fldName="",fldValue=""; JSONObject productObject=null;
					try
					{
					displayNameObj=(JSONObject) headerObj.get(displayName);
				/*	if(hasKey(displayNameObj,"ProductHybrdDI"))
					{
						//create Node ProductHybrdDI

						document.createTextElement("ProductHybrdDI", "", responseNode);
						productObject=(JSONObject)displayNameObj.get("ProductHybrdDI");
						//System.out.println("Node ProductHybrdDI");			
						Iterator prodIterator = productObject.keys();
						while(prodIterator.hasNext())
						{							
							fldName=(prodIterator.next().toString());
							fldValue=productObject.get(fldName).toString();
							//System.out.println(fieldName+","+fieldValue);
							BusObject busObject=getWIMSFieldName("",headerName,"ProductHybrdDI",fldName,taskName);
							if(busObject!=null)
							{
								String flSource = busObject.getStringProperty("SourceField");
								flSource=(flSource==null || flSource.equalsIgnoreCase(""))?"NA":flSource;
								document.createTextElement(flSource, fldValue, XPath.getFirstMatch(".//*[local-name()='ProductHybrdDI']", null, responseNode));
							}
						}

					}
					if(hasKey(displayNameObj,"ProductIndividualChampionCI"))
					{
						productObject=(JSONObject)displayNameObj.get("ProductIndividualChampionCI");
						//System.out.println("Node ProductIndividualChampionCI");
						document.createTextElement("ProductIndividualChampionCI", "", responseNode);
						Iterator prodIterator = productObject.keys();
						while(prodIterator.hasNext())
						{
							
							fldName=(prodIterator.next().toString());
							fldValue=productObject.get(fldName).toString();
							//System.out.println(fieldName+","+fieldValue);
							BusObject busObject=getWIMSFieldName("",headerName,"ProductIndividualChampionCI",fldName,taskName);
							if(busObject!=null)
							{
								String flSource = busObject.getStringProperty("SourceField");
								flSource=(flSource==null || flSource.equalsIgnoreCase(""))?"NA":flSource;
								document.createTextElement(flSource, fldValue, XPath.getFirstMatch(".//*[local-name()='ProductIndividualChampionCI']", null, responseNode));
							}
						}
					}
					if(hasKey(displayNameObj,"ProductWithPlanID"))
					{
						//System.out.println("Node Create:ProductWithPlanID");
						productObject=(JSONObject)displayNameObj.get("ProductWithPlanID");
						document.createTextElement("ProductWithPlanID", "", responseNode);
						Iterator prodIterator = productObject.keys();
						while(prodIterator.hasNext())
						{
							
							fldName=(prodIterator.next().toString());
							fldValue=productObject.get(fldName).toString();
							//System.out.println(fieldName+","+fieldValue);
							BusObject busObject=getWIMSFieldName("",headerName,"ProductWithPlanID",fldName,taskName);
							if(busObject!=null)
							{
								String flSource = busObject.getStringProperty("SourceField");
								flSource=(flSource==null || flSource.equalsIgnoreCase(""))?"NA":flSource;
								document.createTextElement(flSource, fldValue, XPath.getFirstMatch("ProductWithPlanID", null, responseNode));
							}
						}
					}
                                        */

					}catch(Exception ex)
					{
						document.createTextElement(displayName, headerObj.get(displayName).toString(), responseNode);
						continue;
					}
					if(displayNameObj!=null)
					{
						Iterator iterator=displayNameObj.keys();
						while(iterator.hasNext())
						{
							String fieldName=(iterator.next().toString());
							String fieldValue=displayNameObj.get(fieldName).toString();
							//System.out.println(fieldValue);

							String sourceField="";
							BusObject busObject=getWIMSFieldName("",headerName,displayName,fieldName,taskName);
							if(busObject!=null)
							{
								sourceField=busObject.getStringProperty("SourceField");
								sourceField=(sourceField==null || sourceField.equalsIgnoreCase(""))?"NA":sourceField;
								document.createTextElement(sourceField, fieldValue, responseNode);
							}											
							
						}
					}
					//System.out.println(headerObj.get(displayName).toString());
				}

			}
			else
			{
				responseNode=document.parseString("<Screen></Screen>");
				if(!errorType.equalsIgnoreCase("") && errorType!=null)
				{
			JSONTokener tokener=new JSONTokener(json);
			while(tokener.more())
			{
				int fieldNode=-1;
				JSONArray array=(JSONArray)tokener.nextValue();
				if(array.length()==0)
				{
					continue;
				}
				else
				{
					//scHeader=headerName.replaceAll("\\s+", "");
					//scHeader="<"+scHeader+"></"+scHeader+">";	
/*					responseNode=document.parseString("<Screen></Screen>");
					if(!errorType.equalsIgnoreCase("") && errorType!=null)
					{*/	

					//responseNode=document.parseString(scHeader);
					document.createTextElement("Name", headerName, responseNode);
					document.createTextElement("Status",errorType, responseNode);					
					JSONObject responseObject=array.getJSONObject(0);
					String subScreenName="";
					if(hasKey(responseObject,"ScreenName"))
					{
						subScreenName=responseObject.get("ScreenName").toString();
					}
					//JSONArray errorFields=responseObject.getJSONArray("ErrorField");
					JSONArray errorFields=removeDuplicateJSONObjects(array, "ErrorField");
					for(int i=0;i<errorFields.length();i++)    						// create the fields xml
					{
						fieldNode=document.parseString("<Field></Field>");						
						JSONObject errorField=errorFields.getJSONObject(i);
						/*if(hasKey(responseObject, "ScreenName"))
						{
							scName=responseObject.get("ScreenName").toString();							
						}*/
						if(hasKey(errorField, "Name"))
						{
							lspFieldName=errorField.get("Name").toString();
							lspFieldName=(lspFieldName!=null && lspFieldName.equalsIgnoreCase("null"))?"":lspFieldName;	
							lspFieldName=lspFieldName.replaceAll("\\s+", "");	
							int existingNode=XPath.getFirstMatch(".//*[local-name()='LSPLabel'][text()='"+lspFieldName+"']", null, responseNode);
							int nodeArray[]=XPath.getMatchingNodes(".//*[local-name()='LSPLabel'][text()='"+lspFieldName+"']", null, responseNode);
							if (Node.isValidNode(existingNode) && nodeArray.length > 0) {
								continue;
							}				
					//		BusObject busObj=getWIMSFieldName(screenName,headerName,programName,lspFieldName,taskName);
							BusObject busObj=getWIMSFieldName(screenName,headerName,subScreenName,lspFieldName,taskName);
							if(busObj!=null)
							{
								wimsFieldName=busObj.getStringProperty("SourceField");
								wimsFieldType=busObj.getStringProperty("DataType");							
							}
						}
						if(hasKey(errorField, "Value"))
						{
							lspFieldValue=errorField.get("Value").toString();
							lspFieldValue=(lspFieldValue!=null && lspFieldValue.equalsIgnoreCase("null"))?"":lspFieldValue;
						}

						//int existingNode=XPath.getFirstMatch(".//*[local-name()='LSPLabel'][text()='"+lspFieldName+"']", null, responseNode);

						//int nodeArray[]=XPath.getMatchingNodes(".//*[local-name()='LSPLabel'][text()='"+lspFieldName+"']", null, responseNode);
						//if (!Node.isValidNode(existingNode) && nodeArray.length <= 0) {
				              document.createTextElement("LSPLabel", lspFieldName, fieldNode);
				              document.createTextElement("Label", wimsFieldName, fieldNode);
				              document.createTextElement("OriginalValue", lspFieldValue, fieldNode);
				              document.createTextElement("Type", wimsFieldType, fieldNode);
				              Node.appendToChildren(fieldNode, responseNode);
				              wimsFieldName = "";
				              wimsFieldType = "";
						//}



					}
					// create the error messages
					if(hasKey(responseObject, "errorMessage"))
					{
						errorMessage=responseObject.get("errorMessage").toString();
						if(errorType.equalsIgnoreCase("Data Error") && errorType!=null)
						{
							errorMessage=errorMessage.replaceAll("~\\\\~", "~/~");
//errorMessage=errorMessage.replaceAll("\\|", "~/~");
						}
						document.createTextElement("Error",errorMessage, responseNode);
					}				
				}
			}
			}
			}
		}catch(Exception ex)
		{
			logger.error("Error in convertJSONErrortoXMLByType"+ex);
                        throw ex;
		}
		return responseNode;
	}

 public static String getDocumentContent(String docVersionID,String fileName,String fileType)  throws IOException
  	 {
  		 //Added by Chaithanya for OT Upgrade Migration for Filepath changes
            String fileInDir = "";
                 String args[]={"key"};
		String values[]={"com/cica/worksite/Saleforce_Configurations.xml"};
		SOAPRequestObject srObj=null;
		int responsee=-1;boolean flag=false;
        srObj=new SOAPRequestObject("http://schemas.cordys.com/1.0/xmlstore","GetXMLObject",args,values);
        responsee=srObj.sendAndWait();
		fileInDir = Node.getData(XPath.getFirstMatch(".//*[local-name()='Install_DIR']",null,responsee));

String fileContent="",encryptedData="",response="";
  		 byte[] byteArray=null;
int bytesRead = -1;
String saveFilePath="";
String url1="";
  		try
{
  			response=getSecurityToken("refresh");
			JSONObject tokenObj=new JSONObject(response);
			if(hasKey(tokenObj,"error"))
			{
				String errorText=tokenObj.getString("error")+":"+tokenObj.getString("error_description");
				throw new Exception("Access token is not refreshed, Error- "+errorText);
			}	
                         String FileName1 =  fileName+"."+fileType;
                       //saveFilePath = EIBProperties.getInstallDir()+"\\webroot\\shared\\WorkSite\\"+FileName1 ; //Commented for OT Upgrade Project Changes
                       saveFilePath = fileInDir+"\\WorkSite\\"+FileName1 ;  //Added by Chaithanya for OT Upgrade Migration for Filepath changes
// String url1="https://worksite--wims.my.salesforce.com/services/data/v40.0/sobjects/ContentVersion/SF_DOC_ID/VersionData";
url1=APP_SF_DOC_DOWNLOAD_URL;
  			 url1=url1.replaceFirst("SF_DOC_ID", docVersionID);
                         SF_AUTH_VALUE="Bearer "+SF_ACCESS_TOKEN;
                         URL url = new URL(url1);		
			HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();
			httpConn.setRequestProperty("Authorization",SF_AUTH_VALUE);		
			int responseCode = httpConn.getResponseCode();		
			if (responseCode == HttpURLConnection.HTTP_OK) 
			{			
				String disposition = httpConn.getHeaderField("Content-Disposition");
				String contentType = httpConn.getContentType();
				int contentLength = httpConn.getContentLength();			
				if (disposition != null) 
				{
					// extracts file name from header field
					int index = disposition.indexOf("filename=");
					if (index > 0) 
					{
						//fileName = disposition.substring(index + 10,disposition.length() - 1);
					}
				} 
				else 
				{
					// extracts file name from URL
					//fileName = fileURL.substring(fileURL.lastIndexOf("/") + 1,fileURL.length());
				}			
			
			
				InputStream inputStream = httpConn.getInputStream();			
				FileOutputStream outputStream = new FileOutputStream(saveFilePath);		
				byte[] buffer = new byte[BUFFER_SIZE];
				while ((bytesRead = inputStream.read(buffer)) != -1) 
				{
					outputStream.write(buffer, 0, bytesRead);
				}			
				outputStream.close();
				inputStream.close();				
				
			}
			else 
			{
			   logger.error("File Not Found!");
			}
                        logger.error("File Found!");
			httpConn.disconnect();
		}
catch(Exception e)
													{
														   logger.error("File Found!");
													}
  			
  		 
  		 return saveFilePath;
  	 }
public static String getValueFromJsonRec(JSONObject object,String key)
	{
		String returnValue="";
		if(object!=null)
		{
			Iterator iterator=object.keys();
			while(iterator.hasNext())
			{
				String jsonObj=(String) iterator.next();
				//System.out.println(jsonObj);
				try
				{
					JSONObject object2=new JSONObject(object.get(jsonObj).toString());
					if(hasKey(object2, key))
					{
						returnValue=getJSONKeyValue(object2, key);
					}
					else
					{
						continue;
					}
				}catch(Exception ex)
				{
					//System.out.println(ex);
					continue;
				}
			}
		}
		return returnValue;
	}
	
 public static BusObject getPlanDetailsFromSfDataRequest(String masterApp,String companyCode,String groupNumber) throws Exception
 {
	 String planDetails="",queryText="",productDetails="";
	 QueryObject qObj=null;BusObject busObj=null;
	 try
	 {
		 // read json from sf data request table
		 queryText="select * from SFDataRequest where MasterAppNumber=:masterAppNumber and CompanyCode=:companyCode and GroupNumber=:groupNumber and tab='ProductInfo'";
		 qObj=new QueryObject(queryText);
		 qObj.addParameter("masterAppNumber", "SFDataRequest.masterAppNumber", QueryObject.PARAM_STRING, masterApp);
		 qObj.addParameter("companyCode", "SFDataRequest.CompanyCode", QueryObject.PARAM_STRING, companyCode);
		 qObj.addParameter("groupNumber", "SFDataRequest.GroupNumber", QueryObject.PARAM_STRING, groupNumber);
		 qObj.setResultClass(WorksiteUtil.class);
		 busObj=qObj.getObject();
		 
		 // read 
	 }catch(Exception ex)
	 {
		 logger.error("Error in getPlanDetailsFromSfDataRequest:"+ex);
	 }
	 return busObj;
 }
 public static String convertArrayToQuote(String productString)
	{
		String returnVal="";
		String[] productArray =productString.split(","); //{"IndiCIChampPlanIDGold","IndiCIChampPlanIDPlatinum","IndiCIChampPlanIDDiamond","IndiCIChampPlanIDCustom"};
		for(int i=0;i<productArray.length;i++)
		{
			String arrayData=productArray[i];
			if(arrayData!=null && !arrayData.equalsIgnoreCase("") && !arrayData.isEmpty()  && !arrayData.equalsIgnoreCase("null"))
			{
				returnVal=returnVal+arrayData+",";
			}
		}
		if(returnVal!=null && !returnVal.equalsIgnoreCase(""))
		{
			int count=returnVal.split(",").length;
			if(count<1)
				returnVal=returnVal+",,,";
			else if(count<2)
				returnVal=returnVal+",,";
			else if(count<=3)
				returnVal=returnVal+",";
		}


		return returnVal;
	}
public static int frameLSPXMLData(int LSPData)
	{

		String strRoot="<Root></Root>",taskMode="",companyCode="",groupNumber="",masterApp="",masterAppNo="";
		String caseHandlingType="";
		int rootNode=-1;
		String uwGuarenteedIssueApproved="",primaryStateLocation="",uwIndvCriticalIllnessChampion="",uwCriticalIllness="",uwIndividualHospitalChampion="",uwGroupDisablChampion="",diRatingClass="";
		boolean indvCIFlag=false,indvCiWithPlanFlag=false,diFlag=false;
		
		String diProductValue="",ciProductValue="", indCiProductValue="", indAccProductValue="",ihcProductValue="";
		
		
		try{
		rootNode=document.parseString(strRoot);
			
		taskMode=Node.getData(XPath.getFirstMatch(".//*[local-name()='Mode']",null,LSPData));
		companyCode=Node.getData(XPath.getFirstMatch(".//*[local-name()='KeyCompanyCode']",null,LSPData));
		groupNumber=Node.getData(XPath.getFirstMatch(".//*[local-name()='keyGroupNumber']",null,LSPData));
		masterApp=Node.getData(XPath.getFirstMatch(".//*[local-name()='KeyMasterApp']",null,LSPData));
		Node.createTextElement("KeyCompanyCode",companyCode ,rootNode );
		Node.createTextElement("keyGroupNumber",groupNumber ,rootNode );
		Node.createTextElement("KeyMasterApp",masterApp ,rootNode );
		//if(taskMode.equals("IMTask")) {
			String columnQueryText="select distinct Header from LSPValidations ";
			QueryObject columnQueryobj=new QueryObject(columnQueryText);
			BusObjectIterator<BusObject> columnObject= columnQueryobj.getObjects();
			String masterQuery="Select MasterAppNo from WKSOPSCase where ApplicationType='"+masterApp+"'";
			QueryObject masterQueryobj=new QueryObject(masterQuery);
			BusObject masterObj = masterQueryobj.getObject();
			if(masterObj==null)
			{
				throw new Exception("The master app details are not available in the WIMS");
			}
			masterAppNo = masterObj.getStringProperty("MasterAppNo");
			int masterAppNode = getMasterAppObjectById(masterAppNo);
			int accountNode = XPath.getFirstMatch(".//*[local-name()='AccountData']",null,masterAppNode);
			int masterSubNode= XPath.getFirstMatch(".//*[local-name()='MasterApplication']",null,masterAppNode);

			JSONObject productObject=null;
			if(Node.isValidNode(masterSubNode))
			{
				caseHandlingType=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Enrollment_Case_Type__c']", null, masterSubNode), "");
				caseHandlingType=(caseHandlingType==null)?"":caseHandlingType;
				uwGuarenteedIssueApproved=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Guaranteed_Issue_Approved__c']", null, masterSubNode), "");
//				primaryStateLocation=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Primary_State_Location__c']", null, masterSubNode), "");
				primaryStateLocation=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Situs_State__c']", null, masterSubNode), "");
				uwIndvCriticalIllnessChampion=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Individual_Critical_Illness_Champion__c']", null, masterSubNode), "");
				uwCriticalIllness=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Critical_Illness_Champion__c']", null, masterSubNode), "");
uwIndividualHospitalChampion=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_IHC_Plan_Type__c']", null, masterSubNode), "");
				uwGroupDisablChampion=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Group_Disability_Champion__c']", null, masterSubNode), "");
				diRatingClass=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='DI_Rating_Class__c']", null, masterSubNode), "");
				/*diFlag=getCaseHandlingConfig("DI",primaryStateLocation,uwGroupDisablChampion,diRatingClass);
indvCiWithPlanFlag=getCaseHandlingConfig("Group CI",primaryStateLocation,uwCriticalIllness,"");
indvCIFlag=getCaseHandlingConfig("Individual CI",primaryStateLocation,uwIndvCriticalIllnessChampion,"");
*/

				BusObject objPlanDetails=getPlanDetailsFromSfDataRequest(masterApp,companyCode,groupNumber);
				if(objPlanDetails!=null)
				 {
					 String productDetails=objPlanDetails.getStringProperty("SFData");
					 try
					 {
						 JSONObject obj=new JSONObject(productDetails);
						 String prodJson=obj.get("ProductInfo").toString();
						 productObject=new JSONObject(prodJson);
						 
					 }catch(Exception e)
					 {
						 //throw new Exception("Invalid json format:"+e);
						 logger.error("Error in rading plan details:"+e);
					 }
					 
				 }
			}
			
String benefitDuration="", elimPeriod="";
			int userNode= XPath.getFirstMatch(".//*[local-name()='ImplementatationManager']",null,masterAppNode);
			int commissionDataNode=XPath.getFirstMatch(".//*[local-name()='CommissionData']",null,masterAppNode);
			int payrolContactNode=XPath.getFirstMatch(".//*[local-name()='PayrollContact']",null,masterAppNode);
			String uwgpdChampion= Node.getData(XPath.getFirstMatch(".//*[local-name()='UW_Group_Disability_Champion__c']",null,masterAppNode));
//			String primaryState= Node.getData(XPath.getFirstMatch(".//*[local-name()='Primary_State_Location__c']",null,masterAppNode));
			String primaryState= Node.getData(XPath.getFirstMatch(".//*[local-name()='Situs_State__c']",null,masterAppNode));
			String dirClass= Node.getData(XPath.getFirstMatch(".//*[local-name()='DI_Rating_Class__c']",null,masterAppNode));
			String planIdNumber= Node.getData(XPath.getFirstMatch(".//*[local-name()='Plan_ID_Number__c']",null,masterAppNode));
			String cicaCode= Node.getData(XPath.getFirstMatch(".//*[local-name()='cicaCode']",null,LSPData));
			String nonCicaCode= Node.getData(XPath.getFirstMatch(".//*[local-name()='nonCicaCode']",null,LSPData));
			//updated since SF combined Elemination Period and Benefit Duration
			/*String elimPeriod= Node.getData(XPath.getFirstMatch(".//*[local-name()='DC_Elimination_Period__c']",null,masterAppNode));
			String benefitDuration= Node.getData(XPath.getFirstMatch(".//*[local-name()='DC_Benefit_Duration__c']",null,masterAppNode));*/
			
			//String benefitElimination = Node.getData(XPath.getFirstMatch(".//*[local-name()='Benefit_Duration_and_Elimination_Period__c']",null,masterAppNode));
			int[] extensionNodes = XPath.getMatchingNodes(".//*[local-name()='ExtensionData']", null, masterAppNode);
			String benefitElimination = (extensionNodes.length>0)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Benefit_Duration_and_Elimination_Period__c']", null, extensionNodes[0]), ""):"";
			if(benefitElimination!= null && benefitElimination!="")
			  {
			benefitDuration= benefitElimination.split(" - ")[0];
			elimPeriod= benefitElimination.split(" - ")[1];
			  }
			benefitDuration=(benefitDuration!=null)?benefitDuration.replaceAll("[^\\d.)(]", ""):"";

			diProductValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Group_Disability_Champion__c']", null, masterAppNode), "");
			indAccProductValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Individual_Accident_Champion__c']", null, masterAppNode), "");
			ciProductValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Critical_Illness_Champion__c']", null, masterAppNode), "");
			ihcProductValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_IHC_Plan_Type__c']", null, masterAppNode), "");
			indCiProductValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Individual_Critical_Illness_Champion__c']", null, masterAppNode), "");
			while(columnObject.hasMoreElements()) {
				String coulmnName="",tableCoulmn="";
				BusObject coulmnobj = columnObject.nextElement();
				tableCoulmn = coulmnobj.getStringProperty("Header");
				coulmnName = tableCoulmn.replaceAll("\\s+", "");
				int columnNode =-1;
				columnNode = document.createElement(coulmnName);
			//	String queryText="select  * from LSPValidations where Header='"+tableCoulmn+"'";

				/*
				 * R2.5 WIMSWRK-330 - use default values based on case type query change
				 */
				String queryText="";  //commented for R2
				if(caseHandlingType!=null && caseHandlingType.equalsIgnoreCase("Custom"))
				{
					queryText="select ScreenName,Header,ProgramName,DisplayName,Field,MinLength,MaxLength,DataType,Nullable,AllowedValues,Mandatory,SourceField,DefaultValuesStandard as 'DefaultValues' from LSPValidations  where Header='"+tableCoulmn+"'";
				}
				else
				{
					queryText="select ScreenName,Header,ProgramName,DisplayName,Field,MinLength,MaxLength,DataType,Nullable,AllowedValues,Mandatory,SourceField,DefaultValues as 'DefaultValues' from LSPValidations where Header='"+tableCoulmn+"'";
				}
				/*
				 * R2.5 WIMSWRK-330 - use default values based on case type query change
				 */
				QueryObject queryobj=new QueryObject(queryText);
				BusObjectIterator<BusObject> object= queryobj.getObjects();
				while(object.hasMoreElements()) {
					
					BusObject obj = object.nextElement();
					String field = "",fieldValue="",displayName="";
					field=obj.getStringProperty("SourceField");
					displayName=obj.getStringProperty("DisplayName");
					field = field.replaceAll("\\s+", "");
					//fieldValue = Node.getAttribute(LSPData, field);
					fieldValue = (Node.getData(XPath.getFirstMatch(".//*[local-name()='"+field+"']",null,LSPData))==null?"":Node.getData(XPath.getFirstMatch(".//*[local-name()='"+field+"']",null,LSPData)));
					if(coulmnName.equalsIgnoreCase("ClientInformation") || tableCoulmn.equalsIgnoreCase("Client Information")) {
						if(field.equalsIgnoreCase("GroupClientName")) {
							fieldValue = Node.getData(XPath.getFirstMatch(".//*[local-name()='Name']",null,accountNode));
							if(fieldValue==null)
								fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
								Node.appendToChildren(document.createElement(field), columnNode);
							else
								document.createTextElement(field,fieldValue, columnNode);
							
						}
						else if(field.equalsIgnoreCase("GroupClientSSN")) {
							fieldValue = Node.getData(XPath.getFirstMatch(".//*[local-name()='Name']",null,masterSubNode));
							if(fieldValue==null)
								fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							else {
								fieldValue = fieldValue.replaceAll("[^0-9]", "");
								fieldValue = fieldValue+fieldValue.substring(0,4);
							}
							if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
								Node.appendToChildren(document.createElement(field), columnNode);
							else
								document.createTextElement(field,fieldValue, columnNode);
						}
						else if(field.equalsIgnoreCase("GroupClientAddr1")) {
							fieldValue = Node.getData(XPath.getFirstMatch(".//*[local-name()='BillingStreet']",null,accountNode));
		fieldValue=fieldValue.replaceAll("(\\t|\\r?\\n)+", " ");
							if(fieldValue==null)
								fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							else {
								int n=30;
								if(fieldValue.length()>=30)
									fieldValue = fieldValue.substring(0, Math.min(fieldValue.length(), n));
								else
									fieldValue =fieldValue;
							}
							if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
								Node.appendToChildren(document.createElement(field), columnNode);
							else
								document.createTextElement(field,fieldValue, columnNode);
						}
						else if(field.equalsIgnoreCase("GroupClientAddr2")) {
							fieldValue = Node.getData(XPath.getFirstMatch(".//*[local-name()='BillingStreet']",null,accountNode));
							if(fieldValue==null)
								fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							else {
								if(fieldValue.length()>=60 || (fieldValue.length()<60 && fieldValue.length()>30))
									fieldValue = fieldValue.substring(30, Math.min(fieldValue.length(), 60));
								else
									fieldValue ="";
							}
							if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
								Node.appendToChildren(document.createElement(field), columnNode);
							else
								document.createTextElement(field,fieldValue, columnNode);
						}
						else if(field.equalsIgnoreCase("GroupClientAddr3")) {
							fieldValue = Node.getData(XPath.getFirstMatch(".//*[local-name()='BillingStreet']",null,accountNode));
							if(fieldValue==null)
								fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							else {
								if(fieldValue.length()>=90 || (fieldValue.length()<90 && fieldValue.length()>60))
									fieldValue = fieldValue.substring(60, Math.min(fieldValue.length(), 90));
								else
									fieldValue ="";
							}
							if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
								Node.appendToChildren(document.createElement(field), columnNode);
							else
								document.createTextElement(field,fieldValue, columnNode);
						}
						else if(field.equalsIgnoreCase("GroupClientCity")) {
							fieldValue = Node.getData(XPath.getFirstMatch(".//*[local-name()='BillingCity']",null,accountNode));
							if(fieldValue==null)
								fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
								Node.appendToChildren(document.createElement(field), columnNode);
							else
								document.createTextElement(field,fieldValue, columnNode);
						}
						else if(field.equalsIgnoreCase("GroupClientState")) {
							fieldValue = Node.getData(XPath.getFirstMatch(".//*[local-name()='BillingState']",null,accountNode));
							if(fieldValue==null)
								fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
								Node.appendToChildren(document.createElement(field), columnNode);
							else
								document.createTextElement(field,fieldValue, columnNode);
						}
						else if(field.equalsIgnoreCase("GroupClientZipCode")) {
							fieldValue = Node.getData(XPath.getFirstMatch(".//*[local-name()='BillingPostalCode']",null,accountNode));
							if(fieldValue==null)
								fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
								Node.appendToChildren(document.createElement(field), columnNode);
							else
								document.createTextElement(field,fieldValue, columnNode);
						}
						else if(field.equalsIgnoreCase("GroupClientBusinessPhone")) {
							fieldValue = Node.getData(XPath.getFirstMatch(".//*[local-name()='Phone']",null,accountNode));
							if(fieldValue==null)
								fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							else {
							//	fieldValue = fieldValue.replaceAll("[-]+", "");
							//	fieldValue = fieldValue.replaceAll("\\s+", "");
								fieldValue = fieldValue.replaceAll("[^\\d.)(]", "");
								if(fieldValue.length()>=10)
									fieldValue = fieldValue.substring(0, 10);
							}
							if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
								Node.appendToChildren(document.createElement(field), columnNode);
							else
								document.createTextElement(field,fieldValue, columnNode);
						}
						else if(field.equalsIgnoreCase("GroupClientFax")) {
							fieldValue = Node.getData(XPath.getFirstMatch(".//*[local-name()='Fax']",null,accountNode));
							if(fieldValue==null)
								fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							else {
								//fieldValue = fieldValue.replaceAll("[-]+", "");
								//fieldValue = fieldValue.replaceAll("\\s+", "");
								fieldValue = fieldValue.replaceAll("[^\\d.)(]", "");
								if(fieldValue.length()>=10)
									fieldValue = fieldValue.substring(0, 10);
							}
							if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
								Node.appendToChildren(document.createElement(field), columnNode);
							else
								document.createTextElement(field,fieldValue, columnNode);
						}
						else
						{
							if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
								fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
								Node.appendToChildren(document.createElement(field), columnNode);
							else
								document.createTextElement(field,fieldValue, columnNode);
						}
					}
					else if(coulmnName.equalsIgnoreCase("ContactCreation") || tableCoulmn.equalsIgnoreCase("Contact Creation")) {
						if(field.equalsIgnoreCase("UserMail") || field.equalsIgnoreCase("UserMail1")) {
							//fieldValue = Node.getData(XPath.getFirstMatch(".//*[local-name()='Email']",null,userNode));
							fieldValue = Node.getData(XPath.getFirstMatch(".//*[local-name()='Client_Email__c']",null,masterSubNode));
							if(fieldValue==null)
								fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
								Node.appendToChildren(document.createElement(field), columnNode);
							else
								document.createTextElement(field,fieldValue, columnNode);
							
						}
						else if(field.equalsIgnoreCase("UserFirstName")) {
							fieldValue = Node.getData(XPath.getFirstMatch(".//*[local-name()='PayrollContactFirstName']",null,payrolContactNode));
							if(fieldValue==null)
								fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
								Node.appendToChildren(document.createElement(field), columnNode);
							else
								document.createTextElement(field,fieldValue, columnNode);
						}
						else if(field.equalsIgnoreCase("UserLastName")) {
							fieldValue = Node.getData(XPath.getFirstMatch(".//*[local-name()='PayrollContactLastName']",null,payrolContactNode));
							//fieldValue = Node.getData(XPath.getFirstMatch(".//*[local-name()='HR_Payroll_Contact__c']",null,masterSubNode));
							/*if(fieldValue!=null)
							{
								fieldValue=fieldValue.replaceAll("\\.", "");
								fieldValue=fieldValue.replaceAll("\\,", "");
								if(fieldValue.length()>20)
								{
									fieldValue=fieldValue.substring(0, 20);
								}
							}*/
							if(fieldValue==null)
								fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
								Node.appendToChildren(document.createElement(field), columnNode);
							else
								document.createTextElement(field,fieldValue, columnNode);
						}
						else if(field.equalsIgnoreCase("UserPhone")) {
							//fieldValue = Node.getData(XPath.getFirstMatch(".//*[local-name()='Phone']",null,userNode));
							fieldValue = Node.getData(XPath.getFirstMatch(".//*[local-name()='Client_Phone__c']",null,masterSubNode));							
							if(fieldValue==null)
								fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							else {
								fieldValue = fieldValue.replaceAll("[^0-9]", "");
								if(fieldValue.length()>=10)
									fieldValue = fieldValue.substring(0,10);
								else
									fieldValue = fieldValue;
							}
							if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
								Node.appendToChildren(document.createElement(field), columnNode);
							else
								document.createTextElement(field,fieldValue, columnNode);
						}
					/*	else if(field.equalsIgnoreCase("UserPhoneExtension")) {
							fieldValue = Node.getData(XPath.getFirstMatch(".//*[local-name()='Extension']",null,userNode));
							if(fieldValue==null)
								fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							else {
								fieldValue = fieldValue.replaceAll("[^0-9]", "");
								if(fieldValue.length()>=5)
									fieldValue = fieldValue.substring(0,5);
								else
									fieldValue =fieldValue;
							}
							if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
								Node.appendToChildren(document.createElement(field), columnNode);
							else
								document.createTextElement(field,fieldValue, columnNode);
						}*/
						else
						{
							if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
								fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
								Node.appendToChildren(document.createElement(field), columnNode);
							else
								document.createTextElement(field,fieldValue, columnNode);
						}
					}
					else if(coulmnName.equalsIgnoreCase("MaintainGroupHierarchy") || tableCoulmn.equalsIgnoreCase("Maintain Group Hierarchy")) {
				/*
				 * R2.5 WIMSWRK-330 - read hierarchy levels from salesforce
				 */
						if(field.equalsIgnoreCase("cicaCode")) {
							if(cicaCode==null || cicaCode.isEmpty() || cicaCode.equalsIgnoreCase(""))
							{
								fieldValue=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Contract_Code_CICA__c']", null, commissionDataNode), null);								
							}								
							else {
								
								fieldValue = cicaCode;
							}
							if( fieldValue==null || fieldValue.isEmpty() || fieldValue.equalsIgnoreCase("") )
								fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							if( fieldValue==null || fieldValue.isEmpty() || fieldValue.equalsIgnoreCase("") )
								Node.appendToChildren(document.createElement(field), columnNode);
							else
								document.createTextElement(field,fieldValue, columnNode);
							
						}
						else if(field.equalsIgnoreCase("nonCicaCode")) {
							if(nonCicaCode==null || nonCicaCode.isEmpty() || nonCicaCode.equalsIgnoreCase(""))
							{
								fieldValue=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Contract_Code_Non_CICA__c']", null, commissionDataNode), null);
							}			
							else {
								fieldValue = nonCicaCode;
							}	
								
							if( fieldValue==null || fieldValue.isEmpty() || fieldValue.equalsIgnoreCase("") )
								fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							if( fieldValue==null || fieldValue.isEmpty() || fieldValue.equalsIgnoreCase("") )
								Node.appendToChildren(document.createElement(field), columnNode);
							else
								document.createTextElement(field,fieldValue, columnNode);
							
						}
						else if(field.equalsIgnoreCase("GrpHirLvl2")) {  // commented for R2
							fieldValue=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Level_2__c']", null, commissionDataNode), null);
							if( fieldValue==null || fieldValue.isEmpty() || fieldValue.equalsIgnoreCase(""))
							{
								fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							}
							document.createTextElement(field,fieldValue, columnNode);
						}
						else if(field.equalsIgnoreCase("GrpHirLvl3")) {
							fieldValue=Node.getDataWithDefault(XPath.getFirstMatch("Level_3__c", null, commissionDataNode), null);
							if( fieldValue==null || fieldValue.isEmpty() || fieldValue.equalsIgnoreCase(""))
							{
								fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							}
							document.createTextElement(field,fieldValue, columnNode);
						}
						else if(field.equalsIgnoreCase("GrpHirLvl4")) {
							fieldValue=Node.getDataWithDefault(XPath.getFirstMatch("Level_4__c", null, commissionDataNode), null);
							if( fieldValue==null || fieldValue.isEmpty() || fieldValue.equalsIgnoreCase(""))
							{
								fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							}
							document.createTextElement(field,fieldValue, columnNode);
						}
						else if(field.equalsIgnoreCase("GrpHirLvl5")) {
							fieldValue=Node.getDataWithDefault(XPath.getFirstMatch("Level_5__c", null, commissionDataNode), null);
							if( fieldValue==null || fieldValue.isEmpty() || fieldValue.equalsIgnoreCase(""))
							{
								fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							}
							document.createTextElement(field,fieldValue, columnNode);
						}
						else if(field.equalsIgnoreCase("GrpHirLvl6")) {
							fieldValue=Node.getDataWithDefault(XPath.getFirstMatch("Level_6__c", null, commissionDataNode), null);
							if( fieldValue==null || fieldValue.isEmpty() || fieldValue.equalsIgnoreCase(""))
							{
								fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							}
							document.createTextElement(field,fieldValue, columnNode);
						}
						else if(field.equalsIgnoreCase("GrpHirLvl7")) {
							fieldValue=Node.getDataWithDefault(XPath.getFirstMatch("Level_7__c", null, commissionDataNode), null);
							if( fieldValue==null || fieldValue.isEmpty() || fieldValue.equalsIgnoreCase(""))
							{
								fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							}
							document.createTextElement(field,fieldValue, columnNode);
						}
						else if(field.equalsIgnoreCase("GrpHirLvl8")) {
							fieldValue=Node.getDataWithDefault(XPath.getFirstMatch("Level_8__c", null, commissionDataNode), null);
							if( fieldValue==null || fieldValue.isEmpty() || fieldValue.equalsIgnoreCase(""))
							{
								fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							}
							document.createTextElement(field,fieldValue, columnNode);
						}
						else if(field.equalsIgnoreCase("GrpHirLvl9")) {
							fieldValue=Node.getDataWithDefault(XPath.getFirstMatch("Level_9__c", null, commissionDataNode), null);
							if( fieldValue==null || fieldValue.isEmpty() || fieldValue.equalsIgnoreCase(""))
							{
								fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							}
							document.createTextElement(field,fieldValue, columnNode);
						}
						else if(field.equalsIgnoreCase("GrpHirLvl10")) {
							fieldValue=Node.getDataWithDefault(XPath.getFirstMatch("Level_10__c", null, commissionDataNode), null);
							if( fieldValue==null || fieldValue.isEmpty() || fieldValue.equalsIgnoreCase(""))
							{
								fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							}
							document.createTextElement(field,fieldValue, columnNode);
						}  
						else
						{
							if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
								fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
								Node.appendToChildren(document.createElement(field), columnNode);
							else
								document.createTextElement(field,fieldValue, columnNode);
						}
					}
					else if(coulmnName.equalsIgnoreCase("MasterPolicyFulfillment") || tableCoulmn.equalsIgnoreCase("MasterPolicyFulfillment")) {
						String planQueryText ="",subQueryText,GrpDIPlanId = "",GrpCIPPlanId="", IHCPlanId="",GrpDIArr="", GrpCIPArr="";
						boolean DIFlag = false,CIFlag=false;
											// If case handling type is custom then dont execute the plan id rules
											if(!caseHandlingType.equalsIgnoreCase("Custom"))
											{
					/*	if(uwgpdChampion.indexOf(";")!=-1)
							//planQueryText = "select distinct PLanID from WKSOPsCaseHandlingConfig where Planname = 'DI' and State = '"+primaryState+"' and TYPE1 in('"+uwgpdChampion.replace(";", "','")+"') and TYPE3 = '"+dirClass+"'";
							planQueryText = "select distinct PLanID from WKSOPsCaseHandlingConfig where Planname = 'DI' and State = '"+primaryState+"' and TYPE1 in('"+uwgpdChampion.replace(";", "','")+"') and TYPE3 = '"+dirClass+"' and Type2='"+benefitDuration+"' and Type4 ='"+elimPeriod+"'";
						else
							//planQueryText = "select distinct PLanID from WKSOPsCaseHandlingConfig where Planname = 'DI' and State = '"+primaryState+"' and TYPE1 in('"+uwgpdChampion+"') and TYPE3 = '"+dirClass+"'";
							planQueryText = "select distinct PLanID from WKSOPsCaseHandlingConfig where Planname = 'DI' and State = '"+primaryState+"' and TYPE1 in('"+uwgpdChampion+"') and TYPE3 = '"+dirClass+"'  and Type2='"+benefitDuration+"' and Type4 ='"+elimPeriod+"'";
						QueryObject planQuery = new QueryObject(planQueryText);
						BusObjectIterator<BusObject> palnBusObjs = planQuery.getObjects();
						while(palnBusObjs.hasMoreElements()) {
							BusObject palnBusObj = palnBusObjs.nextElement();
							GrpDIPlanId =GrpDIPlanId+palnBusObj.getStringProperty("PLanID")+",";
							DIFlag=true;
						}

						if(uwCriticalIllness.indexOf(";")!=-1)
							subQueryText = "select distinct PLanID from WKSOPsCaseHandlingConfig where Planname = 'Group CI' and State = '"+primaryState+"' and TYPE1 in('"+uwCriticalIllness.replace(";", "','")+"')";
						else
							subQueryText = "select distinct PLanID from WKSOPsCaseHandlingConfig where Planname = 'Group CI' and State = '"+primaryState+"' and TYPE1 in('"+uwCriticalIllness+"')";
						QueryObject subQuery = new QueryObject(subQueryText);
						BusObjectIterator<BusObject> subBusObjs = subQuery.getObjects();
						while(subBusObjs.hasMoreElements()) {
							BusObject subBusObj = subBusObjs.nextElement();
							GrpCIPPlanId =GrpCIPPlanId+subBusObj.getStringProperty("PLanID")+",";
							CIFlag=true;
						}*/
						GrpDIPlanId=getValueFromJsonRec(productObject,"GrpDIChampPlanIDGold")+","+getValueFromJsonRec(productObject,"GrpDIChampPlanIDPlatinum")+","+getValueFromJsonRec(productObject,"GrpDIChampPlanIDDiamond")+","+getValueFromJsonRec(productObject,"GrpDIChampPlanIDCustom")+",";
						GrpCIPPlanId=getValueFromJsonRec(productObject,"CIChampPlanIDGold")+","+getValueFromJsonRec(productObject,"CIChampPlanIDPlatinum")+","+getValueFromJsonRec(productObject,"CIChampPlanIDDiamond")+","+getValueFromJsonRec(productObject,"CIChampPlanIDCustom")+",";
						IHCPlanId=getValueFromJsonRec(productObject,"IHCPlanIDBaseGold")+","+getValueFromJsonRec(productObject,"IHCPlanIDBasePlatinum")+","+getValueFromJsonRec(productObject,"IHCPlanIDBaseSilver")+","+getValueFromJsonRec(productObject,"IHCPlanIDBaseDiamond")+","+getValueFromJsonRec(productObject,"IHCPlanIDBaseCustom")+","+getValueFromJsonRec(productObject,"IHCPlanIDEnhancedGold")+","+getValueFromJsonRec(productObject,"IHCPlanIDEnhancedPlatinum")+","+getValueFromJsonRec(productObject,"IHCPlanIDEnhancedSilver")+","+getValueFromJsonRec(productObject,"IHCPlanIDEnhancedDiamond")+","+getValueFromJsonRec(productObject,"IHCPlanIDEnhancedCustom")+",";
						
						GrpCIPPlanId=convertArrayToQuote(GrpCIPPlanId);
						GrpDIPlanId=convertArrayToQuote(GrpDIPlanId);
						IHCPlanId=convertArrayToQuote(IHCPlanId);

						//if(displayName.equalsIgnoreCase("MasterPolicyFulfillmentHDI") && (!GrpDIPlanId.equalsIgnoreCase("") || GrpDIPlanId!=null && !GrpDIPlanId.isEmpty())) {
						if(displayName.equalsIgnoreCase("MasterPolicyFulfillmentHDI") && (!diProductValue.equalsIgnoreCase("") && diProductValue!=null && !diProductValue.isEmpty() && !diProductValue.equalsIgnoreCase("null"))) {
							if(field.equalsIgnoreCase("GrpDISitusforMF")) {
								fieldValue = primaryState;
								if(fieldValue==null)
									fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
									Node.appendToChildren(document.createElement(field), columnNode);
								else
									document.createTextElement(field,fieldValue, columnNode);
							}
							else if(field.equalsIgnoreCase("GrpDIEffDateforMF")) {
								//fieldValue = Node.getData(XPath.getFirstMatch(".//*[local-name()='Original_Effective_Date__c']",null,accountNode));
							//fieldValue=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Effective_Date__c']", null, masterSubNode), "");
							fieldValue=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Policy_Effective_Date__c']", null, masterSubNode), "");
								if(fieldValue==null)
									fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								else {
									fieldValue = fieldValue.replaceAll("[-]", "");
								}
								if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
									Node.appendToChildren(document.createElement(field), columnNode);
								else 
									document.createTextElement(field,fieldValue, columnNode);
							}
							else if(field.equalsIgnoreCase("GrpDIPlanIDforMF")) {
								fieldValue = GrpDIPlanId;
							/*	if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
									fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								else {
									fieldValue = "";
									GrpDIArr = GrpDIPlanId.substring(0, GrpDIPlanId.length() - 1);
							        int strLength=GrpDIArr.split(",").length;
							        if(strLength>4)
							            fieldValue = GrpDIArr.substring(0,GrpDIArr.indexOf(GrpDIArr.split(",")[4]));
							        else if(strLength==4)
							            fieldValue = GrpDIArr;
							        else if(strLength>=3 && strLength<4) 
							            fieldValue = GrpDIArr+",";
							        else if(strLength>=2 && strLength<4) 
							            fieldValue = GrpDIArr+",,";
							        else if(strLength>=1 && strLength<4) 
							            fieldValue = GrpDIArr+",,,";        
							        else
							            fieldValue=",,,";
								}*/
								if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
									Node.appendToChildren(document.createElement(field), columnNode);
								else
									document.createTextElement(field,fieldValue, columnNode);
							}
							// Divakar
							else if(field.equalsIgnoreCase("GrpDIMinBenAmtforMF")) {
								fieldValue = GrpDIPlanId;
								if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
									fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								else {
									fieldValue = "";
									GrpDIArr = GrpDIPlanId.substring(0, GrpDIPlanId.length() - 1);
									int strLength=GrpDIArr.split(",").length;
							        if(strLength>4)
							            fieldValue = obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues");
									else if(strLength==4)
							            fieldValue = obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues");
							        else if(strLength>=3 && strLength<4) 
							            fieldValue = obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues")+",";
							        else if(strLength>=2 && strLength<4) 
							            fieldValue = obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues")+",,";
							        else if(strLength>=1 && strLength<4) 
							            fieldValue = obj.getStringProperty("DefaultValues")+",,,";
							        else
							            fieldValue=",,,";
								}
								if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
									Node.appendToChildren(document.createElement(field), columnNode);
								else
									document.createTextElement(field,fieldValue, columnNode);
							}
				/*
				 * R2.5 WIMSWRK-330 - use default values
				 */
							else if(field.equalsIgnoreCase("GrpDIMaxBenAmtforMF")) {    // commented for R2

								fieldValue = GrpDIPlanId;
								if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
									fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								else {
									fieldValue = "";
									GrpDIArr = GrpDIPlanId.substring(0, GrpDIPlanId.length() - 1);
									int strLength=GrpDIArr.split(",").length;
							        if(strLength>4)
							            fieldValue = obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues");
									else if(strLength==4)
							            fieldValue = obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues");
							        else if(strLength>=3 && strLength<4) 
							            fieldValue = obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues")+",";
							        else if(strLength>=2 && strLength<4) 
							            fieldValue = obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues")+",,";
							        else if(strLength>=1 && strLength<4) 
							            fieldValue = obj.getStringProperty("DefaultValues")+",,,";
							        else
							            fieldValue=",,,";
								}
								if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
									Node.appendToChildren(document.createElement(field), columnNode);
								else
									document.createTextElement(field,fieldValue, columnNode);
							}  
							// Divakar
				/*
				 * R2.5 WIMSWRK-330 - use default values 
				 */
							//else if(field.equalsIgnoreCase("GrpDIMaxBenAmtforMF") || field.equalsIgnoreCase("GrpDIClassforMF") || field.equalsIgnoreCase("GrpDIRateGrforMF"))
							else if(field.equalsIgnoreCase("GrpDIClassforMF") || field.equalsIgnoreCase("GrpDIRateGrforMF"))
							{
								if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
									fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
									Node.appendToChildren(document.createElement(field), columnNode);
								else
									document.createTextElement(field,fieldValue, columnNode);
							}
							else 
								continue; 
						}
						//if(displayName.equalsIgnoreCase("MasterPolicyFulfillmentGCI") && ((!GrpCIPPlanId.equalsIgnoreCase("") || GrpCIPPlanId!=null && !GrpCIPPlanId.isEmpty() ) || (!planIdNumber.equalsIgnoreCase("") || planIdNumber!=null && !planIdNumber.isEmpty() && CIFlag))) {
						if(displayName.equalsIgnoreCase("MasterPolicyFulfillmentGCI") && ((!ciProductValue.equalsIgnoreCase("") && ciProductValue!=null && !ciProductValue.isEmpty() && !ciProductValue.equalsIgnoreCase("null")) || (!planIdNumber.equalsIgnoreCase("") || planIdNumber!=null && !planIdNumber.isEmpty()))) {
							if(field.equalsIgnoreCase("GrpCIPSitusforMF")) {
								fieldValue = primaryState;
								if(fieldValue==null)
									fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								if(fieldValue.isEmpty() && fieldValue.equalsIgnoreCase("") || fieldValue==null)
									Node.appendToChildren(document.createElement(field), columnNode);
								else
									document.createTextElement(field,fieldValue, columnNode);
							}
							else if(field.equalsIgnoreCase("GrpCIPEffDateforMF")) {
								//fieldValue = Node.getData(XPath.getFirstMatch(".//*[local-name()='Original_Effective_Date__c']",null,accountNode));
							//fieldValue=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Effective_Date__c']", null, masterSubNode), "");
							fieldValue=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Policy_Effective_Date__c']", null, masterSubNode), "");
							
								if(fieldValue==null)
									fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								else {
									fieldValue = fieldValue.replaceAll("[-]", "");
								}
								if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
									Node.appendToChildren(document.createElement(field), columnNode);
								else 
									document.createTextElement(field,fieldValue, columnNode);
							}
							else if(field.equalsIgnoreCase("GrpCIPPayDateforMF")) {
								//fieldValue = Node.getData(XPath.getFirstMatch(".//*[local-name()='Original_Effective_Date__c']",null,accountNode));
							//fieldValue=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Effective_Date__c']", null, masterSubNode), "");
							fieldValue=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Policy_Effective_Date__c']", null, masterSubNode), "");
								if(fieldValue==null)
									fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								else {
									//fieldValue = fieldValue.replaceAll("[-]", "");
									if(!fieldValue.equalsIgnoreCase(""))
									{
										SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
										SimpleDateFormat dateFormat2 = new SimpleDateFormat("yyyyMMdd");
										Date convertedDate = dateFormat.parse(fieldValue);
										Calendar c = Calendar.getInstance();
										c.setTime(convertedDate);
										c.set(Calendar.DAY_OF_MONTH, c.getActualMaximum(Calendar.DAY_OF_MONTH));
										fieldValue=dateFormat2.format(c.getTime());
									}
								}
								if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
									Node.appendToChildren(document.createElement(field), columnNode);
								else 
									document.createTextElement(field,fieldValue, columnNode);
							}
							else if(field.equalsIgnoreCase("GrpCIPPlanIDforMF") ) {
								fieldValue = GrpCIPPlanId;
							/*	if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
									fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								else {
									fieldValue = "";
									GrpCIPArr = GrpCIPPlanId.substring(0, GrpCIPPlanId.length() - 1);
							        int strLength=GrpCIPArr.split(",").length;
							        if(strLength>4)
							            fieldValue = GrpCIPArr.substring(0,GrpCIPArr.indexOf(GrpCIPArr.split(",")[4]));
							        else if(strLength==4)
							            fieldValue = GrpCIPArr;
							        else if(strLength>=3 && strLength<4) 
							            fieldValue = GrpCIPArr+",";
							        else if(strLength>=2 && strLength<4) 
							            fieldValue = GrpCIPArr+",,";
							        else if(strLength>=1 && strLength<4) 
							            fieldValue = GrpCIPArr+",,,";        
							        else
							            fieldValue=",,,";
								}*/
								if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
									Node.appendToChildren(document.createElement(field), columnNode);
								else
									document.createTextElement(field,fieldValue, columnNode);
							}
							//Divakar
							else if(field.equalsIgnoreCase("GrpCIPMinBenAmtforMF")) {
								fieldValue = GrpCIPPlanId;
								if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
									fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								else {
									fieldValue = "";
									GrpCIPArr = GrpCIPPlanId.substring(0, GrpCIPPlanId.length() - 1);
									int strLength=GrpCIPArr.split(",").length;
							        if(strLength>4)
							            fieldValue = obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues");
									else if(strLength==4)
							            fieldValue = obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues");
							        else if(strLength>=3 && strLength<4) 
							            fieldValue = obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues")+",";
							        else if(strLength>=2 && strLength<4) 
							            fieldValue = obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues")+",,";
							        else if(strLength>=1 && strLength<4) 
							            fieldValue = obj.getStringProperty("DefaultValues")+",,,";
							        else
							            fieldValue=",,,";
								}
								if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
									Node.appendToChildren(document.createElement(field), columnNode);
								else
									document.createTextElement(field,fieldValue, columnNode);
							}
							else if(field.equalsIgnoreCase("GrpCIPMaxBenAmtforMF")) {
								fieldValue = GrpCIPPlanId;
								if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
									fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								else {
									fieldValue = "";
									GrpCIPArr = GrpCIPPlanId.substring(0, GrpCIPPlanId.length() - 1);
									int strLength=GrpCIPArr.split(",").length;
							        if(strLength>4)
							            fieldValue = obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues");
									else if(strLength==4)
							            fieldValue = obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues");
							        else if(strLength>=3 && strLength<4) 
							            fieldValue = obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues")+",";
							        else if(strLength>=2 && strLength<4) 
							            fieldValue = obj.getStringProperty("DefaultValues")+","+obj.getStringProperty("DefaultValues")+",,";
							        else if(strLength>=1 && strLength<4) 
							            fieldValue = obj.getStringProperty("DefaultValues")+",,,";
							        else
							            fieldValue=",,,";
								}
								if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
									Node.appendToChildren(document.createElement(field), columnNode);
								else
									document.createTextElement(field,fieldValue, columnNode);
							}
							// Divakar
							else if(field.equalsIgnoreCase("GrpCIPChdMaxAgeforMF") || field.equalsIgnoreCase("GrpCIPChdMinAgeforMF") || field.equalsIgnoreCase("GrpCIPRateGrforMF") || field.equalsIgnoreCase("GrpCIPClassforMF") || field.equalsIgnoreCase("GrpCIPGrpTypeforMF") || field.equalsIgnoreCase("GrpCIPInsMinAgeforMF") || field.equalsIgnoreCase("GrpCIPSpsMinAgeforMF"))
							{
								if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
									fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
									Node.appendToChildren(document.createElement(field), columnNode);
								else
									document.createTextElement(field,fieldValue, columnNode);
							}
							else 
								continue;
						}
						//added for IHC
						/*if(displayName.equalsIgnoreCase("MasterPolicyFulfillmentIHC") && (!ihcProductValue.equalsIgnoreCase("") && ihcProductValue!=null && !ihcProductValue.isEmpty() && !ihcProductValue.equalsIgnoreCase("null"))) {
							if(field.equalsIgnoreCase("GrpIHCPlanIDsforMF") ) {
								fieldValue = IHCPlanId;
							
								if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
									Node.appendToChildren(document.createElement(field), columnNode);
								else
									document.createTextElement(field,fieldValue, columnNode);
							}
							else 
								continue;
						}*/
						//IHC ends here
						}
					}
					else if(coulmnName.equalsIgnoreCase("RealCISetup") || tableCoulmn.equalsIgnoreCase("Real CI Setup"))
					{
						if(!caseHandlingType.equalsIgnoreCase("Custom"))
						{
						String value="";
						String planQueryText ="",subQueryText="",GrpDIPlanId = "",GrpCIPPlanId="", IndCIPlanID = "",GrpDIArr="", GrpCIPArr="", IndCIArr="";
						boolean DIFlag = true,CIFlag=true, IndCIFlag = true;
							
						//indvCIFlag=getCaseHandlingConfig("Individual CI",primaryStateLocation,uwIndvCriticalIllnessChampion,"");
						IndCIPlanID=getValueFromJsonRec(productObject,"IndiCIChampPlanIDGold")+","+getValueFromJsonRec(productObject,"IndiCIChampPlanIDPlatinum")+","+getValueFromJsonRec(productObject,"IndiCIChampPlanIDDiamond")+","+getValueFromJsonRec(productObject,"IndiCIChampPlanIDCustom")+",";
						GrpCIPPlanId=getValueFromJsonRec(productObject,"CIChampPlanIDGold")+","+getValueFromJsonRec(productObject,"CIChampPlanIDPlatinum")+","+getValueFromJsonRec(productObject,"CIChampPlanIDDiamond")+","+getValueFromJsonRec(productObject,"CIChampPlanIDCustom")+",";
						GrpDIPlanId=getValueFromJsonRec(productObject,"GrpDIChampPlanIDGold")+","+getValueFromJsonRec(productObject,"GrpDIChampPlanIDPlatinum")+","+getValueFromJsonRec(productObject,"GrpDIChampPlanIDDiamond")+","+getValueFromJsonRec(productObject,"GrpDIChampPlanIDCustom")+",";

						IndCIPlanID =(IndCIPlanID!=null && !IndCIPlanID.equalsIgnoreCase(""))?convertArrayToQuote(IndCIPlanID):"";
						GrpCIPPlanId =(GrpCIPPlanId!=null && !GrpCIPPlanId.equalsIgnoreCase(""))?convertArrayToQuote(GrpCIPPlanId):"";
						GrpDIPlanId =(GrpDIPlanId!=null && !GrpDIPlanId.equalsIgnoreCase(""))?convertArrayToQuote(GrpDIPlanId):"";

						String cplanIdNumber=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Plan_ID_Number__c']", null, masterSubNode), "");
						cplanIdNumber=(cplanIdNumber==null)?"":cplanIdNumber;
						//if(displayName.equalsIgnoreCase("ProductIndividualChampionCI") && uwGuarenteedIssueApproved.equalsIgnoreCase("Yes")  &&(IndCIPlanID!=null && !IndCIPlanID.equalsIgnoreCase("")))
						if(displayName.equalsIgnoreCase("ProductIndividualChampionCI") && uwGuarenteedIssueApproved.equalsIgnoreCase("Yes")  &&(indCiProductValue!=null && !indCiProductValue.equalsIgnoreCase("") && !indCiProductValue.equalsIgnoreCase("null")))
						{
							switch (field) 
							{
				/*
				 * R2.5 WIMSWRK-330 - use salesforce reference for insuaredamount, spouse amount
				 */
							case "IndCIInsAmtforGI":							 //commented for R2
								value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_GI_Limits_Max_Death_Benefit__c']", null, masterSubNode), "");
								value=(primaryStateLocation!=null && primaryStateLocation.equalsIgnoreCase("FL"))?"10000":value;								
								value=convertDataByType(value, "NUMBER", "0");
								if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
									value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								document.createTextElement(field, value, columnNode);
							break;   
							case "IndCISpsAmtforGI":
								value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_GI_Limits_Max_Death_Benefit__c']", null, masterSubNode), "");
								value=(primaryStateLocation!=null && primaryStateLocation.equalsIgnoreCase("FL"))?"10000":value;								
								value=(value==null || value.equalsIgnoreCase(""))?"0.0":value;
								value=Double.toString(Double.parseDouble(value)*50/100);
								value=convertDataByType(value, "NUMBER", "0");
								document.createTextElement(field, value, columnNode);
								break; 
						/*	case "IndCIInsAmtforGI":							
								value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_GI_Limits_Max_Death_Benefit__c']", null, masterSubNode), "");
								value=convertDataByType(value, "INTEGER", "");
								if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
									value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								document.createTextElement(field, value, columnNode);
							break;   
							case "IndCIParticipationforGI":
								value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='ICI_Champ_Actual_Participation__c']", null, masterSubNode), "");
								value=convertDataByType(value,"NUMBER","0");
								if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
								{
									value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								}
								document.createTextElement(field, value, columnNode);
							break; */
							case "IndCIEligiblePeriodforGI":
								value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Minimum_Length_of_Service_days__c']", null, masterSubNode), "");
								if(value!=null && !value.equalsIgnoreCase(""))
								{
									//value=convertDataByType(value, "MONTH", "000");
										double result=0;
										value=(value==null || value.equalsIgnoreCase(""))?"":value;
										try
										{
											result=Double.parseDouble(value)+60;
											value=String.valueOf(result);
											value=convertDataByType(value, "NUMBER", "000");
										}catch(Exception e)
										{
											value="";
										}										

								}
								if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
								{
									value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								}
								document.createTextElement(field, value, columnNode);
							break;
							case "IndCIOpenEnrollmentforGI":
								value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Enrollment_End_Date__c']", null, masterSubNode), "");
								value=convertDataByType(value,"DATE","yyyyMMdd");
								if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
								{
									value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								}
								document.createTextElement(field, value, columnNode);							
							break;
							case "IndCIPlanIDforGI":
							fieldValue = IndCIPlanID;
							/*	if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
									fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								else {
									fieldValue = "";
									IndCIArr = IndCIPlanID.substring(0, IndCIPlanID.length() - 1);
							        int strLength=IndCIArr.split(",").length;
							        if(strLength>4)
							            fieldValue = IndCIArr.substring(0,IndCIArr.indexOf(IndCIArr.split(",")[4]));
							        else if(strLength==4)
							            fieldValue = IndCIArr;
							        else if(strLength>=3 && strLength<4) 
							            fieldValue = IndCIArr+",";
							        else if(strLength>=2 && strLength<4) 
							            fieldValue = IndCIArr+",,";
							        else if(strLength>=1 && strLength<4) 
							            fieldValue = IndCIArr+",,,";        
							        else
							            fieldValue=",,,";
								}*/
								if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
									Node.appendToChildren(document.createElement(field), columnNode);
								else
									document.createTextElement(field,fieldValue, columnNode);
								//value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_GI_Limits_Max_Death_Benefit__c']", null, masterSubNode), "");
								/* Divakar 
								value=getPlanIDFormCaseHandlingConfig("Individual CI",primaryStateLocation,uwIndvCriticalIllnessChampion,"");
								if(value!=null & !value.equalsIgnoreCase(""))
								{
									String fieldArray[]=value.split(",");
									for(int i=fieldArray.length;i<4;i++)
									{
										value=value+",";
									}
								}
								if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
								{
									value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								}
								document.createTextElement(field, value, columnNode);							
								Divakar */
							break;
							default:
								if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
								{
									value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								}
								document.createTextElement(field, value, columnNode);	
							continue;
							
							}
						
						}//Group CI with PlanID
						//indvCiWithPlanFlag=getCaseHandlingConfig("Group CI",primaryStateLocation,uwCriticalIllness,"");
						//else if(displayName.equalsIgnoreCase("ProductWithPlanID") && uwGuarenteedIssueApproved.equalsIgnoreCase("Yes") && (GrpCIPPlanId!=null && !GrpCIPPlanId.equalsIgnoreCase("")))
						else if(displayName.equalsIgnoreCase("ProductWithPlanID") && uwGuarenteedIssueApproved.equalsIgnoreCase("Yes") && (ciProductValue!=null && !ciProductValue.equalsIgnoreCase("") && !ciProductValue.equalsIgnoreCase("null")))
						{
							switch (field) 
							{
				/*
				 * R2.5 WIMSWRK-330 - use salesforce reference for insuaredamount, spouse amount and participation number
				 */
							case "GrpCIPInsAmtforGI":    //commented for R2
								//value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_GI_Limits_Max_Death_Benefit__c']", null, masterSubNode), "");
								value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_CI_Guaranteed_Iss_Req_Benefit_Amount__c']", null, masterSubNode), ""); // WIMSWRK-1579
								value=convertDataByType(value, "NUMBER", "0");
								if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
								{
									value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								}
								document.createTextElement(field, value, columnNode);
								
								break;
						/*	case "GrpCIPSpsAmtforGI": // Changed to default WIMSWRK-1579
								value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_GI_Limits_Max_Death_Benefit__c']", null, masterSubNode), "");
								value=(primaryStateLocation!=null && primaryStateLocation.equalsIgnoreCase("FL"))?"10000":value;								
//								value=(value==null || value.equalsIgnoreCase(""))?"":value;
								if(!value.isEmpty() && !value.equalsIgnoreCase("") && value!=null)
								{
								value=Double.toString(Double.parseDouble(value)*50/100);
								value=convertDataByType(value, "NUMBER", "0");
								}

								if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
								{
									value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								}
								document.createTextElement(field, value, columnNode);
								
								break; */
							case "GrpCIPParticipationforGI":
								value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='CI_Champion_Actual_Participation__c']", null, masterSubNode), "");
								value=(value==null || value.equalsIgnoreCase(""))?"0.0":value;
								if(Double.parseDouble(value)<25)
								{
									value="5";
								}
								else if(26 <= Double.parseDouble(value) && Double.parseDouble(value)<= 50 )
								{
									value="10";
								}
								else
								{
									value="";
								}
								//value=convertDataByType(value,"NUMBER","0");
								if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
								{
									value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								}
								document.createTextElement(field, value, columnNode);
break;   
							/*	case "GrpCIPInsAmtforGI":
									value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_GI_Limits_Max_Death_Benefit__c']", null, masterSubNode), "");
									value=convertDataByType(value, "INTEGER", "");
									if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
									{
										value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
									}
									document.createTextElement(field, value, columnNode);
								break;
								case "GrpCIPParticipationforGI":
									value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='CI_Champion_Actual_Participation__c']", null, masterSubNode), "");
									value=convertDataByType(value,"NUMBER","0");
									if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
									{
										value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
									}
									document.createTextElement(field, value, columnNode);
								break;   */
								case "GrpCIPEligiblePeriodforGI":
									value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Minimum_Length_of_Service_days__c']", null, masterSubNode), "");
									if(value!=null && !value.equalsIgnoreCase(""))
									{
										//value=convertDataByType(value, "MONTH", "000");
										double result=0;
										value=(value==null || value.equalsIgnoreCase(""))?"":value;
										try
										{
											result=Double.parseDouble(value)+60;
											value=String.valueOf(result);
											value=convertDataByType(value, "NUMBER", "000");
										}catch(Exception e)
										{
											value="";
										}					

									}
									if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
									{
										value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
									}
									document.createTextElement(field, value, columnNode);
								break;
								case "GrpCIPOpenEnrollmentforGI":
									//value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Enrollment_End_Date__c']", null, masterSubNode), "");
									//value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Effective_Date__c']", null, masterSubNode), "");
									value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Policy_Effective_Date__c']", null, masterSubNode), "");
									value=convertDataByType(value,"DATE","MMdd");
									if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
									{
										value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
									}
									document.createTextElement(field, value, columnNode);	
							
								break;
								case "GrpCIPPlanID1forGI":
									fieldValue = GrpCIPPlanId;
									/*if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
										fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
									else {
										fieldValue = "";
										GrpCIPArr = GrpCIPPlanId.substring(0, GrpCIPPlanId.length() - 1);
										int strLength=GrpCIPArr.split(",").length;
										if(strLength>4)
											fieldValue = GrpCIPArr.substring(0,GrpCIPArr.indexOf(GrpCIPArr.split(",")[4]));
										else if(strLength==4)
											fieldValue = GrpCIPArr;
										else if(strLength>=3 && strLength<4) 
											fieldValue = GrpCIPArr+",";
										else if(strLength>=2 && strLength<4) 
											fieldValue = GrpCIPArr+",,";
										else if(strLength>=1 && strLength<4) 
											fieldValue = GrpCIPArr+",,,";        
										else
											fieldValue=",,,";
									}*/
									if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
										Node.appendToChildren(document.createElement(field), columnNode);
									else
										document.createTextElement(field,fieldValue, columnNode);
									break;
								/* Divakar
								
									//value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_GI_Limits_Max_Death_Benefit__c']", null, masterSubNode), "");
									value=getPlanIDFormCaseHandlingConfig("Group CI",primaryStateLocation,uwCriticalIllness,"");
								if(value!=null & !value.equalsIgnoreCase(""))
								{
									String fieldArray[]=value.split(",");
									for(int i=fieldArray.length;i<4;i++)
									{
										value=value+",";
									}
								}
									if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
									{
										value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
									}
									document.createTextElement(field, value, columnNode);							
								break;
								Divakar */
								default:
									if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
									{
										value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
									}
									document.createTextElement(field, value, columnNode);	
								continue;
								
							}
						}
						//GroupDI
						//diFlag=getCaseHandlingConfig("DI",primaryStateLocation,uwGroupDisablChampion,diRatingClass);
						//else if(displayName.equalsIgnoreCase("ProductHybrdDI") && uwGuarenteedIssueApproved.equalsIgnoreCase("Yes")  && (GrpDIPlanId!=null && !GrpDIPlanId.equalsIgnoreCase("")))
							else if(displayName.equalsIgnoreCase("ProductHybrdDI") && uwGuarenteedIssueApproved.equalsIgnoreCase("Yes")  && (diProductValue!=null && !diProductValue.equalsIgnoreCase("") && !diProductValue.equalsIgnoreCase("null")))
							{
							switch (field) 
							{
				/*
				 * R2.5 WIMSWRK-330 - use salesforce reference for insuared amount and participation number
				 */
							case "GrpDIInsPerforGI":  //commented for R2
								//value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_GI_Limits_Max_Death_Benefit__c']", null, masterSubNode), "");
								value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_DI_Disability_Benefit_Percentage__c']", null, masterSubNode), ""); // WIMSWRK-1579
								value=(value==null || value.equalsIgnoreCase(""))?"0.0":value;							
								value=convertDataByType(value, "NUMBER", "0");
								document.createTextElement(field, value, columnNode);
								break;
							case "GrpDIInsAmtforGI": // WIMSWRK-1579
								value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_DI_Guaranteed_Iss_Req_Benefit_Amount__c']", null, masterSubNode), "");
								value=convertDataByType(value, "INTEGER", "");
								if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
								{
									value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								}
								document.createTextElement(field, value, columnNode);
								break;
							
					/*		case "GrpDIParticipationforGI":  //WIMSWRK-1258 - defaulted to 1
								value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='GD_Champion_Actual_Participation__c']", null, masterSubNode), "");
								value=(value==null || value.equalsIgnoreCase(""))?"0.0":value;
								if(Double.parseDouble(value)<25)
								{
									value="5";
								}
								else if(26 <= Double.parseDouble(value) && Double.parseDouble(value)<= 50 )
								{
									value="10";
								}
								else
								{
									value="";
								}
								document.createTextElement(field, value, columnNode);
								break; */

							/*case "GrpDIInsAmtforGI":
								value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_GI_Limits_Max_Death_Benefit__c']", null, masterSubNode), "");
								value=convertDataByType(value, "INTEGER", "");
								if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
								{
									value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								}
								document.createTextElement(field, value, columnNode);
								break;
							case "GrpDIParticipationforGI":
								value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='GD_Champion_Actual_Participation__c']", null, masterSubNode), "");
								value=convertDataByType(value,"NUMBER","0");
								if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
								{
									value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								}
								document.createTextElement(field, value, columnNode);
								break;   */
							
							case "GrpDINewHireEligibilityPeriodforGI":
								value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Minimum_Length_of_Service_days__c']", null, masterSubNode), "");
								if(value!=null && !value.equalsIgnoreCase(""))
								{
									//value=convertDataByType(value, "MONTH", "000");
									double result=0;
									value=(value==null || value.equalsIgnoreCase(""))?"":value;
									try
									{
										result=Double.parseDouble(value)+60;
										value=String.valueOf(result);
										value=convertDataByType(value, "NUMBER", "000");
									}catch(Exception e)
									{
										value="";
									}					

								}
								if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
								{
									value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								}
								document.createTextElement(field, value, columnNode);
							break;

							case "GrpDIEligiblePeriodforGI":
								value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Minimum_Length_of_Service_days__c']", null, masterSubNode), "");
								if(value!=null && !value.equalsIgnoreCase(""))
								{
//									value=convertDataByType(value, "MONTH", "000");
										double result=0;
										value=(value==null || value.equalsIgnoreCase(""))?"":value;
										try
										{
											result=Double.parseDouble(value)+60;
											value=String.valueOf(result);
											value=convertDataByType(value, "NUMBER", "000");
										}catch(Exception e)
										{
											value="";
										}
								}
								if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
								{
									value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								}
								document.createTextElement(field, value, columnNode);
								break;
							case "GrpDIOpenEnrollmentforGI":
								//value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Enrollment_End_Date__c']", null, masterSubNode), "");
								//value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Effective_Date__c']", null, masterSubNode), "");
								value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Policy_Effective_Date__c']", null, masterSubNode), "");
								value=convertDataByType(value,"DATE","MMdd");
								if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
								{
									value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								}
								document.createTextElement(field, value, columnNode);							
								break;
							case "GrpDIPlanIDforGI":
								fieldValue = GrpDIPlanId;
									/*	if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
											fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
										else {
											fieldValue = "";
											GrpDIArr = GrpDIPlanId.substring(0, GrpDIPlanId.length() - 1);
											int strLength=GrpDIArr.split(",").length;
											if(strLength>4)
												fieldValue = GrpDIArr.substring(0,GrpDIArr.indexOf(GrpDIArr.split(",")[4]));
											else if(strLength==4)
												fieldValue = GrpDIArr;
											else if(strLength>=3 && strLength<4) 
												fieldValue = GrpDIArr+",";
											else if(strLength>=2 && strLength<4) 
												fieldValue = GrpDIArr+",,";
											else if(strLength>=1 && strLength<4) 
												fieldValue = GrpDIArr+",,,";        
											else
												fieldValue=",,,";
										} */
								//value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_GI_Limits_Max_Death_Benefit__c']", null, masterSubNode), "");
								/* Divakar
								value=getPlanIDFormCaseHandlingConfig("DI",primaryStateLocation,uwGroupDisablChampion,diRatingClass);

								if(value!=null & !value.equalsIgnoreCase(""))
								{
									String fieldArray[]=value.split(",");
									for(int i=fieldArray.length;i<4;i++)
									{
										value=value+",";
									}
								}
								if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
								{
									value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								}
								Divakar */
								document.createTextElement(field, fieldValue, columnNode);							
								
								break;
							default:
								if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
								{
									value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								}
								document.createTextElement(field, value, columnNode);	
								continue;								
							}
						}
						else
						{
							/*if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
							{
								value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							}
							document.createTextElement(field, value, columnNode);	*/
						}
}
					}
else if(coulmnName.equalsIgnoreCase("GroupParameters") || tableCoulmn.equalsIgnoreCase("Group Parameters"))
					{
						String value="",dropdownCode="";;
						switch (field) {

						case "GroupCustomSendChgFileInd":
							if(caseHandlingType!=null && caseHandlingType.equalsIgnoreCase("Custom"))
							{
							value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Receive_a_Change_File_from_LSP__c']", null, masterSubNode), "");
							if(value!=null)
							{
								if(value.equalsIgnoreCase("Yes"))
								{
									value="Y";
								}								
								else if(value.equalsIgnoreCase("No"))
								{
									value="N";
								}
							}
							else
							{
								value="";
							}
}
							break;
						/*case "GroupCustomBillingMode":
							value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Deduction_Frequency_Confirmed__c']", null, masterSubNode), "");
							if(value.equalsIgnoreCase("Other"))
							{
								value="J";
							}
							else if(!value.equalsIgnoreCase("") && value!=null && getValueFromWKsDropdown(companyCode, field, value) != "")
							{
								value=getValueFromWKsDropdown(companyCode, field, value);
							}
							else
							{
								value = "";
							}
							break;*/
				/*
				 * R2.5 WIMSWRK-330 - use salesforce reference for billing day
				 */
						case "GroupCustomBillingDay":
							//value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Effective_Date__c']", null, masterSubNode), "");
							value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Policy_Effective_Date__c']", null, masterSubNode), "");
							if(value!=null && !value.equalsIgnoreCase(""))
							{
								SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
								SimpleDateFormat dateFormat2 = new SimpleDateFormat("dd");
								Date convertedDate = dateFormat.parse(value);
								Calendar c = Calendar.getInstance();
								c.setTime(convertedDate);
								c.set(Calendar.DAY_OF_MONTH, c.getActualMaximum(Calendar.DAY_OF_MONTH));
								value=dateFormat2.format(c.getTime());
							}
							break;
						case "GroupCustomBillingMode":
							value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Deduction_Frequency_Confirmed__c']", null, masterSubNode), "");
							if(value.equalsIgnoreCase("Other"))
							{
								value="J";
							}
							else if(!value.equalsIgnoreCase("") && value!=null && getValueFromWKsDropdown(companyCode, "GroupCustomDeductionCode ", value) != "")
							{
								value=getValueFromWKsDropdown(companyCode, "GroupCustomDeductionCode ", value);
								value=(value==null)?"":value;
								if(value.contains("B") || value.contains("M") || value.contains("W") || value.contains("F"))
								{
									value="M";
								}
								else
								{
									value="";
								}
							}
							else
							{
								value = "";
							}
							
														
							break;
						case "GroupCustomDeductionCode":
							value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Deduction_Frequency_Confirmed__c']", null, masterSubNode), "");
							if(!value.equalsIgnoreCase("") && value!=null)
							{
								dropdownCode=getValueFromWKsDropdown(companyCode, field, value);
								value=dropdownCode;
							}
														
							break;
						/*case "GroupCustomBillType":
							value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Billing_Method__c']", null, masterSubNode), "");
							if(!value.equalsIgnoreCase("") && value!=null)
							{
								dropdownCode=getValueFromWKsDropdown(companyCode, field, value);
								value=dropdownCode;
							}						
							break;
						case "GroupCustomBillFormat":
							value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Bill_Type__c']", null, masterSubNode), "");
							if(!value.equalsIgnoreCase("") && value!=null)
							{
								dropdownCode=getValueFromWKsDropdown(companyCode, field, value);
								value=dropdownCode;
							}						
							break;
						case "GroupCustomBillSortSeq":
							value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Bill_Sort_Criteria__c']", null, masterSubNode), "");
							if(!value.equalsIgnoreCase("") && value!=null)
							{
								dropdownCode=getValueFromWKsDropdown(companyCode, field, value);
								value=dropdownCode;
							}						
							break;*/
/*
						case "GroupCustomBillType":
							if(caseHandlingType!=null && caseHandlingType.equalsIgnoreCase("Custom"))
							//if(caseHandlingType!=null && !caseHandlingType.equalsIgnoreCase(""))
							{
								value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Billing_Method__c']", null, masterSubNode), "");
								if(!value.equalsIgnoreCase("") && value!=null)
								{
									dropdownCode=getValueFromWKsDropdown(companyCode, field, value);
									value=dropdownCode;
								}
							}													
							break;
*///WIMSWRK-1640
						case "GroupCustomBillType":
							if(caseHandlingType!=null && caseHandlingType.equalsIgnoreCase("Custom"))
							//if(caseHandlingType!=null && !caseHandlingType.equalsIgnoreCase(""))
							{
								value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Billing_Method__c']", null, masterSubNode), "");
								if(!value.equalsIgnoreCase("") && value!=null)
								{
									dropdownCode=getValueFromWKsDropdown(companyCode, field, value);
									value=dropdownCode;
								}
							}
							else if(caseHandlingType!=null && (caseHandlingType.equalsIgnoreCase("expedited") || caseHandlingType.equalsIgnoreCase("Bundled GI")))
							{
								String billType=value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Bill_Type__c']", null, masterSubNode), "");
								if(billType!=null && !billType.equalsIgnoreCase("") && billType.equalsIgnoreCase("Auto Pay"))
								{
									value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								}
								else
								{									
									value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Billing_Method__c']", null, masterSubNode), "");
									if(!value.equalsIgnoreCase("") && value!=null)
									{
										dropdownCode=getValueFromWKsDropdown(companyCode, field, value);
										value=dropdownCode;
									}
								}
							}
							break;
					/*	case "GroupCustomBillFormat":
							if(caseHandlingType!=null && caseHandlingType.equalsIgnoreCase("Custom"))
							//if(caseHandlingType!=null && !caseHandlingType.equalsIgnoreCase(""))
							{
								value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Bill_Type__c']", null, masterSubNode), "");
								if(!value.equalsIgnoreCase("") && value!=null)
								{
									dropdownCode=getValueFromWKsDropdown(companyCode, field, value);
									value=dropdownCode;
								}
							}
							break; */
//WIMSWRK-1640 // For Auto Pay bill type send default values. For other than auto pay send bill type as selected in salesforce
						case "GroupCustomBillFormat":
							if(caseHandlingType!=null && caseHandlingType.equalsIgnoreCase("Custom"))
							//if(caseHandlingType!=null && !caseHandlingType.equalsIgnoreCase(""))
							{
								value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Bill_Type__c']", null, masterSubNode), "");
								if(!value.equalsIgnoreCase("") && value!=null)
								{
									dropdownCode=getValueFromWKsDropdown(companyCode, field, value);
									value=dropdownCode;
								}

							}
							else if(caseHandlingType!=null && (caseHandlingType.equalsIgnoreCase("expedited")  || caseHandlingType.equalsIgnoreCase("Bundled GI")))
							{
								String billType=value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Bill_Type__c']", null, masterSubNode), "");
								if(billType!=null && !billType.equalsIgnoreCase("") && billType.equalsIgnoreCase("Auto Pay"))
								{
									value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
								}
								else
								{									
									value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Bill_Type__c']", null, masterSubNode), "");
									if(!value.equalsIgnoreCase("") && value!=null)
									{
										dropdownCode=getValueFromWKsDropdown(companyCode, field, value);
										value=dropdownCode;
									}
								}
							}
							break; 
						case "GroupCustomBillSortSeq":
							if(caseHandlingType!=null && caseHandlingType.equalsIgnoreCase("Custom"))
							{
								value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Bill_Sort_Criteria__c']", null, masterSubNode), "");
								if(!value.equalsIgnoreCase("") && value!=null)
								{
									dropdownCode=getValueFromWKsDropdown(companyCode, field, value);
									value=dropdownCode;
								}
							}
							break;
						default:
							value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));							
							break;
						}
						if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
						{
							value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
						}
						document.createTextElement(field, value, columnNode);
					}
					else if(coulmnName.equalsIgnoreCase("GroupMaster") || tableCoulmn.equalsIgnoreCase("Group Master"))
					{
						String value="";
						switch (field) {
						case "GroupType":
							value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Type']", null, accountNode), "");
							value=(value.equalsIgnoreCase("AE") && value !=null)?"W":"U";							
							if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
							{
								value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							}
							document.createTextElement(field, value, columnNode);
							break;
						case "GroupPayrollCoordinator":
							//value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='HR_Payroll_Contact__c']", null, masterSubNode), "");
							if(Node.isValidNode(payrolContactNode)) {
								String lastName=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='PayrollContactLastName']", null, payrolContactNode), "");
								String firstName=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='PayrollContactFirstName']", null, payrolContactNode), "");
								lastName=(lastName==null)?"":lastName;
								firstName=(firstName==null)?"":firstName;
								value=lastName.trim()+", "+firstName.trim();
							}

					/*		if(value!=null)
							{
								value=value.replaceAll("\\.", "");
								value=value.replaceAll("\\,", "");
								if(value.length()>20)
								{
									value=value.substring(0, 20);
								}
							}			*/		
							if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
							{
								value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							}
							document.createTextElement(field, value, columnNode);
							break;
						case "GroupCoordinator":
							String firstName="",lastName="";
							firstName=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='ImplementatationManager']/.//*[local-name()='FirstName']", null, masterAppNode), "");
							lastName=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='ImplementatationManager']/.//*[local-name()='LastName']", null, masterAppNode), "");
							//value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='GD_Champion_Actual_Participation__c']", null, accountNode), "");
							//value=lastName+", "+firstName;
							lastName=(lastName==null)?"":lastName;
							firstName=(firstName==null)?"":firstName;
							if(firstName.length() >0 || lastName.length() > 0)
							{
								value=lastName+", "+firstName;
							}
							if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
							{
								value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							}
							document.createTextElement(field, value, columnNode);
							break;  
						case "GroupBilledtoDate":
							//value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Original_Effective_Date__c']", null, accountNode), "");							
							//value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Effective_Date__c']", null, masterSubNode), "");
							value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Policy_Effective_Date__c']", null, masterSubNode), "");
                            if(value!=null && !value.equalsIgnoreCase(""))
							{
								SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
								SimpleDateFormat dateFormat2 = new SimpleDateFormat("MM/dd/yyyy");
								Date convertedDate = dateFormat.parse(value);
								Calendar c = Calendar.getInstance();
								c.setTime(convertedDate);
								c.set(Calendar.DAY_OF_MONTH, c.getActualMaximum(Calendar.DAY_OF_MONTH));
								value=dateFormat2.format(c.getTime());
							}                                            
							if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
							{
								value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							}
							document.createTextElement(field, value, columnNode);
							break;
						case "GroupEnrollmentFrequency":
							value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Type']", null, accountNode), "");
							value=(value.equalsIgnoreCase("AE") && value !=null)?"A":"P";
							if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
							{
								value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							}
							document.createTextElement(field, value, columnNode);
							break;
						case "GroupEffectiveDate":

							//value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Original_Effective_Date__c']", null, accountNode), "");							
							//value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Effective_Date__c']", null, masterSubNode), "");
							value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Policy_Effective_Date__c']", null, masterSubNode), "");

value=convertDataByType(value, "DATE", "MM/dd/yyyy");
							if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
							{
								value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							}
							document.createTextElement(field, value, columnNode);
							break;
						case "GroupEligilbleLives":
							//value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Total_Employees__c']", null, accountNode), "");							
							value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Number_of_Employees__c']", null, masterSubNode), "");
							value=convertDataByType(value, "NUMBER", "0");
							if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
							{
								value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							}
							document.createTextElement(field, value, columnNode);
							break;
						case "GroupSalesForceType":
							value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Type']", null, accountNode), "");
							value=(value.equalsIgnoreCase("AE") && value !=null)?"CWS":"BRK";
							if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
							{
								value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							}
							document.createTextElement(field, value, columnNode);
							break;
						case "GroupSalesforcecom":
							value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Id']", null, accountNode), "");							
							if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
							{
								value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							}
							document.createTextElement(field, value, columnNode);
							break;
                                                case "GroupScreenClientName":
							value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Name']", null, accountNode), "");							
							if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
							{
								value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							}
							document.createTextElement(field, value, columnNode);
							break;
						default:
							if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
							{
								value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
							}
							document.createTextElement(field, value, columnNode);	
							break;
						}
					}
										else if(coulmnName.equalsIgnoreCase("GroupUnderwriting") || tableCoulmn.equalsIgnoreCase("Group Underwriting"))
										{
											String value="",eprsIssueApproved="",underwritingComments="",uwCombineProduct="";
											
											eprsIssueApproved=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Express_Issue_Approved__c']", null, masterSubNode), "");
											underwritingComments=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Additional_Underwriting_Comments__c']", null, masterSubNode), "");
											uwCombineProduct=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Combined_Products__c']", null, masterSubNode), "");
											eprsIssueApproved=(eprsIssueApproved==null)?"":eprsIssueApproved;
											underwritingComments=(underwritingComments==null)?"":underwritingComments;
											uwCombineProduct=(uwCombineProduct==null)?"":uwCombineProduct;
											String uwType=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Underwriting_Type__c']", null, masterSubNode), "");
											//if(uwCombineProduct.contains("Universal Life Protector") && (eprsIssueApproved.equalsIgnoreCase("Yes") || underwritingComments.contains("Non-Standard Underwriting")))
											//if(uwCombineProduct.contains("Universal Life Protector") && (eprsIssueApproved.equalsIgnoreCase("Yes") || uwType.contains("Non-Standard Underwriting")))
											/*if(uwCombineProduct.contains("Universal Life Protector") && (eprsIssueApproved!=null && !eprsIssueApproved.equalsIgnoreCase("") && eprsIssueApproved.equalsIgnoreCase("Yes")) || (uwType!=null && !uwType.equalsIgnoreCase("") && uwType.contains("Non-Standard Underwriting")))*/
											if(uwCombineProduct.contains("Universal Life Protector"))
											{
											switch (field) {
											case "GroupUWUnderwritingType":
												//value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_EI_Limits_Weekly_Premium__c']", null, masterSubNode), "");
												//String uwType=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Underwriting_Type__c']", null, masterSubNode), "");
												//if( (eprsIssueApproved!=null && !eprsIssueApproved.equalsIgnoreCase("") && eprsIssueApproved.equalsIgnoreCase("Yes")) || (uwType!=null && !uwType.equalsIgnoreCase("")))
												if( (eprsIssueApproved!=null && !eprsIssueApproved.equalsIgnoreCase("")) && (uwType!=null && !uwType.equalsIgnoreCase("")))
												{
													if(eprsIssueApproved.equalsIgnoreCase("Yes") && !uwType.contains("Non-Standard Underwriting"))
													{
														value="1";
													}
													else if(eprsIssueApproved.equalsIgnoreCase("Yes") && uwType.contains("Non-Standard Underwriting"))
													{
														value="2";
													}
													else if(!eprsIssueApproved.equalsIgnoreCase("Yes") && uwType.contains("Non-Standard Underwriting"))
													{
														value="4";
													}
												if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
												{
													value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
												}


												}
												document.createTextElement(field, value, columnNode);
												/*if(eprsIssueApproved.equalsIgnoreCase("Yes") && !underwritingComments.contains("Non-Standard Underwriting"))
												{
													value="1";
												}
												else if(eprsIssueApproved.equalsIgnoreCase("Yes") && underwritingComments.contains("Non-Standard Underwriting"))
												{
													value="2";
												}
												else if(!eprsIssueApproved.equalsIgnoreCase("Yes") && underwritingComments.contains("Non-Standard Underwriting"))
												{
													value="4";
												}
												if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
												{
													value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
												}*/

												
												break;
											case "GroupUWWeeklyMaxPremium":
												if(eprsIssueApproved.equalsIgnoreCase("Yes"))
												{
													value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_EI_Limits_Weekly_Premium__c']", null, masterSubNode), "");
												}												
												if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
												{
													value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
												}
												value=convertDataByType(value, "NUMBER", "0000000");
												document.createTextElement(field, value, columnNode);
												
												break;
											case "GroupUWMaximumBenefits":
												if(eprsIssueApproved.equalsIgnoreCase("Yes"))
												{
													value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_EI_Limits_Max_Death_Benefit__c']", null, masterSubNode), "");
												}
												
												if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
												{
													value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
												}
												value=convertDataByType(value, "NUMBER", "0000000");
												document.createTextElement(field, value, columnNode);
												
												break;
											case "GroupUWMultipleofIncome":
												if(eprsIssueApproved.equalsIgnoreCase("Yes"))
												{
													value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_EI_Limits_Multiple_of_Income__c']", null, masterSubNode), "");
												}												
												if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
												{
													value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
												}
												value=convertDataByType(value, "NUMBER", "00");
												document.createTextElement(field, value, columnNode);
												
												break;
											case "GroupUWNoOfMonthofEmployment":
												//if(eprsIssueApproved.equalsIgnoreCase("Yes"))
												//{
													value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Minimum_Length_of_Service_days__c']", null, masterSubNode), "");
													try
													{
														double month = Double.parseDouble(value)/30;
														double valueRounded = Math.round(month * 100D) / 100D;													
														value=String.valueOf(Math.floor(valueRounded));
														value=convertDataByType(value, "NUMBER", "000");
													}catch(Exception e)
													{
														value="";
													}
												//}												
												if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
												{
													value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
												}
												document.createTextElement(field, value, columnNode);
												
												break;
											case "GroupUWFulltimeHours":
												value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Minimum_Hours_per_week_Full_Time__c']", null, masterSubNode), "");
												value=convertDataByType(value, "NUMBER", "000");
												/*try
												{
												double month = Double.parseDouble(value)/30;
												double valueRounded = Math.round(month * 100D) / 100D;													
												value=String.valueOf(Math.floor(valueRounded*4));
												value=convertDataByType(value, "NUMBER", "000");
												}catch(Exception e)
												{
													value="";
												}*/
												if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
												{
													value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
												}
												document.createTextElement(field, value, columnNode);
												
												break;

											case "GroupUWParttimeHours":
												value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Minimum_Hours_per_week_Part_Time__c']", null, masterSubNode), "");
												value=convertDataByType(value, "NUMBER", "000");
												/*try
												{
												double month = Double.parseDouble(value)/30;
												double valueRounded = Math.round(month * 100D) / 100D;													
												value=String.valueOf(Math.floor(valueRounded*4));
												value=convertDataByType(value, "NUMBER", "000");
												}catch(Exception e)
												{
													value="";
												}*/
												if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
												{
													value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
												}
												document.createTextElement(field, value, columnNode);
												
												break;
											case "GroupUWParttimeIncome":
												value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Income_Requirements_Part_Time__c']", null, masterSubNode), "");
												value=convertDataByType(value, "NUMBER", "0");
												/*try
												{
												double month = Double.parseDouble(value)/30;
												double valueRounded = Math.round(month * 100D) / 100D;													
												value=String.valueOf(Math.floor(valueRounded*4));
												value=convertDataByType(value, "NUMBER", "000");
												}catch(Exception e)
												{
													value="";
												}*/
												if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
												{
													value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
												}
												document.createTextElement(field, value, columnNode);
												
												break;
											case "GroupUWFulltimeIncome":
												value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Income_Requirements_Full_Time__c']", null, masterSubNode), "");
												value=convertDataByType(value, "NUMBER", "0");
			/*try
												{
												double month = Double.parseDouble(value)/30;
												double valueRounded = Math.round(month * 100D) / 100D;													
												value=String.valueOf(Math.floor(valueRounded*4));
												value=convertDataByType(value, "NUMBER", "000");
												}catch(Exception e)
												{
													value="";
												}*/
												if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
												{
													value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
												}
												document.createTextElement(field, value, columnNode);												
												break;
											default:
												if(value.isEmpty()&& value.equalsIgnoreCase("") || value==null)
												{
													value = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
												}
												document.createTextElement(field, value, columnNode);
												break;
											}
}
										}
										else if (coulmnName.equalsIgnoreCase("FollowUpMaintenance") || tableCoulmn.equalsIgnoreCase("FollowUp Maintenance")) 
										{
											String value="";
											switch (field) {
											case "GrpNotesNotifyDate":
												Calendar calender=Calendar.getInstance();		
												SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");
												value=sdf.format(calender.getTime());
												break;

											default:
												value=(obj.getStringProperty("DefaultValues")==null)?"":obj.getStringProperty("DefaultValues");
												break;
											}
											if((value.isEmpty()&&value.equalsIgnoreCase(""))||value==null)
												value=(obj.getStringProperty("DefaultValues")==null)?"":obj.getStringProperty("DefaultValues");
											document.createTextElement(field,value,columnNode);
										}
										else if (coulmnName.equalsIgnoreCase("E_BillingUpdate") || tableCoulmn.equalsIgnoreCase("E_Billing Update"))
										{
											String value="";
											// capture the screen only whencase handling is Custom
											//if(caseHandlingType.equalsIgnoreCase("Custom"))
											value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Administrative_Parent__c']", null, accountNode), "");
											if(value!=null && !value.isEmpty() && !value.equalsIgnoreCase(""))
											{
											switch (field) {
											case "GrpParentGroup":												
												value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Administrative_Parent__c']", null, accountNode), "");
												//value=value.substring(0,9);
												/*try{
													value=value.substring(0,9);
												}catch(Exception e)												
												{}*/
												break;
											default:
												value=(obj.getStringProperty("DefaultValues")==null)?"":obj.getStringProperty("DefaultValues");
												break;
											}
											if((value.isEmpty()&&value.equalsIgnoreCase(""))||value==null)
												value=(obj.getStringProperty("DefaultValues")==null)?"":obj.getStringProperty("DefaultValues");
											document.createTextElement(field,value,columnNode);
}
										}
										else if (coulmnName.equalsIgnoreCase("PayrolDeductionCalendar") || tableCoulmn.equalsIgnoreCase("Payrol Deduction Calendar")) 
										{
											String value="";
											value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Deduction_Frequency_Confirmed__c']", null, masterSubNode), "");
											value=(value==null)?"":value;
											boolean sendRequestFlag=false;
											String[] array=value.split(";");
											/*for (String string : array) {
												if(!string.equalsIgnoreCase("Weekly") && !string.equalsIgnoreCase("Bi-Weekly"))
												{
													otherFrequencyflag=true;
													break;
												}
											}*/
											//if((value.contains("Weekly") || value.contains("Bi-Weekly")) && !otherFrequencyflag) // capture the node only if 'Weekly' or 'Bi-Weekly'
											if(array.length > 1)
											{
												sendRequestFlag=true;
											}
											else
											{
												if(!value.equalsIgnoreCase("Weekly") && !value.equalsIgnoreCase("Bi-Weekly"))
												{
													sendRequestFlag=false;													
												}
												else
												{
													sendRequestFlag=true;
												}
											}
											if(sendRequestFlag)
											{
												switch (field) {
												case "GrpCalendarStartDate":												
													value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Initial_Deduction_Date__c']", null, masterSubNode), "");
													value=convertDataByType(value, "DATE", "MMddyyyy");
													break;
												case "GrpCalendarMode":			
													//if(value.split(";").length <= 1)
													//{
														value=getValueFromWKsDropdown(companyCode, "GroupCustomDeductionCode", value);
													//}
													//else
													//{
													//	value="";
												//	}
													
													break;
												default:
													value=(obj.getStringProperty("DefaultValues")==null)?"":obj.getStringProperty("DefaultValues");
													break;
												}
												if((value.isEmpty()&&value.equalsIgnoreCase(""))||value==null)
													value=(obj.getStringProperty("DefaultValues")==null)?"":obj.getStringProperty("DefaultValues");
												document.createTextElement(field,value,columnNode);
											}
											
										}
										else if (coulmnName.equalsIgnoreCase("fulfilmentRules") || tableCoulmn.equalsIgnoreCase("fulfilment Rules")) 
										{
											String value="";
											switch (field) {
											case "GrpFulfillmentNBC":												
												value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Type']", null, accountNode), "");
												value=(value.equalsIgnoreCase("AE"))?"C":"D";
												break;
											case "GrpFulfillmentODF":												
												value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Type']", null, accountNode), "");
												value=(value.equalsIgnoreCase("AE"))?"C":"D";
												break;
											case "GrpFulfillmentEF":
												value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='eFulfillment__c']", null, accountNode), "");
												value=(value.equalsIgnoreCase("true"))?"Y":"N";												
												break;
											default:
												value=(obj.getStringProperty("DefaultValues")==null)?"":obj.getStringProperty("DefaultValues");
												break;
											}
											if((value.isEmpty()&&value.equalsIgnoreCase(""))||value==null)
												value=(obj.getStringProperty("DefaultValues")==null)?"":obj.getStringProperty("DefaultValues");
											document.createTextElement(field,value,columnNode);
										}	
										else if (coulmnName.equalsIgnoreCase("PlanAvailability") || tableCoulmn.equalsIgnoreCase("Plan Availability")) 
										{
											// If case handling type is Custom then dont execute the plan id rules
											if(!caseHandlingType.equalsIgnoreCase("Custom"))
											{
											String value="",diPlanId="",ciPlanId="", ihcPlanId="";
											boolean diPlanFlag=false,ciPlanFlag=false;
											String query="",diType1="",diType2="",ciType1="";
											QueryObject qObject=null;
										
											diPlanId=getValueFromJsonRec(productObject,"GrpDIChampPlanIDGold")+","+getValueFromJsonRec(productObject,"GrpDIChampPlanIDPlatinum")+","+getValueFromJsonRec(productObject,"GrpDIChampPlanIDDiamond")+","+getValueFromJsonRec(productObject,"GrpDIChampPlanIDCustom")+",";
											ciPlanId=getValueFromJsonRec(productObject,"CIChampPlanIDGold")+","+getValueFromJsonRec(productObject,"CIChampPlanIDPlatinum")+","+getValueFromJsonRec(productObject,"CIChampPlanIDDiamond")+","+getValueFromJsonRec(productObject,"CIChampPlanIDCustom")+",";
											ihcPlanId=getValueFromJsonRec(productObject,"IHCPlanIDBaseGold")+","+getValueFromJsonRec(productObject,"IHCPlanIDBasePlatinum")+","+getValueFromJsonRec(productObject,"IHCPlanIDBaseSilver")+","+getValueFromJsonRec(productObject,"IHCPlanIDBaseCustom")+","+getValueFromJsonRec(productObject,"IHCPlanIDBaseDiamond")+","+getValueFromJsonRec(productObject,"IHCPlanIDBaseCustom")+","+getValueFromJsonRec(productObject,"IHCPlanIDEnhancedGold")+","+getValueFromJsonRec(productObject,"IHCPlanIDEnhancedPlatinum")+","+getValueFromJsonRec(productObject,"IHCPlanIDEnhancedSilver")+","+getValueFromJsonRec(productObject,"IHCPlanIDEnhancedDiamond")+","+getValueFromJsonRec(productObject,"IHCPlanIDEnhancedCustom")+",";
											diPlanId=convertArrayToQuote(diPlanId);
											ciPlanId=convertArrayToQuote(ciPlanId);
											ihcPlanId=convertArrayToQuote(ihcPlanId);
											
											
											//if(displayName.equalsIgnoreCase("ProductHybridDI") && (!diPlanId.equalsIgnoreCase("") && diPlanId!=null))
											if(displayName.equalsIgnoreCase("ProductHybridDI") && (!diProductValue.equalsIgnoreCase("") && diProductValue!=null && !diProductValue.equalsIgnoreCase("null")))
											{
												switch (field) {
												case "GrpDIParticipationforPA":												
													value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Type']", null, accountNode), "");
													value=(value.equalsIgnoreCase("AE"))?"3":"5";
													break;
												case "GrpDIMinSrvWaitforPA":											
													
													if(caseHandlingType!=null && caseHandlingType.equalsIgnoreCase("Custom"))
													{
														value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Minimum_Length_of_Service_days__c,']", null, masterSubNode), "");
														value=convertDataByType(value, "NUMBER", "000");														
													}
													break;
												case "GrpDIPlanIDsforPA":
													/*if(diPlanId!=null & !diPlanId.equalsIgnoreCase(""))
													{
														String fieldArray[]=diPlanId.split(",");
														for(int i=fieldArray.length;i<3;i++)
														{
															diPlanId=diPlanId+",";
														}
													}*/
													value=diPlanId;													
													break;												
												default:
													value=(obj.getStringProperty("DefaultValues")==null)?"":obj.getStringProperty("DefaultValues");
													break;
												}
												if((value.isEmpty()&&value.equalsIgnoreCase(""))||value==null)
													value=(obj.getStringProperty("DefaultValues")==null)?"":obj.getStringProperty("DefaultValues");
												document.createTextElement(field,value,columnNode);
											}
											//if(displayName.equalsIgnoreCase("GrpCIProductwithPlanID") && (!ciPlanId.equalsIgnoreCase("") && ciPlanId!=null))
											if(displayName.equalsIgnoreCase("GrpCIProductwithPlanID") && (!ciProductValue.equalsIgnoreCase("") && ciProductValue!=null) && !ciProductValue.equalsIgnoreCase("null") )
											{
												switch (field) {
												
												case "GrpCIPParticipationforPA":												
													value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Type']", null, accountNode), "");
													value=(value.equalsIgnoreCase("AE"))?"3":"5";
													break;
												case "GrpCIPPlanIDsforPA":												
													/*if(ciPlanId!=null & !ciPlanId.equalsIgnoreCase(""))
													{
														String fieldArray[]=ciPlanId.split(",");
														for(int i=fieldArray.length;i<3;i++)
														{
															ciPlanId=ciPlanId+",";
														}
													}*/
													value=ciPlanId;	
													break;
													default:					
													value=(obj.getStringProperty("DefaultValues")==null)?"":obj.getStringProperty("DefaultValues");
													break;
												}
												if((value.isEmpty()&&value.equalsIgnoreCase(""))||value==null)
													value=(obj.getStringProperty("DefaultValues")==null)?"":obj.getStringProperty("DefaultValues");
												document.createTextElement(field,value,columnNode);
											}
//added for IHC
											if(displayName.equalsIgnoreCase("ProductIHC") && (!ihcProductValue.equalsIgnoreCase("") && ihcProductValue!=null) && !ihcProductValue.equalsIgnoreCase("null") )
											{
												switch (field) {
												
												case "GrpIHCPlanIDsforPA":												
													value=ihcPlanId;	
													
													break;
												case "GrpIHCMinimumServiceWaitforPA":											
													
													if(caseHandlingType!=null && caseHandlingType.equalsIgnoreCase("Custom"))
													{
														value=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Minimum_Length_of_Service_days__c,']", null, masterSubNode), "");
														value=convertDataByType(value, "NUMBER", "000");														
													}
													break;
													
												default:
													value=(obj.getStringProperty("DefaultValues")==null)?"":obj.getStringProperty("DefaultValues");
													break;
												}
												if((value.isEmpty()&&value.equalsIgnoreCase(""))||value==null)
													value=(obj.getStringProperty("DefaultValues")==null)?"":obj.getStringProperty("DefaultValues");
												document.createTextElement(field,value,columnNode);
											}
//IHC ends here		   
}
										}	
else if (coulmnName.equalsIgnoreCase("PastDueParameters") || tableCoulmn.equalsIgnoreCase("Past Due Parameters")) {
            String value = "";
            switch (field) {
              case "GrpPastDueMissedDedLetter":
                value = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Type']", null, accountNode), "");
                value = (value.equalsIgnoreCase("AE") && value != null) ? "Y" : "N";
                break;
            /*  case "GrpPastDueDaysinDetach":  // WIMSWRK-1256 - Defaulted to 120
                value = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Past_Due_Parameters__c']", null, masterSubNode), "");
                break; */
              default:
                value = (obj.getStringProperty("DefaultValues") == null) ? "" : obj.getStringProperty("DefaultValues");
                break;
            } 
            if ((value.isEmpty() && value.equalsIgnoreCase("")) || value == null)
              value = (obj.getStringProperty("DefaultValues") == null) ? "" : obj.getStringProperty("DefaultValues"); 
            document.createTextElement(field, value, columnNode);
            continue;
          } 
/*else if (coulmnName.equalsIgnoreCase("GrpAccident") || tableCoulmn.equalsIgnoreCase("Grp Accident")) {
    String value = "";
    switch (field) {
      case "GrpAccCovType":
        value = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Group_Accident__c']", null, masterAppNode), "");       
        break;
      default:
        value = (obj.getStringProperty("DefaultValues") == null) ? "" : obj.getStringProperty("DefaultValues");
        break;
    } 
    if (value == null || (value.isEmpty() && value.equalsIgnoreCase("")))
      value = (obj.getStringProperty("DefaultValues") == null) ? "" : obj.getStringProperty("DefaultValues"); 
    if (value == null || (value.isEmpty() && value.equalsIgnoreCase("")))
    	continue;
    else
    	document.createTextElement(field, value, columnNode);
  }*/
else if (coulmnName.equalsIgnoreCase("GrpAccident") || tableCoulmn.equalsIgnoreCase("Grp Accident")) {
    String value = "";
	String grpAccPlanCodes = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Group_Accident__c']", null, masterAppNode), "");   
 
	if((caseHandlingType!=null && (caseHandlingType.equalsIgnoreCase("Expedited") || caseHandlingType.equalsIgnoreCase("Bundled GI"))) && (grpAccPlanCodes!=null && !grpAccPlanCodes.equalsIgnoreCase("")))
	{
		switch (field) {
			case "GrpAccPlanSelected":
			 value=WKSDropDownTable.getValueFromWKsDropdownByDesc(companyCode, field, grpAccPlanCodes);

			break;
			case "GrpAccCovType":       
				value = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Group_Accident_Off_The_Job_or_24_Hour__c']", null, masterAppNode), "");		
				if(!value.equalsIgnoreCase("") && value!=null && value.equalsIgnoreCase("Off Job Only"))
				{
					value="N";
				}
				else if(!value.equalsIgnoreCase("") && value!=null && value.equalsIgnoreCase("24 Hour"))
				{
					value="2";
				}
				else
				{
					value="";
				}
			break;
			case "GrpAccGrpType":
				value = (obj.getStringProperty("DefaultValues") == null) ? "" : obj.getStringProperty("DefaultValues"); 
			break;
			case "GrpAccPayrolMode":
				String deductCode=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Deduction_Frequency_Confirmed__c']", null, masterSubNode), "");
				
                if(!deductCode.equalsIgnoreCase("") && deductCode!=null)
				{
					if(deductCode.contains(";")) 
					{
					  deductCode = deductCode.split(";")[0]; // Only first deduction code will be passed WIMSWRK-1493
					}
					value=getValueFromWKsDropdown(companyCode, "GroupCustomDeductionCode", deductCode);
					value =(value!=null)? value.replaceAll(" ", ""):value;

				//	value=deductCode ;

				}
			break;
			case "GrpAccStateCode":
				value = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Situs_State__c']", null, masterSubNode), "");
			break;		
		  default:
			value = (obj.getStringProperty("DefaultValues") == null) ? "" : obj.getStringProperty("DefaultValues");
			break;
		} 
		if (value == null || (value.isEmpty() && value.equalsIgnoreCase("")))
		{
		  value = (obj.getStringProperty("DefaultValues") == null) ? "" : obj.getStringProperty("DefaultValues"); 
		}
		document.createTextElement(field, value, columnNode);
	}
    
  }   
                    else {
						if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
							fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
						if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
							Node.appendToChildren(document.createElement(field), columnNode);
						else
							document.createTextElement(field,fieldValue, columnNode);
					}
					
									
				}
				int duplicateNode = Node.clone(columnNode, true);
				Node.appendToChildren(duplicateNode,rootNode);
				Node.delete(columnNode);
				//Node.delete(duplicateNode);
				duplicateNode=-1;
			}
		//}
		/*else if(taskMode.equals("GSTask")){
			
			while(Node.getNextElement(LSPData)!=-1)
			{
				Node.getNumChildElements(LSPData);
			}
		}
		else {}*/
		}catch(Exception ex)
		{
			Node.delete(rootNode);
			try {
				rootNode=document.parseString(strRoot);
				document.createTextElement("exception",ex.toString(), rootNode);
			}
			catch(Exception e) {}
			logger.error("Error :"+ex);
		}
		finally
		{
			try
			{
				taskMode=null;companyCode=null;groupNumber=null;masterApp=null;	
			}catch(Exception q)
			{
				logger.error("Error in frameLSPXML method:"+q);
			}
		}
		return rootNode;
	
}
public static String getValueFromWKsDropdown(String companyCode,String sourceField,String description) throws Exception
	{
		String queryText="",value="";
		QueryObject queryObject=null;
		description=convertToLocal(description);
		//queryText="select value from WKS_dropdown_table where company_code='"+companyCode+"' and identifier='"+sourceField+"' and description in ("+description+")";
		queryText="select value from WKSdropdowntable where companycode='"+companyCode+"' and identifier='"+sourceField+"' and description in ("+description+")";
		queryObject=new QueryObject(queryText);
		queryObject.setResultClass(WorksiteUtil.class);
		BusObjectIterator<BusObject> objectIterator=queryObject.getObjects();
		while(objectIterator.hasMoreElements())
		{
			BusObject object=objectIterator.nextElement();
			value=value+object.getStringProperty("value")+",";
		}
		if(!value.equalsIgnoreCase("") && value!=null)
		{
			value=value.substring(0, value.lastIndexOf(","));
		}
		return value;
	}
	public static String getPlanIDFormCaseHandlingConfig(String planName,String state,String type,String type3) throws Exception
	{
		boolean flag=false;
		QueryObject object=null;
		String returnString="";
		type=convertToLocal(type);
		
		String queryText="select distinct PlanID from WKSOPsCaseHandlingConfig " + 
				"  where Planname = '"+planName+"' " + 
				"  and State = '"+state+"'" + 
				"  and TYPE1 in ("+type+")";
		if(!type3.equalsIgnoreCase("") && type3!=null)
		{
			type3=convertToLocal(type3);
			queryText=queryText+" and TYPE3 in ("+type3+")";
		}
		object=new QueryObject(queryText);
		object.setResultClass(WorksiteUtil.class);
		BusObjectIterator<BusObject> configObjects=object.getObjects();		
		while(configObjects.hasMoreElements())
		{
			BusObject busObject=configObjects.nextElement();
			returnString=returnString+busObject.getStringProperty("PlanID")+",";
		}
		if(returnString.equalsIgnoreCase("") || returnString.isEmpty() || returnString==null)   // read the generic plan id if there is no state specific plan
		{        
			queryText="select distinct PlanID from WKSOPsCaseHandlingConfig where Planname ='"+planName+"' and State like '%*%' ";
			if(!type.equalsIgnoreCase("") && type!=null)
			{
				queryText=queryText+" and TYPE1 in ("+type+")";
			}
			if(!type3.equalsIgnoreCase("") && type3!=null)
			{
				queryText=queryText+" and TYPE3 in ("+type3+")";
			}
			object=new QueryObject(queryText);
			object.setResultClass(WorksiteUtil.class);
			BusObjectIterator<BusObject> configObjects1=object.getObjects();		
			while(configObjects1.hasMoreElements())
			{
				BusObject busObject1=configObjects1.nextElement();
				returnString=returnString+busObject1.getStringProperty("PlanID")+",";
			}
		}
		returnString=(!returnString.equalsIgnoreCase("") && returnString!=null)?returnString.substring(0, (returnString.length()-1)):"";
		return returnString;
	}
 

public static String getPlanIDforUI(String planName, String state, String type, String type2, String type3, String ECaseHandlingType) throws Exception
{
	boolean flag=false;
	String returnString="";
	type=convertToLocal(type);
	//type2=convertToLocal(type2);
	//type3=convertToLocal(type3);
	String queryText="select distinct PlanID from WKSOPsCaseHandlingConfig where Planname ='"+planName+"' and State = '"+state+"' and TYPE2='"+type2+"' and TYPE3='"+type3+"' and TYPE1 in ("+type+") and CaseType='"+ECaseHandlingType+"'";  

	QueryObject object=new QueryObject(queryText);
	object.setResultClass(WorksiteUtil.class);
	BusObjectIterator<BusObject> configObjects=object.getObjects();		
	while(configObjects.hasMoreElements())
	{
		BusObject busObject=configObjects.nextElement();
		returnString=returnString+busObject.getStringProperty("PlanID")+",";

	}

        if(returnString.equalsIgnoreCase("") || returnString==null)
        {
         String genericState="**";
         String queryText1="select distinct PlanID from WKSOPsCaseHandlingConfig where Planname ='"+planName+"' and State = '"+genericState+"' and TYPE2='"+type2+"' and TYPE3='"+type3+"' and TYPE1 in ("+type+") and CaseType='"+ECaseHandlingType+"'";  

	QueryObject object1=new QueryObject(queryText1);
	object1.setResultClass(WorksiteUtil.class);
	BusObjectIterator<BusObject> configObjects1=object1.getObjects();		
	while(configObjects1.hasMoreElements())
	{
		BusObject busObject1=configObjects1.nextElement();
		returnString=returnString+busObject1.getStringProperty("PlanID")+",";

	}

        }

returnString=(!returnString.equalsIgnoreCase("") && returnString!=null)?returnString.substring(0, (returnString.length()-1)):"";

	return returnString;

}

public static String convertDataByType(String value,String type,String targetFormat) throws Exception
	{
		String returnValue="";
		DecimalFormat decimalFormat =null;
		if(!targetFormat.equalsIgnoreCase("") && targetFormat!=null)
		{
			decimalFormat = new DecimalFormat(targetFormat);
		}
		switch (type) {
		case "DATE":
			if(!value.equalsIgnoreCase("") && value!=null)
			{
			DateFormat curFormater = new SimpleDateFormat("yyyy-MM-dd");
			DateFormat targetFormater = new SimpleDateFormat(targetFormat);
			Date dateObj = curFormater.parse(value); 
			Calendar calendar = Calendar.getInstance();
			calendar.setTime(dateObj);
			Date currentDate=calendar.getTime();
			returnValue=targetFormater.format(currentDate);
			}
			break;
		case "NUMBER":
			if(!value.equalsIgnoreCase("") && value!=null)
			{
				returnValue=decimalFormat.format(Double.parseDouble(value));
			}
			break;
		case "MONTH":
			if(!value.equalsIgnoreCase("") && value!=null)
			{
			double month = Double.parseDouble(value)/30;
			double valueRounded = Math.round(month * 100D) / 100D;
			valueRounded=valueRounded+2;			
			//returnValue=Double.toString();
			returnValue=decimalFormat.format(Math.floor(valueRounded));
			}
			break;
		case "INTEGER":
			double data=0.0;
			try
			{
				data=Double.parseDouble(value);
				DecimalFormat df2 = new DecimalFormat("0");
				returnValue=df2.format(Double.parseDouble(value));
				
			}catch(Exception e)
			{
				returnValue="";
			}
			break;
		default:	
			break;
		}
		return returnValue;
	}


public static String convertToLocal(String locString)
{
	String dataString="";
	if(!locString.equalsIgnoreCase("") && locString!=null)
	{
		String array[]=locString.split(";");		
		for(int i=0;i<array.length;i++)			
		{
			dataString=dataString+"'"+array[i]+"',";
		}
		dataString=dataString.substring(0, (dataString.length()-1));
	}
	/*else
	{
		dataString="''";
	}*/
	return dataString;
}
	public static boolean getCaseHandlingConfig(String planName,String state,String type,String type2) throws Exception
	{
		boolean flag=false;
		type=convertToLocal(type);
		type2=convertToLocal(type2);
		if(type.equalsIgnoreCase("") || type==null)
		{
			flag=false;
			return flag;
		}
		String queryText="select distinct PLanID from WKSOPsCaseHandlingConfig " + 
				"  where Planname = '"+planName+"' " + 
				"  and State = '"+state+"'" + 
				"  and TYPE1 in ("+type+")";
		if(!type2.equalsIgnoreCase("") && type2!=null)
		{
			queryText=queryText+" and TYPE3 in ("+type2+")";
		}
		QueryObject object=new QueryObject(queryText);
		object.setResultClass(WorksiteUtil.class);
		BusObjectIterator<BusObject> configObjects=object.getObjects();		
		if(configObjects.hasMoreElements())
		{
			flag=true;
		}
		else
		{
			//flag=false;
			// check for generic plan id
			queryText="select distinct PlanID from WKSOPsCaseHandlingConfig where Planname ='"+planName+"' and State like '%*%' ";
			if(!type.equalsIgnoreCase("") && type!=null)
			{
				queryText=queryText+" and TYPE1 in ("+type+")";
			}
			if(!type2.equalsIgnoreCase("") && type2!=null)
			{
				queryText=queryText+" and TYPE3 in ("+type2+")";
			}
			object=new QueryObject(queryText);
			object.setResultClass(WorksiteUtil.class);
			BusObjectIterator<BusObject> configObjects1=object.getObjects();
			if(configObjects1.hasMoreElements())
			{
				flag=true;
			}
			else
			{
				flag=false;
			}
		}
		return flag;
	}	
	public static String postRESTAPI(String strUrl, String bodyContent, boolean checkAuth) throws Exception
	{
		HttpURLConnection con=null;
		String responseMessage="",strResponse="";
		int responseCode=0;
                //boolean flagDoInput=true,flagDoOutput=true;
		try 
        {                
            URL url = new URL(strUrl); 
            con =(HttpURLConnection) url.openConnection(); 
con.setDoOutput(true);
con.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
con.setRequestProperty("Accept", "application/json");
con.setRequestMethod("POST");
//con.connect();      

            byte[] out = bodyContent.getBytes("UTF-8");
			//int length = out.length;
			//logger.error("body content: "+bodyContent);
			//logger.error("byte code: "+out+" test");
			//con.setFixedLengthStreamingMode(length);
			//con.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
			//con.connect();
								   
			DataOutputStream out1 = new DataOutputStream(con.getOutputStream());
        out1.write(out);
        out1.close();

			//logger.error("Method:"+" POST "+",SF_AUTH_VALUE:"+SF_AUTH_VALUE);
            
			///logger.error("get output stream");
          //  OutputStream out = con.getOutputStream();                               
            responseCode=con.getResponseCode();
            responseMessage= con.getResponseMessage();

			logger.error("Response Code:"+responseCode); 
			logger.error("Response Message:"+responseMessage);  

            if(responseCode == HttpURLConnection.HTTP_OK)
			{
                 // InputStream ip = con.getInputStream(); 
                logger.error("inside if" ); 
                BufferedReader br1 = new BufferedReader(new InputStreamReader( con.getInputStream())); 
                StringBuilder response = new StringBuilder(); 
                String responseSingle = null; 
                while ((responseSingle = br1.readLine()) != null)  
                { 
                    response.append(responseSingle); 
                } 
                strResponse = response.toString(); 
                logger.error("BR close"+responseSingle ); 
                br1.close();
            }
            else
            {
                logger.error("Inside else" ); 
                BufferedReader br1 = new BufferedReader(new InputStreamReader(con.getErrorStream())); 
                StringBuilder response = new StringBuilder(); 
                String responseSingle = null; 
                ///logger.error("read stream" ); 
                while ((responseSingle = br1.readLine()) != null)  
                { 
                    response.append(responseSingle); 
                } 
                strResponse = response.toString(); 
                logger.error("BR close"+responseSingle); 
                br1.close();
			}
			con.disconnect(); 
            
            logger.error(strResponse); 
  
        } catch (Exception e)              
        { 
            logger.error("Error:"+e); 
            throw e;
        } 
		return strResponse;
	}
	public static String WimsPlanActivity(String caseinstanceid, String activity, String activityName, String humanTaskModelId, String subject, String assignee, String principal, String assignToUser, String dueDate, String deliveryModelName, String targetType, String priority,int preassignments)
    {
    	String reqXML="<planactivities>"
    			+"            <activity id=\""+activity+"\" name=\""+activityName+"\">"
    			+"<case:activity xmlns:ns=\"http://schemas.cica.com/casedata/1.0\" xmlns:ns29=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" xmlns:ns25=\"http://www.w3.org/2007/05/addressing/metadata\" xmlns:ns26=\"http://schemas.xmlsoap.org/ws/2004/08/addressing/policy\" xmlns:ns27=\"http://www.w3.org/2006/05/addressing/wsdl\" xmlns:ns28=\"http://schemas.xmlsoap.org/ws/2004/09/policy\" xmlns:ns21=\"http://schemas.microsoft.com/ws/2005/12/wsdl/contract\" xmlns:ns22=\"http://schemas.xmlsoap.org/wsdl/soap12/\" xmlns:ns23=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\" xmlns:ns24=\"http://www.w3.org/2005/08/addressing\" xmlns:ns20=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\" xmlns:ns18=\"http://schemas.cordys.com/VendorOrderRequirement\" xmlns:ns19=\"http://schemas.cordys.com/1.0/xmlstore\" xmlns:ns14=\"http://schemas.cordys.com/uw/dataservices/1.0\" xmlns:ns15=\"http://schemas.cordys.com/default_005056A2-27FA-A1E8-B219-DC47FD4A013B\" xmlns:ns16=\"http://schemas.cordys.com/dataservices/uw/1.0\" xmlns:ns17=\"http://schemas.cordys.com/casemanagement/execution/1.0\" xmlns:ns32=\"http://schemas.datacontract.org/2004/07/MRSServiceWrks\" xmlns:ns10=\"http://schemas.cordys.com/WorksiteWSAppPackage\" xmlns:ns11=\"http://schemas.cordys.com/\" xmlns:ns12=\"http://schemas.cordys.com/General/ClientAttributes/\" xmlns:ns9=\"http://schemas.cordys.com/notification/workflow/1.0\" xmlns:ns13=\"http://schemas.datacontract.org/2004/07/MRSService\" xmlns:ns7=\"http://tempuri.org/\" xmlns:ns8=\"http://schemas.cordys.com/General/1.0/\" xmlns:ns30=\"http://schemas.xmlsoap.org/ws/2004/09/mex\" xmlns:ns5=\"http://schemas.cordys.com/bpm/instance/1.0\" xmlns:ns31=\"http://schemas.microsoft.com/2003/10/Serialization/\" xmlns:ns6=\"http://schemas.cordys.com/default_005056A2-27FA-A1EA-B8AF-D784153BC15E\" xmlns:ns3=\"http://schemas.cordys.com/default\" xmlns:ns4=\"http://schemas.cordys.com/bpm/execution/1.0\" xmlns:ns1=\"http://schemas.cordys.com/1.0/xforms/processapi\" xmlns:ns2=\"http://schemas.cica.com/casedata/1.0\" xmlns:sm=\"http://www.w3.org/2005/07/scxml\" xmlns:case=\"http://schemas.cordys.com/casemanagement/1.0\"  id=\""+activity+"\" name=\""+activityName+"\" type=\"HUMANTASK\"> "
    					+"<case:implementation>"
    			+"                     <HumanInteraction xmlns=\"http://schemas.cordys.com/notification/workflow/1.0\">"
    			+"                        <HumanTaskModelId>"+humanTaskModelId+"</HumanTaskModelId>"
    			+"                        <Subject>"+subject+"</Subject>"
    			+"                        <Priority source=\"asInMainCase\">"+priority+"</Priority>"
    			+"                        <SendTo>"
    			+"                           <Target type=\""+targetType+"\">"
    			+"                              <Assignee dynamic=\"false\">"+assignee+"</Assignee>"
    			+"                           </Target>";
    			/*+"                           <ExecutionPolicy>"
    			+"                              <Entry>"
    			+"                                 <Principal type=\"role\">"+principal+"</Principal>"
    			+"                                 <Privilege>view</Privilege>"
    			+"                                 <Privilege>execute</Privilege>"
    			+"                              </Entry>"
    			+"                           </ExecutionPolicy>";*/
    	
    	
    		if(assignToUser != null && !assignToUser.isEmpty())
    		{
    			reqXML +="                           <AssignToUser type=\"ASSIGN\">"+assignToUser+"</AssignToUser>";
    		}
    			reqXML +="                        </SendTo>";
    		if(dueDate != null && !dueDate.isEmpty())
    		{
    	    	reqXML +="  <DueDate isDuration=\"true\" dynamic=\"false\">"+dueDate+"</DueDate>";
    		}
    			reqXML +="                     </HumanInteraction>"
    			+"                  </case:implementation>"
    			+"                  <case:messages>"
    			+"                     <case:input>"
    			+"                        <case:message name=\""+deliveryModelName+"\" ns=\"http://schemas.cordys.com/1.0/xforms/processapi\">"
    			+"                        </case:message>"
    			+"                     </case:input>"
    			+"                  </case:messages>"
    			+"                  <case:associatedevents />"			
    			+"                  <case:escalation />"
				 +   Node.writeToString(XPath.getFirstMatch(".//*[local-name()='preassignment']", null, preassignments),true)
    			+"               </case:activity>"
    			+"            </activity>"
    			+"         </planactivities>";
    	
    	Document doc = new Document();
    	int reqNode=0;
    	try {
    		reqNode = doc.parseString(reqXML);
    	} catch (Exception e) {
    		// TODO Auto-generated catch block
    		e.printStackTrace();
    		logger.log(Severity.ERROR, "Exception Error Request" + e.getMessage());
    	} 
    	String[] parameterName = {"caseinstanceid"};
    	String[] parameterValue = {caseinstanceid};
    	SOAPRequestObject sro=new SOAPRequestObject ("http://schemas.cordys.com/casemanagement/execution/1.0","PlanActivities", parameterName, parameterValue) ;
    	
    	sro.addParameterAsXml(reqNode);
    	logger.log(Severity.ERROR,"Plan Acitivity: "+Node.writeToString(reqNode, true));
    	int response = sro.execute();
    	return Node.writeToString(response, true);
    }
	public static String getErrorScreenFromLSPScreenMaster(String screenName,String headerName,String companyCode,String groupNumber,String masterApp) throws Exception
	{
		String queryText="",jsonResponse="",subScreen="";
		QueryObject queryObject=null;BusObject busObject=null;
		try
		{
			queryText="select * from LSPScreenMaster where ScreenName=:screenName and Header=:headerName and CompanyCode=:companyCode and GroupNumber=:groupNumber and MasterAppNumber=:masterApp";
			queryObject=new QueryObject(queryText);
			queryObject.addParameter("screenName", "LSPScreenMaster.ScreenName", QueryObject.PARAM_STRING, screenName);
			queryObject.addParameter("headerName", "LSPScreenMaster.Header", QueryObject.PARAM_STRING, headerName);
			queryObject.addParameter("companyCode", "LSPScreenMaster.CompanyCode", QueryObject.PARAM_STRING, companyCode);
			queryObject.addParameter("groupNumber", "LSPScreenMaster.GroupNumber", QueryObject.PARAM_STRING, groupNumber);
			queryObject.addParameter("masterApp", "LSPScreenMaster.MasterAppNumber", QueryObject.PARAM_STRING, masterApp);
			queryObject.setResultClass(WorksiteUtil.class);
			busObject=queryObject.getObject();
			if(busObject!=null)
			{
				jsonResponse=busObject.getStringProperty("Response");
				jsonResponse=(jsonResponse==null)?"":jsonResponse;
				if(!jsonResponse.equalsIgnoreCase("") && !jsonResponse.isEmpty() && jsonResponse!=null)
				{
					JSONTokener tokener=new JSONTokener(jsonResponse);
					while(tokener.more())
					{
						JSONArray array=(JSONArray)tokener.nextValue();
						if(array.length()==0)
						{
							continue;
						}
						else
						{
											
							JSONObject jsonObject=array.getJSONObject(0);
							if(hasKey(jsonObject,"ScreenName"))
							{
								subScreen=jsonObject.get("ScreenName").toString();
								if(subScreen.equalsIgnoreCase("") || subScreen.isEmpty() || subScreen==null)
								{
									subScreen=busObject.getStringProperty("ProgramName");
								}
							}
						}
					}
				}
			}
		}catch(Exception ex)
		{
			logger.error("Error in getErrorScreenFromLSPScreenMaster:"+ex);
		}
		return subScreen;
		
	}
public static int readWIMSResponseByActivityId(int SrNo,String taskName) throws Exception
	{
		  int wimsNode=-1,rootNode=-1;
		  String wimsData="",header="",strHeader="",trimHeader="";
		  String screenName="",companyCode="",groupNumber="",MasterAppNumber="",subScreenName="";
		  try
		  {
			  // get LSP object by ID
rootNode=document.parseString("<Data></Data>");
			  WIMSDataRequest wimsObj=WIMSDataRequest.getWIMSDataRequestObject(SrNo);
			  // read the WIMS response
			  if(wimsObj!=null)
			  {
				  wimsData=wimsObj.getCurrentScreenData();
				  header=wimsObj.getHeader();
				  wimsNode=document.parseString("<Data></Data>");
				  screenName=wimsObj.getScreenName();
				  companyCode=wimsObj.getCompanyCode();
				  groupNumber=wimsObj.getGroupNumber();
				  MasterAppNumber=wimsObj.getMasterAppNumber();
				  subScreenName=getErrorScreenFromLSPScreenMaster(screenName,header,companyCode,groupNumber,MasterAppNumber);
				  subScreenName=(subScreenName==null)?"":subScreenName;
			  }

			  // convert JSON to XML
			 // wimsData="{\"Maintain Users\":{\"S01\":{\"FirstName\":\"dileep\",\"Title\":\"title\",\"LastName\":\"dileep\"},\"transaction\":\"add\"}}";
			  if(!wimsData.equalsIgnoreCase("") && wimsData!=null)
			  {
				  JSONObject object=new JSONObject(wimsData);
				  strHeader=header.replaceAll("\\s+", "");		
trimHeader=header.replaceAll("\\s+", "");		  
				  strHeader="<"+strHeader+"></"+strHeader+">";
				  wimsNode=document.parseString(strHeader);
				  
					JSONObject imRepsonse=new JSONObject(wimsData);
					imRepsonse=new JSONObject(wimsData);
//					JSONObject headerObj=(JSONObject) imRepsonse.get(header);
JSONObject headerObj=(JSONObject) imRepsonse.get(trimHeader);
					if((header.equalsIgnoreCase("Real CI Setup")|| trimHeader.equalsIgnoreCase("RealCISetup")) && header!=null)
					{
						headerObj=(JSONObject) headerObj.get("GISET01D");

					}
					Iterator itr=headerObj.keys();
					while(itr.hasNext())
					{
						String displayName=(String)itr.next();JSONObject displayNameObj=null;		
						try
						{
						displayNameObj=(JSONObject) headerObj.get(displayName);
						}catch(Exception ex)
						{
							document.createTextElement(displayName, headerObj.get(displayName).toString(), wimsNode);
							displayNameObj=null;
							continue;
						}
						if(displayNameObj!=null  && subScreenName.equalsIgnoreCase("") )
						{
							Iterator iterator=displayNameObj.keys();
							while(iterator.hasNext())
							{
								String fieldName=(iterator.next().toString());
								String fieldValue=displayNameObj.get(fieldName).toString();
								String sourceField="";
								BusObject busObject=getWIMSFieldName("",header,displayName,fieldName,"IMTask");
								if(busObject!=null)
								{
									sourceField=busObject.getStringProperty("SourceField");
									sourceField=(sourceField==null || sourceField.equalsIgnoreCase(""))?"NA":sourceField;
									document.createTextElement(sourceField, fieldValue, wimsNode);
								}	
							}
						}
						else if(displayNameObj!=null  && displayName.equalsIgnoreCase(subScreenName))
						{
						Iterator iterator=displayNameObj.keys();
						while(iterator.hasNext())
						{
							String fieldName=(iterator.next().toString());
							String fieldValue=displayNameObj.get(fieldName).toString();
String sourceField="";
							BusObject busObject=getWIMSFieldName("",header,displayName,fieldName,"IMTask");
							if(busObject!=null)
							{
								sourceField=busObject.getStringProperty("SourceField");
								sourceField=(sourceField==null || sourceField.equalsIgnoreCase(""))?"NA":sourceField;
								document.createTextElement(sourceField, fieldValue, wimsNode);
							}

							//document.createTextElement(fieldName, fieldValue, wimsNode);
							
						}
						}//System.out.println(headerObj.get(displayName).toString());
					}
Node.appendToChildren(wimsNode, rootNode);
			  }
			  
			  
		  }catch(Exception ex)
		  {
			  logger.error("Error in readWIMSResponseByActivityId Method:"+ex);
			  throw ex;
		  }		  
		return rootNode;
		  
		}

public static int GSTaskXMLData(int LSPData) {
	String strRoot="<Root></Root>",taskMode="",companyCode="",groupNumber="",masterApp="",masterAppNo="";
	int rootNode=-1;int jsonNode=-1;
	try{
	rootNode=document.parseString(strRoot);
		
	taskMode=Node.getData(XPath.getFirstMatch(".//*[local-name()='Mode']",null,LSPData));
	companyCode=Node.getData(XPath.getFirstMatch(".//*[local-name()='KeyCompanyCode']",null,LSPData));
	groupNumber=Node.getData(XPath.getFirstMatch(".//*[local-name()='keyGroupNumber']",null,LSPData));
	masterApp=Node.getData(XPath.getFirstMatch(".//*[local-name()='KeyMasterApp']",null,LSPData));
	Node.createTextElement("KeyCompanyCode",companyCode ,rootNode );
	Node.createTextElement("keyGroupNumber",groupNumber ,rootNode );
	Node.createTextElement("KeyMasterApp",masterApp ,rootNode );
	String columnQueryText="select distinct Header from LSPValidations ";
	QueryObject columnQueryobj=new QueryObject(columnQueryText);
	BusObjectIterator<BusObject> columnObject= columnQueryobj.getObjects();
	String masterQuery="Select MasterAppNo from WKSOPSCase where ApplicationType='"+masterApp+"'";
	QueryObject masterQueryobj=new QueryObject(masterQuery);
	BusObject masterObj = masterQueryobj.getObject();
	masterAppNo = masterObj.getStringProperty("MasterAppNo");
	int masterAppNode = getMasterAppObjectById(masterAppNo);
	int accountNode = XPath.getFirstMatch(".//*[local-name()='AccountData']",null,masterAppNode);
	int masterSubNode= XPath.getFirstMatch(".//*[local-name()='MasterApplication']",null,masterAppNode);
	
	while(columnObject.hasMoreElements()) {
		String coulmnName="",tableCoulmn="";
		BusObject coulmnobj = columnObject.nextElement();
		tableCoulmn = coulmnobj.getStringProperty("Header");
		coulmnName = tableCoulmn.replaceAll("\\s+", "");
		int checkCoulmnNode = (XPath.getFirstMatch(".//*[local-name()='"+coulmnName+"']",null,LSPData)!=0?XPath.getFirstMatch(".//*[local-name()='"+coulmnName+"']",null,LSPData):XPath.getFirstMatch(".//*[local-name()='"+tableCoulmn+"']",null,LSPData));
		if(checkCoulmnNode!=0){
			int columnNode =-1;
		columnNode = document.createElement(coulmnName);
			if(Node.isValidNode(jsonNode))
			{
				Node.delete(jsonNode);
				jsonNode=-1;
			}
		String queryText="select  * from LSPValidations where Header='"+tableCoulmn+"'";
		QueryObject queryobj=new QueryObject(queryText);
		BusObjectIterator<BusObject> object= queryobj.getObjects();
		while(object.hasMoreElements()) {
			
			BusObject obj = object.nextElement();
			String field = "",fieldValue="";
			field=obj.getStringProperty("SourceField");
			field = field.replaceAll("\\s+", "");
			//fieldValue = Node.getAttribute(LSPData, field);
			fieldValue = (Node.getData(XPath.getFirstMatch(".//*[local-name()='"+field+"']",null,LSPData))==null?"":Node.getData(XPath.getFirstMatch(".//*[local-name()='"+field+"']",null,LSPData)));
			/*if(coulmnName.equalsIgnoreCase("AddClientInformation") || tableCoulmn.equalsIgnoreCase("Add Client Information")) {
				if(field.equalsIgnoreCase("GroupClientName")) {
					fieldValue = Node.getData(XPath.getFirstMatch(".//*[local-name()='Name']",null,accountNode));
					if(fieldValue==null)
						fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
					if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
						Node.appendToChildren(document.createElement(field), columnNode);
					else
						document.createTextElement(field,fieldValue, columnNode);
					
				}
				else if(field.equalsIgnoreCase("GroupClientSSN")) {
					fieldValue = Node.getData(XPath.getFirstMatch(".//*[local-name()='Name']",null,masterSubNode));
					if(fieldValue==null)
						fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
					else {
						fieldValue = fieldValue.replaceAll("[^0-9]", "");
						fieldValue = fieldValue+fieldValue.substring(0,4);
					}
					if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
						Node.appendToChildren(document.createElement(field), columnNode);
					else
						document.createTextElement(field,fieldValue, columnNode);
				}
				else if(field.equalsIgnoreCase("GroupClientAddr1")) {
					fieldValue = Node.getData(XPath.getFirstMatch(".//*[local-name()='BillingStreet']",null,accountNode));
					if(fieldValue==null)
						fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
					else {
						int n=30;
						if(fieldValue.length()>=30)
							fieldValue = fieldValue.substring(0, Math.min(fieldValue.length(), n));
						else
							fieldValue =fieldValue;
					}
					if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
						Node.appendToChildren(document.createElement(field), columnNode);
					else
						document.createTextElement(field,fieldValue, columnNode);
				}
				else if(field.equalsIgnoreCase("GroupClientAddr2")) {
					fieldValue = Node.getData(XPath.getFirstMatch(".//*[local-name()='BillingStreet']",null,accountNode));
					if(fieldValue==null)
						fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
					else {
						if(fieldValue.length()>=60 || (fieldValue.length()<60 && fieldValue.length()>30))
							fieldValue = fieldValue.substring(30, Math.min(fieldValue.length(), 60));
						else
							fieldValue ="";
					}
					if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
						Node.appendToChildren(document.createElement(field), columnNode);
					else
						document.createTextElement(field,fieldValue, columnNode);
				}
				else if(field.equalsIgnoreCase("GroupClientAddr3")) {
					fieldValue = Node.getData(XPath.getFirstMatch(".//*[local-name()='BillingStreet']",null,accountNode));
					if(fieldValue==null)
						fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
					else {
						if(fieldValue.length()>=90 || (fieldValue.length()<90 && fieldValue.length()>60))
							fieldValue = fieldValue.substring(60, Math.min(fieldValue.length(), 90));
						else
							fieldValue ="";
					}
					if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
						Node.appendToChildren(document.createElement(field), columnNode);
					else
						document.createTextElement(field,fieldValue, columnNode);
				}
				else if(field.equalsIgnoreCase("GroupClientCity")) {
					fieldValue = Node.getData(XPath.getFirstMatch(".//*[local-name()='BillingCity']",null,accountNode));
					if(fieldValue==null)
						fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
					if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
						Node.appendToChildren(document.createElement(field), columnNode);
					else
						document.createTextElement(field,fieldValue, columnNode);
				}
				else if(field.equalsIgnoreCase("GroupClientState")) {
					fieldValue = Node.getData(XPath.getFirstMatch(".//*[local-name()='BillingState']",null,accountNode));
					if(fieldValue==null)
						fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
					if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
						Node.appendToChildren(document.createElement(field), columnNode);
					else
						document.createTextElement(field,fieldValue, columnNode);
				}
				else if(field.equalsIgnoreCase("GroupClientZipCode")) {
					fieldValue = Node.getData(XPath.getFirstMatch(".//*[local-name()='BillingPostalCode']",null,accountNode));
					if(fieldValue==null)
						fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
					if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
						Node.appendToChildren(document.createElement(field), columnNode);
					else
						document.createTextElement(field,fieldValue, columnNode);
				}
				else if(field.equalsIgnoreCase("GroupClientBusinessPhone")) {
					fieldValue = Node.getData(XPath.getFirstMatch(".//*[local-name()='Phone']",null,accountNode));
					if(fieldValue==null)
						fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
					else {
						fieldValue = fieldValue.replaceAll("[-]+", "");
						fieldValue = fieldValue.replaceAll("\\s+", "");
						if(fieldValue.length()>=10)
							fieldValue = fieldValue.substring(0, 10);
					}
					if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
						Node.appendToChildren(document.createElement(field), columnNode);
					else
						document.createTextElement(field,fieldValue, columnNode);
				}
				else if(field.equalsIgnoreCase("GroupClientFax")) {
					fieldValue = Node.getData(XPath.getFirstMatch(".//*[local-name()='Fax']",null,accountNode));
					if(fieldValue==null)
						fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
					else {
						fieldValue = fieldValue.replaceAll("[-]+", "");
						fieldValue = fieldValue.replaceAll("\\s+", "");
						if(fieldValue.length()>=10)
							fieldValue = fieldValue.substring(0, 10);
					}
					if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
						Node.appendToChildren(document.createElement(field), columnNode);
					else
						document.createTextElement(field,fieldValue, columnNode);
				}
				else
				{
					if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
						fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
					if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
						Node.appendToChildren(document.createElement(field), columnNode);
					else
						document.createTextElement(field,fieldValue, columnNode);
				}
			}
			*/
			//else if(coulmnName.equalsIgnoreCase("MasterPolicyFulfillment") || tableCoulmn.equalsIgnoreCase("Master Policy Fulfillment")) 
			{
				// read wims response
				String screenName="",headerName="",programName="",errorType="",jsonResponse="";
				if(!Node.isValidNode(jsonNode))
				{
					String query="select * from WIMSDataRequest where MasterAppNumber='"+masterApp+"' and GroupNumber='"+groupNumber+"' and CompanyCode='"+companyCode+"' and header='"+tableCoulmn+"'";
					QueryObject qObject=new QueryObject(query);
					qObject.setResultClass(WorksiteUtil.class);
					BusObject busObject=qObject.getObject();
					
					if(busObject!=null)
					{
						screenName=busObject.getStringProperty("ScreenName");
						headerName=busObject.getStringProperty("header");
						programName=busObject.getStringProperty("ProgramName");
						errorType=busObject.getStringProperty("");
					 jsonResponse=busObject.getStringProperty("CurrentScreenData");
					}
					jsonNode=convertJSONErrortoXMLByType(screenName,headerName,programName,errorType,jsonResponse,"IMTask");
				}
				if(Node.isValidNode(XPath.getFirstMatch(".//*[local-name()='"+field+"']",null,LSPData)))  // check if field is available in input
				{
					document.createTextElement(field,fieldValue, columnNode);
				}
				else if(!Node.isValidNode(XPath.getFirstMatch(".//*[local-name()='"+field+"']",null,LSPData)) && Node.isValidNode(XPath.getFirstMatch(".//*[local-name()='"+field+"']",null,jsonNode)))// Check in wims data request if node is not available in input xml
				{
					fieldValue=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='"+field+"']", null, jsonNode), "");
					document.createTextElement(field,fieldValue, columnNode);
				//	Node.appendToChildren(XPath.getFirstMatch(".//*[local-name()='"+field+"']",null,jsonNode), columnNode);
				}
				else
				{
					continue;
				}

				/*				
				if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
				{
					fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
				}
				*/
				//document.createTextElement(field,fieldValue, columnNode);

			}
			/*
			else {
				if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
					fieldValue = (obj.getStringProperty("DefaultValues")==null?"":obj.getStringProperty("DefaultValues"));
				if(fieldValue.isEmpty()&& fieldValue.equalsIgnoreCase("") || fieldValue==null)
					Node.appendToChildren(document.createElement(field), columnNode);
				else
					document.createTextElement(field,fieldValue, columnNode);
			}
			*/
							
		}
		int duplicateNode = Node.clone(columnNode, true);
		Node.appendToChildren(duplicateNode,rootNode);
		Node.delete(columnNode);
		duplicateNode=-1;
		}
		else
			continue;
		
	}
	}catch(Exception ex)
	{
		try {
			Node.delete(rootNode);
			Node.delete(jsonNode);
			rootNode=document.parseString(strRoot);
			document.createTextElement("exception",ex.toString(), rootNode);
		}
		catch(Exception e) {}
		logger.error("Error :"+ex);
	}
	finally
	{
		try
		{
			taskMode=null;companyCode=null;groupNumber=null;masterApp=null;	
		}catch(Exception q)
		{
			logger.error("Error in GSTaskXML method:"+q);
		}
	}
	return rootNode;
	}
	 public static int getSortedMasterAppListForGroup(String GroupID) throws Exception
    {
        String strAppData="",json="",response="",URL="",strQuery="",strAppRoot="<MasterAppInfo></MasterAppInfo>";
    int jsonNode=-1,nodeAppInfo=-1;
    // Refresh teh access token
    response=getSecurityToken("refresh");
    JSONObject tokenObj=new JSONObject(response);
            loadSfConfigurations();
    if(hasKey(tokenObj,"error"))
    {
        String errorText=tokenObj.getString("error")+":"+tokenObj.getString("error_description");
        throw new Exception("Access token is not refreshed, Error- "+errorText);
    }   
   if(!GroupID.isEmpty() || !GroupID.equalsIgnoreCase("")){
           
				URL=APP_SF_QUERY_URI +"select+ID,Name,Master_Application_Status__c,Application_Approval_Date__c,CreatedDate,Payroll_Deduction_Frequency__c+from+Master_Application__c+where+Master_Application_Status__c+IN('Approved','Enrollment+Completed')+AND+Group__c='"+GroupID+"'+order+by+CreatedDate+desc";
logger.error("URL:"+URL);
			

    response=postURLDetails(URL,"GET",true);
                   JSONObject jObj=new JSONObject(response);
        //jsonNode=convertJsonToXml(jObj,"<Data></Data>");
             strAppData=XML.toString(jObj,"MasterAppID");
	jsonNode=document.parseString(strAppData);		 
   }
   else{
	jsonNode=document.parseString(strAppRoot);
   }
    
   
    return jsonNode;    
    }
public static int getMasterAppListForGroup(String GroupID,String taskType) throws Exception
{
    String strAppData="",json="",response="",URL="",strQuery="",strAppRoot="<MasterAppInfo></MasterAppInfo>";
    int jsonNode=-1,nodeAppInfo=-1;
    // Refresh teh access token
    response=getSecurityToken("refresh");
    JSONObject tokenObj=new JSONObject(response);
            loadSfConfigurations();
    if(hasKey(tokenObj,"error"))
    {
        String errorText=tokenObj.getString("error")+":"+tokenObj.getString("error_description");
        throw new Exception("Access token is not refreshed, Error- "+errorText);
    }   
   if(!GroupID.isEmpty() || !GroupID.equalsIgnoreCase("")){
            if(taskType.equalsIgnoreCase("WKS")){
				//URL=APP_SF_QUERY_URI //+"select+ID,Name,Master_Application_Status__c,Application_Approval_Date__c+from+Master_Application__c+where+Master_App_Account__r.LS//P_Group_Number__c='"+GroupID+"'";
				URL=APP_SF_QUERY_URI+"SELECT+Id,(SELECT+ID,Name,Master_Application_Status__c,Application_Approval_Date__c+FROM+Master_Applications__r)FROM+Account+WHERE+Id+in(select+Master_App_Account__c+from+Master_Application__c+where+Master_App_Account__r.LSP_Group_Number__c='"+GroupID+"'+or+Group_Number__c='"+GroupID+"'+or+Group__c='"+GroupID+"')";
			}
			
			else{
				URL=APP_SF_QUERY_URI +"select+ID,Name,Master_Application_Status__c,Application_Approval_Date__c+from+Master_Application__c+where+Master_Application_Status__c=+'Approved'+AND+Group__c='"+GroupID+"'";
			}

    response=postURLDetails(URL,"GET",true);
                   JSONObject jObj=new JSONObject(response);
        //jsonNode=convertJsonToXml(jObj,"<Data></Data>");
             strAppData=XML.toString(jObj,"MasterAppID");
	jsonNode=document.parseString(strAppData);		 
   }
   else{
	jsonNode=document.parseString(strAppRoot);
   }
    
   
    return jsonNode;    
   
}


	private static void allowMethods(String... methods) {
    try {
        Field methodsField = HttpURLConnection.class.getDeclaredField("methods");

        Field modifiersField = Field.class.getDeclaredField("modifiers");
        modifiersField.setAccessible(true);
        modifiersField.setInt(methodsField, methodsField.getModifiers() & ~Modifier.FINAL);

        methodsField.setAccessible(true);

        String[] oldMethods = (String[]) methodsField.get(null);
        Set<String> methodsSet = new LinkedHashSet<>(Arrays.asList(oldMethods));
        methodsSet.addAll(Arrays.asList(methods));
        String[] newMethods = methodsSet.toArray(new String[0]);

        methodsField.set(null/*static field*/, newMethods);
    } catch (NoSuchFieldException | IllegalAccessException e) {
        throw new IllegalStateException(e);
    }
	}

	public static String patchDataByURL(String requestURL, boolean authFlag, String body) 
	{
	
		HttpURLConnection httpConn=null;
		String strResponse = "";
		boolean created=false;
	    try {
	
	    	allowMethods("PATCH");
	        URL url = new URL(requestURL);
	        httpConn = (HttpURLConnection) url.openConnection();
	        
	        httpConn.setRequestMethod("PATCH");
	        httpConn.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
	        httpConn.setRequestProperty("Accept", "application/json");
	        httpConn.setReadTimeout(100000);
	        if(authFlag)
	        {
	        	httpConn.setRequestProperty("Authorization", SF_AUTH_VALUE);
	        }	        
	        httpConn.setDoOutput(true); 
	       // httpConn.setDoInput(true);
	        DataOutputStream writer = new DataOutputStream(httpConn.getOutputStream());
	        writer.write(body.getBytes("UTF-8"));
	        writer.flush();
	        writer.close();
	        int status = httpConn.getResponseCode();
	        
		    if (status == HttpURLConnection.HTTP_OK || status == HttpURLConnection.HTTP_CREATED) {
		    	BufferedReader br1 = new BufferedReader(new InputStreamReader( httpConn.getInputStream())); 
	            StringBuilder response = new StringBuilder(); 
	            String responseSingle = null; 
	            while ((responseSingle = br1.readLine()) != null)  
	            { 
	                response.append(responseSingle); 
	            } 
	            strResponse = response.toString(); 
	            br1.close();
		    } 
		    else  if(status == HttpURLConnection.HTTP_NO_CONTENT)
		    {
		    	strResponse="SUCCESS";
		    }
		    else
	        {
	            BufferedReader br1 = new BufferedReader(new InputStreamReader(httpConn.getErrorStream())); 
	            StringBuilder response = new StringBuilder(); 
	            String responseSingle = null; 
	            while ((responseSingle = br1.readLine()) != null)  
	            { 
	                response.append(responseSingle); 
	            } 
	            strResponse = response.toString();
	            br1.close();
			}
		    
	       
	    } 
	    catch (Exception e) {
	        e.printStackTrace();
	    }
	    finally
	    {
	    	httpConn.disconnect();
	    }
	    return strResponse;
	}
	public void onInsert()
    {
    }

    public void onUpdate()
    {
    }

    public void onDelete()
    {
    }

public static String ReadMailTempletWelcome(String Name,String GroupName,String GroupAddress1,String GroupAddress2,String AEName,String Efectivedate,String ClientEmail,String MonthlyDuration)
{
String data="",EffDate="";
//Added by Chaithanya for OT Upgrade Migration for Filepath changes
//reading filepath configs from xml store
            String fileInDir = "";
                 String args[]={"key"};
		String values[]={"com/cica/worksite/Saleforce_Configurations.xml"};
		SOAPRequestObject srObj=null;
		int responsee=-1;boolean flag=false;
        srObj=new SOAPRequestObject("http://schemas.cordys.com/1.0/xmlstore","GetXMLObject",args,values);
        responsee=srObj.sendAndWait();
		fileInDir = Node.getData(XPath.getFirstMatch(".//*[local-name()='Install_DIR']",null,responsee));

Date convertedDate= new Date();
try {
	//String filename= EIBProperties.getInstallDir()+"\\webroot\\shared\\EmailTemplets\\ExpiditedUWWelcome.html"; // commenting for Ot Upgrade Project
	String filename= fileInDir+"\\EmailTemplets\\ExpiditedUWWelcome.html";
      File myObj = new File(filename);
      Scanner myReader = new Scanner(myObj);
      while (myReader.hasNextLine()) {
       data = data+myReader.nextLine();
SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
SimpleDateFormat dateFormat1 = new SimpleDateFormat("MM/dd/yyyy");
 convertedDate = dateFormat.parse(Efectivedate);
Calendar c = Calendar.getInstance();
MonthlyDuration = MonthlyDuration.replace(";","; ");
										c.setTime(convertedDate);
										//c.set(Calendar.DAY_OF_MONTH, c.getActualMaximum(Calendar.DAY_OF_MONTH));
										EffDate=dateFormat1.format(c.getTime());
        
      }
      myReader.close();
    } catch (Exception e) {
       logger.error("File Not Found!");
     

    }
GroupAddress1=GroupAddress1.replaceAll("\\n", "<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
data = data.replace("ToName_Variable",Name);
data = data.replace("EfectiveDate_variable",EffDate);
data = data.replace("GroupName_Variable",GroupName);
data = data.replace("GroupAddress_variable1",GroupAddress1);
data = data.replace("GroupAddress_variable2",GroupAddress2);
data = data.replace("AEName_Variable",AEName);
data = data.replace("ClientEmail_Variable",ClientEmail);
data = data.replace("MONTHLY_duration_Variable",MonthlyDuration);
return data;
}


public static int getRecipientsToList(String ToList) throws XMLException,UnsupportedEncodingException{
	String[] ListOFToAdress = ToList.split(",");
	
	int toLength= ListOFToAdress.length;
	
    int TonodeAppInfo=document.parseString("<to></to>"); 
if(! ToList.isEmpty()){
for (int i=0;i<toLength;i++)
{
String Todata = "<address><emailAddress>"+ListOFToAdress[i]+"</emailAddress><displayName>"+ListOFToAdress[i]+"</displayName></address>" ;	
Node.appendToChildren(document.parseString(Todata), TonodeAppInfo);
}
}
    
	return TonodeAppInfo;
}


public static int getRecipientsCCList(String CCList) throws XMLException,UnsupportedEncodingException{
	String[] ListOFToAdress = CCList.split(",");
	
	int toLength= ListOFToAdress.length;
	
    int TonodeAppInfo=document.parseString("<cc></cc>"); 
if(! CCList.isEmpty()){
for (int i=0;i<toLength;i++)
{
	if(ListOFToAdress[i]!=null && !ListOFToAdress[i].equalsIgnoreCase(""))
	{
String Todata = "<address><emailAddress>"+ListOFToAdress[i]+"</emailAddress><displayName>"+ListOFToAdress[i]+"</displayName></address>" ;	
Node.appendToChildren(document.parseString(Todata), TonodeAppInfo);
}
}
  }  
	return TonodeAppInfo;
}




public static int getRecipientsBCCList(String BCCList) throws XMLException,UnsupportedEncodingException{
	String[] ListOFToAdress = BCCList.split(",");
	
	int toLength= ListOFToAdress.length;
	
    int TonodeAppInfo=document.parseString("<bcc></bcc>"); 
if(! BCCList.isEmpty()){
for (int i=0;i<toLength;i++)
{
String Todata = "<address><emailAddress>"+ListOFToAdress[i]+"</emailAddress><displayName>"+ListOFToAdress[i]+"</displayName></address>" ;	
Node.appendToChildren(document.parseString(Todata), TonodeAppInfo);
}
  }  
	return TonodeAppInfo;
}


 public static int getXmlToPassDataToSF(String fieldNameList, String fieldValueList) throws XMLException,UnsupportedEncodingException
    {
       String[] FieldNames = fieldNameList.split("~/~");
       String[] FieldValues = fieldValueList.split("~/~",-1);
	int toLength= FieldValues.length;
	
    int XMLDataFormat=document.parseString("<Fields></Fields>"); 
if(! fieldValueList.isEmpty()){
for (int i=0;i<toLength;i++)
{
//FieldNames[i]=FieldNames[i].replaceAll("&", "ampersand");
//FieldValues[i]=FieldValues[i].replaceAll("&", "ampersand");
String Todata = "<Field><Name>"+FieldNames[i]+"</Name><Value>"+FieldValues[i]+"</Value></Field>" ;	
Node.appendToChildren(document.parseString(Todata), XMLDataFormat);
}
  }  
	return XMLDataFormat;
    }

	public static String getDateDifference(String dateParam1,String dateParam2,int Noofbusinessdays) throws Exception
	{
		String duration="";
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");		

		if(dateParam1.length()>1 || Noofbusinessdays>1)
		{
		//SimpleDateFormat date>1Format = new SimpleDateFormat("yyyy-MM-dd");		
		Calendar startDate = Calendar.getInstance();
		Calendar endDate=Calendar.getInstance();

		
		 	String pattern = "yyyy-MM-dd";
		String todaydate =new SimpleDateFormat(pattern).format(new Date());
		dateParam2=todaydate;
		int daysBetween = 0;
		
		
		if(dateParam1.length()<=0 && Noofbusinessdays<=0)
		{
			return dateParam1;
		}
		if(dateParam1.length()>0)
		{
		/*try
		{
			startDate.setTime(dateFormat.parse(dateParam1));		
			//endDate.setTime(dateFormat.parse(dateParam2));
			//endDate.setTime(new Date());
		}catch(Exception e)
		{
			throw new Exception("The date should be in YYYY-MM-DD format");
		}		
		if(startDate.before(endDate))
		{
			logger.log(Severity.ERROR,"startDate.before(endDate)");
			while (startDate.before(endDate)) 
			{  
				startDate.add(Calendar.DAY_OF_MONTH, 1);  
			    daysBetween++;  
			}  
		}
		else
		{
			while (endDate.before(startDate)) 
			{  
		logger.log(Severity.ERROR,"endDate.before(startDate)");
				endDate.add(Calendar.DAY_OF_MONTH, 1);  
			    daysBetween++;  
			}  
		}	*/	
		Date d1;
		Date d2;
		d2=dateFormat.parse(dateParam1);
		d1=new Date();
		 int daysdiff = 0;
		 if(d2.getTime()>d1.getTime())
		 {
    long diff = d2.getTime() - d1.getTime();
    long diffDays = diff / (24 * 60 * 60 * 1000) + 1;
    daysdiff = (int) diffDays;
	daysBetween=daysdiff;
		 }
	
				if(dateParam1.length()>1 && Noofbusinessdays<1)
				{
					duration=(daysBetween>0)?"P"+daysBetween+"D":"";	
					return duration ;
				}	
		}
		int j = 0;
		if(dateParam1.length()>1 && Noofbusinessdays>1)
		{
			 j  = daysBetween;
		}
		Calendar cal = Calendar.getInstance();
		if(dateParam1.length()>0){
		Date d1;
		Date d2;
		d2=dateFormat.parse(dateParam1);
		d1=new Date();
	if(d2.getTime()>d1.getTime())
		 {
    cal.setTime(d2);
		 }
		 }
		 
		int currentDay=0;

		for(int i =0;i<Noofbusinessdays;)
	{
		cal.add(Calendar.DAY_OF_MONTH,1);
		 currentDay = cal.get(Calendar.DAY_OF_WEEK);
		if(currentDay == Calendar.SUNDAY || currentDay == Calendar.SATURDAY)
		{
				
		}
		else 
		{
			i++;
		}
		j++;
	}
		  if(Noofbusinessdays>0)
		  {
			duration=(j>0)?"P"+j+"D":"";	
		  }

		
			}
	          return duration;

	}
	public static String formatPlanString(String planId)
	{
		String returnVal="";
		if(planId!=null)
		{
			String[] nameArray=planId.split(",");
			Set<String> set=new HashSet();
			for (String string : nameArray) {
				//set.add(string);
				if(string!=null && !string.equalsIgnoreCase(""))
				{
					set.add(string);
				}
			}		
			Iterator<String> itr=set.iterator();
			while(itr.hasNext())
			{
				returnVal=returnVal+itr.next()+",";
				
			}
			//returnVal=returnVal.substring(0, returnVal.lastIndexOf(","));
			if(returnVal!=null && !returnVal.equalsIgnoreCase(""))
			{
				returnVal=returnVal.substring(0, returnVal.lastIndexOf(","));
			}
		}
		return returnVal;
	}

	 public static int frameSFXmlData(int payLoad) throws Exception {
		    int rootNode = -1, masterAppNode = -1, response = -1;
		    String companyCode = "", groupNumber = "", masterApp = "", masterAppNo = "", primaryState = "", dirClass = "", opMode = "", caseType = "", screenName = "", levelForCI="", benefitElimination="", ihcFunding="", ihcHospAdmission="";
		    JSONObject objPlanId = null, objProductInfo = null, tempObject = null, productJSON = null, objeProductInfo = null, objTabs = null, objBillingRemittance = null, objeBillingRemittance = null, objEnrollment = null, objeEnrollment = null;
		    try {
		      rootNode = document.parseString("<inputXML></inputXML>");
		      companyCode = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='KeyCompanyCode']", null, payLoad), "");
		      groupNumber = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='KeyGroupNumber']", null, payLoad), "");
		      masterApp = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='KeyMasterApp']", null, payLoad), "");
				levelForCI = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='levelForCI']", null, payLoad), "");
			  benefitElimination = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='beneDurationElim']", null, payLoad), "");
			  ihcFunding = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='IHCFunding']", null, payLoad), "");
			  ihcHospAdmission =  Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='IHCHospAdmission']", null, payLoad), "");			  
		      screenName = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='ScreenName']", null, payLoad), "");
		      opMode = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='OperationMode']", null, payLoad), "");
		      if (masterApp == null || masterApp.equalsIgnoreCase(""))
		        throw new Exception("The master app number is not valid"); 
		      Node.createTextElement("KeyCompanyCode", companyCode, rootNode);
		      Node.createTextElement("keyGroupNumber", groupNumber, rootNode);
		      Node.createTextElement("KeyMasterApp", masterApp, rootNode);
		      String masterQuery = "Select MasterAppNo,CaseHandlingType from WKSOPSCase where ApplicationType='" + masterApp + "'";
		      QueryObject masterQueryobj = new QueryObject(masterQuery);
		      BusObject masterObj = masterQueryobj.getObject();
		      if (masterObj == null)
		        throw new Exception("The master app details are not available in the WIMS"); 
		      masterAppNo = masterObj.getStringProperty("MasterAppNo");
		      caseType = masterObj.getStringProperty("CaseHandlingType");
		      masterAppNode = getMasterAppObjectById(masterAppNo);
		      if (!Node.isValidNode(masterAppNode))
		        throw new Exception("Master app details are not available in salesforce"); 
int[] contactsNode = XPath.getMatchingNodes(".//*[local-name()='AccountContact']", null, masterAppNode);
		      String qryText = "select * from SFDataRequest where MasterAppNumber='" + masterApp + "' and GroupNumber='" + groupNumber + "' and CompanyCode='" + companyCode + "' and Tab in ('PlanID','ProductInfo','EProductInfo','BillingRemittance','EBillingRemittance','Enrollment','EEnrollment')";
		      QueryObject qObject = new QueryObject(qryText);
		      qObject.setResultClass(WorksiteUtil.class);
		      BusObjectIterator itrProductObject = qObject.getObjects();
		      if (itrProductObject.hasMoreElements()) {
		        opMode = "UPDATE";
		        while (itrProductObject.hasMoreElements()) {
		          BusObject object = itrProductObject.nextElement();
		          if (object != null) {
		            String planName = object.getStringProperty("Tab");
		            if (planName != null && !planName.equalsIgnoreCase("") && planName.equalsIgnoreCase("PlanID")) {
		              String str = object.getStringProperty("SFData");
		              tempObject = new JSONObject(str);
		              str = getJSONKeyValue(tempObject, planName);
		              objPlanId = new JSONObject(str);
		              continue;
		            } 
		            if (planName != null && !planName.equalsIgnoreCase("") && planName.equalsIgnoreCase("ProductInfo")) {
		              String str = object.getStringProperty("SFData");
		              tempObject = new JSONObject(str);
		              str = getJSONKeyValue(tempObject, planName);
		              objProductInfo = new JSONObject(str);
		              continue;
		            } 
		            if (planName != null && !planName.equalsIgnoreCase("") && planName.equalsIgnoreCase("EProductInfo")) {
		              String str = object.getStringProperty("SFData");
		              tempObject = new JSONObject(str);
		              str = getJSONKeyValue(tempObject, planName);
		              objeProductInfo = new JSONObject(str);
		              continue;
		            } 
		            if (planName != null && !planName.equalsIgnoreCase("") && planName.equalsIgnoreCase("BillingRemittance")) {
		              String str = object.getStringProperty("SFData");
		              tempObject = new JSONObject(str);
		              str = getJSONKeyValue(tempObject, planName);
		              objBillingRemittance = new JSONObject(str);
		              str = getJSONKeyValue(objBillingRemittance, planName);
		              objBillingRemittance = new JSONObject(str);
		              continue;
		            } 
		            if (planName != null && !planName.equalsIgnoreCase("") && planName.equalsIgnoreCase("EBillingRemittance")) {
		              String str = object.getStringProperty("SFData");
		              tempObject = new JSONObject(str);
		              str = getJSONKeyValue(tempObject, planName);
		              objeBillingRemittance = new JSONObject(str);
		              str = getJSONKeyValue(objeBillingRemittance, planName);
		              objeBillingRemittance = new JSONObject(str);
		              continue;
		            } 
		            if (planName != null && !planName.equalsIgnoreCase("") && planName.equalsIgnoreCase("Enrollment")) {
		              String str = object.getStringProperty("SFData");
		              tempObject = new JSONObject(str);
		              str = getJSONKeyValue(tempObject, planName);
		              objEnrollment = new JSONObject(str);
		              str = getJSONKeyValue(objEnrollment, "EnrollmentDetails");
		              objEnrollment = new JSONObject(str);
		              continue;
		            } 
		            if (planName != null && !planName.equalsIgnoreCase("") && planName.equalsIgnoreCase("EEnrollment")) {
		              String str = object.getStringProperty("SFData");
		              tempObject = new JSONObject(str);
		              str = getJSONKeyValue(tempObject, planName);
		              objeEnrollment = new JSONObject(str);
		              str = getJSONKeyValue(objeEnrollment, "EEnrollmentDetails");
		              objeEnrollment = new JSONObject(str);
		              continue;
		            } 
		            String jsonString = object.getStringProperty("SFData");
		            tempObject = new JSONObject(jsonString);
		            jsonString = getJSONKeyValue(tempObject, planName);
		            objTabs = new JSONObject(jsonString);
		          } 
		        } 
		      } else {
		        opMode = "INSERT";
		      } 
		      primaryState = Node.getData(XPath.getFirstMatch(".//*[local-name()='Situs_State__c']", null, masterAppNode));
		      dirClass = Node.getData(XPath.getFirstMatch(".//*[local-name()='DI_Rating_Class__c']", null, masterAppNode));
				String benefitDuration="", elimPeriod="";							  
				//updated since SF combined Elemination Period and Benefit Duration
		      /*String elimPeriod = Node.getData(XPath.getFirstMatch(".//*[local-name()='DC_Elimination_Period__c']", null, masterAppNode));
		      String benefitDuration = Node.getData(XPath.getFirstMatch(".//*[local-name()='DC_Benefit_Duration__c']", null, masterAppNode));*/
		      String indAccOption = Node.getData(XPath.getFirstMatch(".//*[local-name()='Ind_Acc_Option__c']", null, masterAppNode));
		      benefitDuration = (benefitDuration != null) ? benefitDuration.replaceAll("[^\\d.)(]", "") : "";
		      if (screenName != null && !screenName.equalsIgnoreCase("")) {
		        String queryText = "select distinct Tab from SFFieldsValidations where ScreenName='" + screenName + "'";
		        QueryObject columnQueryobj = new QueryObject(queryText);
		        BusObjectIterator<BusObject> headerObjects = columnQueryobj.getObjects();
		        while (headerObjects.hasMoreElements()) {
		          BusObject headerObject = headerObjects.nextElement();
		          String tabName = headerObject.getStringProperty("Tab");
		          if (tabName != null && !tabName.equalsIgnoreCase("")) {
		            if (!Node.isValidNode(XPath.getFirstMatch(".//*[local-name()='" + tabName + "']", null, rootNode)));
		            queryText = "select * from SFFieldsValidations where Tab='" + tabName + "'";
		            columnQueryobj = new QueryObject(queryText);
		            BusObjectIterator<BusObject> groupHeaderObjects = columnQueryobj.getObjects();
		            while (groupHeaderObjects.hasMoreElements()) {
		              BusObject busObject = groupHeaderObjects.nextElement();
		              String fieldName = busObject.getStringProperty("Field");
		              String sourceField = busObject.getStringProperty("SourceField");
		              fieldName = (fieldName == null) ? "" : fieldName;
		              fieldName = fieldName.replaceAll("\\s+", "");
		              String groupHeader = busObject.getStringProperty("GroupHeader");
		              groupHeader = (groupHeader == null) ? "" : groupHeader;
		              groupHeader = groupHeader.replaceAll("\\s+", "");
		              String productType = "";
		              if (tabName != null && tabName.equalsIgnoreCase("PlanId")) {
		                productType = getJSONKeyValue(objPlanId, groupHeader);
		              } else if (tabName != null && tabName.equalsIgnoreCase("EProductInfo")) {
		                productType = getJSONKeyValue(objeProductInfo, groupHeader);
		              } else {
		                productType = getJSONKeyValue(objProductInfo, groupHeader);
		              } 
		              if (fieldName != null && !fieldName.equalsIgnoreCase("")) {
		                String fieldValue = "";
		                fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='" + fieldName + "']", null, rootNode), "");
		                String updatedPlanIds = "";
		                if (Node.isValidNode(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad))) {
		                  updatedPlanIds = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad), "");
		                } else if (productType != null && !productType.equalsIgnoreCase("")) {
		                  JSONObject obj2 = new JSONObject(productType);
		                  if (hasKey(obj2, fieldName))
		                    updatedPlanIds = getJSONKeyValue(obj2, fieldName); 
		                } 
		                if (fieldValue == null || fieldValue.equalsIgnoreCase("")) {
		                  if (groupHeader.equalsIgnoreCase("CompensationDetails") && (screenName.equalsIgnoreCase("IMTask") || screenName.equalsIgnoreCase("PIDTask"))) {
		                    switch (fieldName) {
		                      case "Cica":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Contract_Code_CICA__c']", null, masterAppNode), "");
		                        document.createTextElement(sourceField, fieldValue, rootNode);
		                        continue;
		                      case "NonCica":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Contract_Code_Non_CICA__c']", null, masterAppNode), "");
		                        document.createTextElement(sourceField, fieldValue, rootNode);
		                        continue;
		                      case "GrpDetAttachedDate":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Compensation_Detail_Attached_Date__c']", null, masterAppNode), "");
		                        document.createTextElement(sourceField, fieldValue, rootNode);
		                        continue;
		                      case "compStructure":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Broker_Compensation__c']", null, masterAppNode), "");
		                        document.createTextElement(sourceField, fieldValue, rootNode);
		                        continue;
		                      case "GrpCommLevel":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Commission_Code__c']", null, masterAppNode), "");
		                        document.createTextElement(sourceField, fieldValue, rootNode);
		                        continue;
		                    } 
		                    fieldValue = "";
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("ECompensationDetails") && screenName.equalsIgnoreCase("UWCase")) {
		                    switch (fieldName) {
		                      case "ECica":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Contract_Code_CICA__c']", null, masterAppNode), "");
		                        document.createTextElement(sourceField, fieldValue, rootNode);
		                        continue;
		                      case "ENonCica":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Contract_Code_Non_CICA__c']", null, masterAppNode), "");
		                        document.createTextElement(sourceField, fieldValue, rootNode);
		                        continue;
		                      case "EGrpDetAttachedDate":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Compensation_Detail_Attached_Date__c']", null, masterAppNode), "");
		                        document.createTextElement(sourceField, fieldValue, rootNode);
		                        continue;
		                      case "EcompStructure":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Broker_Compensation__c']", null, masterAppNode), "");
		                        document.createTextElement(sourceField, fieldValue, rootNode);
		                        continue;
		                      case "EGrpCommLevel":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Commission_Code__c']", null, masterAppNode), "");
		                        document.createTextElement(sourceField, fieldValue, rootNode);
		                        continue;
		                    } 
		                    fieldValue = "";
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("ProdDetailsOther") && (screenName.equalsIgnoreCase("IMTask") || screenName.equalsIgnoreCase("PIDTask"))) {
		                    switch (fieldName) {
		                      case "primaryState1":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Primary_State_Location__c']", null, masterAppNode), "");
		                        break;
		                      case "statesEnrolling1":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='States_Enrolling__c']", null, masterAppNode), "");
		                        break;
		                      case "statesState1":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Situs_State__c']", null, masterAppNode), "");
		                        break;
		                      case "situsType1":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Situs_Type__c']", null, masterAppNode), "");
		                        break;
		                      case "attachedGIAgreement1":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Attached_Guaranteed_Issue_Agreement__c']", null, masterAppNode), "");
		                        break;
		                      case "prodReplacedDiscon1":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Products_Being_Replaced_Discontinued__c']", null, masterAppNode), "");
		                        break;
		                      case "underwritingNotes1":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Additional_Underwriting_Comments__c']", null, masterAppNode), "");
		                        break;
		                      default:
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("EProdDetailsOther") && screenName.equalsIgnoreCase("UWCase")) {
		                    switch (fieldName) {
		                      case "EprimaryState1":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Primary_State_Location__c']", null, masterAppNode), "");
		                        break;
		                      case "EstatesEnrolling1":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='States_Enrolling__c']", null, masterAppNode), "");
		                        break;
		                      case "EstatesState1":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Situs_State__c']", null, masterAppNode), "");
		                        break;
		                      case "EsitusType1":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Situs_Type__c']", null, masterAppNode), "");
		                        break;
		                      case "EattachedGIAgreement1":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Attached_Guaranteed_Issue_Agreement__c']", null, masterAppNode), "");
		                        break;
		                      case "EprodReplacedDiscon1":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Products_Being_Replaced_Discontinued__c']", null, masterAppNode), "");
		                        break;
		                      case "EunderwritingNotes1":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Additional_Underwriting_Comments__c']", null, masterAppNode), "");
		                        break;
		                      default:
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("ContactDetails") && (screenName.equalsIgnoreCase("IMTask") || screenName.equalsIgnoreCase("PIDTask"))) {
		                    switch (fieldName) {
		                      case "GrpGroupContact":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Implementation_Contact__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpBroker":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='BrokerName']", null, masterAppNode), "");
		                        break;
		                      case "GrpSalesContact":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Sales_Contact__c']", null, masterAppNode), "");
		                        break;
		                      case "brokerEmail":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='BrokerEmail']", null, masterAppNode), "");
		                        break;
		                      case "GrpClientName":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='ClientName']", null, masterAppNode), "");
		                        break;
		                      case "GrpClientEmail":
		                        //fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Client_Email__c']", null, masterAppNode), "");
								fieldValue = (contactsNode.length>0)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Email']", null, contactsNode[0]), ""):"";
		                        break;
		                      case "GrpClientPhone":
		                        //fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='ClientPhone']", null, masterAppNode), "");
								fieldValue = (contactsNode.length>0)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Phone']", null, contactsNode[0]), ""):"";
		                        break;
		                      case "GrpClientAddress":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='ClientAddress']", null, masterAppNode), "");
		                        break;
		                      case "GrpContactName1":
			                        fieldValue = (contactsNode.length>0)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Name']", null, contactsNode[0]), ""):"";
			                        break;
			                  case "GrpContactTitle1":
			                	  fieldValue = (contactsNode.length>0)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Title']", null, contactsNode[0]), ""):"";
			                        break;
			                  case "GrpContactEmail1":
			                	  fieldValue = (contactsNode.length>0)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Email']", null, contactsNode[0]), ""):"";
			                        break;
			                  case "GrpContactPhone1":
			                	  fieldValue = (contactsNode.length>0)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Phone']", null, contactsNode[0]), ""):"";
			                        break;
			                  case "GrpContactName2":
			                	  fieldValue = (contactsNode.length>1)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Name']", null, contactsNode[1]), ""):"";
				                        break;
				              case "GrpContactTitle2":
				            	  fieldValue = (contactsNode.length>1)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Title']", null, contactsNode[1]), ""):"";
				                        break;
				              case "GrpContactEmail2":
				            	  fieldValue = (contactsNode.length>1)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Email']", null, contactsNode[1]), ""):"";
				                        break;
				              case "GrpContactPhone2":
				            	  fieldValue = (contactsNode.length>1)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Phone']", null, contactsNode[1]), ""):"";
				                        break;
		                      default:
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("EContactDetails") && screenName.equalsIgnoreCase("UWCase")) {
		                    switch (fieldName) {
		                      case "EGrpGroupContact":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Implementation_Contact__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpBroker":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='BrokerName']", null, masterAppNode), "");
		                        break;
		                      case "EGrpSalesContact":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Sales_Contact__c']", null, masterAppNode), "");
		                        break;
		                      case "EbrokerEmail":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='BrokerEmail']", null, masterAppNode), "");
		                        break;
		                      case "EGrpClientName":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='ClientName']", null, masterAppNode), "");
		                        break;
		                      case "EGrpClientEmail":
		                        //fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Client_Email__c']", null, masterAppNode), "");
								fieldValue = (contactsNode.length>0)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Email']", null, contactsNode[0]), ""):"";
		                        break;
		                      case "EGrpClientPhone":
		                        //fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='ClientPhone']", null, masterAppNode), "");
								fieldValue = (contactsNode.length>0)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Phone']", null, contactsNode[0]), ""):"";
		                        break;
		                      case "EGrpClientAddress":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='ClientAddress']", null, masterAppNode), "");
		                        break;
		                      case "EGrpContactName1":
			                        fieldValue = (contactsNode.length>0)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Name']", null, contactsNode[0]), ""):"";
			                        break;
			                  case "EGrpContactTitle1":
			                	  fieldValue = (contactsNode.length>0)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Title']", null, contactsNode[0]), ""):"";
			                        break;
			                  case "EGrpContactEmail1":
			                	  fieldValue = (contactsNode.length>0)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Email']", null, contactsNode[0]), ""):"";
			                        break;
			                  case "EGrpContactPhone1":
			                	  fieldValue = (contactsNode.length>0)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Phone']", null, contactsNode[0]), ""):"";
			                        break;
			                  case "EGrpContactName2":
			                	  fieldValue = (contactsNode.length>1)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Name']", null, contactsNode[1]), ""):"";
				                        break;
				              case "EGrpContactTitle2":
				            	  fieldValue = (contactsNode.length>1)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Title']", null, contactsNode[1]), ""):"";
				                        break;
				              case "EGrpContactEmail2":
				            	  fieldValue = (contactsNode.length>1)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Email']", null, contactsNode[1]), ""):"";
				                        break;
				              case "EGrpContactPhone2":
				            	  fieldValue = (contactsNode.length>1)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Phone']", null, contactsNode[1]), ""):"";
				                        break;	
		                      default:
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("IncomeProtector") && (screenName.equalsIgnoreCase("IMTask") || screenName.equalsIgnoreCase("PIDTask"))) {
		                    switch (fieldName) {
		                      case "IncomeProtectorTakeover":
		                        if (productType != null && !productType.equalsIgnoreCase("")) {
		                          JSONObject obj2 = new JSONObject(productType);
		                          if (hasKey(obj2, fieldName)) {
		                            fieldValue = getJSONKeyValue(obj2, fieldName);
		                            break;
		                          } 
		                          fieldValue = "";
		                          break;
		                        } 
		                        fieldValue = "";
		                        break;
		                      default:
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("CombinedProducts") && (screenName.equalsIgnoreCase("IMTask") || screenName.equalsIgnoreCase("PIDTask"))) {
		                    switch (fieldName) {
		                      case "CombinedProductsVal":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Combined_Products__c']", null, masterAppNode), "");
								fieldValue=(fieldValue!=null && !fieldValue.equalsIgnoreCase("") && fieldValue.equalsIgnoreCase("null") && fieldValue.equalsIgnoreCase("none"))?"":fieldValue;
		                        break;
		                      default:
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("AceHighDeductibleBuffer") && (screenName.equalsIgnoreCase("IMTask") || screenName.equalsIgnoreCase("PIDTask"))) {
		                    switch (fieldName) {
		                      case "bufferValue":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_ACE_Products__c']", null, masterAppNode), "");
								fieldValue=(fieldValue!=null && !fieldValue.equalsIgnoreCase("") && fieldValue.equalsIgnoreCase("null") && fieldValue.equalsIgnoreCase("none"))?"":fieldValue;
		                        break;
		                      default:
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("GrpAccChampion") && (screenName.equalsIgnoreCase("IMTask") || screenName.equalsIgnoreCase("PIDTask"))) {
		                    switch (fieldName) {
		                      case "grpAccChampVal":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Group_Accident__c']", null, masterAppNode), "");
		                        break;
		                      default:
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("LifetimeBenefitTerm") && (screenName.equalsIgnoreCase("IMTask") || screenName.equalsIgnoreCase("PIDTask"))) {
		                    switch (fieldName) {
		                      case "LBTRiders":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_LBT_Riders__c']", null, masterAppNode), "");
		                        break;
		                      case "SelmanMarketCode":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Selman_Market_Code__c']", null, masterAppNode), "");
		                        break;
		                      case "LBTTakeover":
		                        if (productType != null && !productType.equalsIgnoreCase("")) {
		                          JSONObject obj2 = new JSONObject(productType);
		                          if (hasKey(obj2, fieldName)) {
		                            fieldValue = getJSONKeyValue(obj2, fieldName);
		                            break;
		                          } 
		                          fieldValue = "";
		                          break;
		                        } 
		                        fieldValue = "";
		                        break;
		                      case "enrollmentEffDate":
		                        if (productType != null && !productType.equalsIgnoreCase("")) {
		                          JSONObject obj2 = new JSONObject(productType);
		                          if (hasKey(obj2, fieldName)) {
		                            fieldValue = getJSONKeyValue(obj2, fieldName);
		                            break;
		                          } 
		                          fieldValue = "";
		                          break;
		                        } 
		                        fieldValue = "";
		                        break;
		                      default:
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("EIncomeProtector") && screenName.equalsIgnoreCase("UWCase")) {
		                    switch (fieldName) {
		                      case "EIncomeProtectorTakeover":
		                        if (productType != null && !productType.equalsIgnoreCase("")) {
		                          JSONObject obj2 = new JSONObject(productType);
		                          if (hasKey(obj2, fieldName)) {
		                            fieldValue = getJSONKeyValue(obj2, fieldName);
		                            break;
		                          } 
		                          fieldValue = "";
		                          break;
		                        } 
		                        fieldValue = "";
		                        break;
		                      default:
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("ECombinedProducts") && screenName.equalsIgnoreCase("UWCase")) {
		                    switch (fieldName) {
		                      case "ECombinedProductsVal":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Combined_Products__c']", null, masterAppNode), "");
		                        break;
		                      default:
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("EAceHighDeductibleBuffer") && screenName.equalsIgnoreCase("UWCase")) {
		                    switch (fieldName) {
		                      case "EbufferValue":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_ACE_Products__c']", null, masterAppNode), "");
								fieldValue=(fieldValue!=null && !fieldValue.equalsIgnoreCase("") && fieldValue.equalsIgnoreCase("null") && fieldValue.equalsIgnoreCase("none"))?"":fieldValue;
		                        break;
		                      default:
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("EGrpAccChampion") && screenName.equalsIgnoreCase("UWCase")) {
		                    switch (fieldName) {
		                      case "EgrpAccChampVal":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Group_Accident__c']", null, masterAppNode), "");
		                        break;
		                      default:
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("ELifetimeBenefitTerm") && screenName.equalsIgnoreCase("UWCase")) {
		                    switch (fieldName) {
		                      case "ELBTRiders":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_LBT_Riders__c']", null, masterAppNode), "");
		                        break;
		                      case "ESelmanMarketCode":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Selman_Market_Code__c']", null, masterAppNode), "");
		                        break;
		                      case "ELBTTakeover":
		                        if (productType != null && !productType.equalsIgnoreCase("")) {
		                          JSONObject obj2 = new JSONObject(productType);
		                          if (hasKey(obj2, fieldName)) {
		                            fieldValue = getJSONKeyValue(obj2, fieldName);
		                            break;
		                          } 
		                          fieldValue = "";
		                          break;
		                        } 
		                        fieldValue = "";
		                        break;
		                      case "EenrollmentEffDate":
		                        if (productType != null && !productType.equalsIgnoreCase("")) {
		                          JSONObject obj2 = new JSONObject(productType);
		                          if (hasKey(obj2, fieldName)) {
		                            fieldValue = getJSONKeyValue(obj2, fieldName);
		                            break;
		                          } 
		                          fieldValue = "";
		                          break;
		                        } 
		                        fieldValue = "";
		                        break;
		                      default:
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("Other") && (screenName.equalsIgnoreCase("IMTask") || screenName.equalsIgnoreCase("PIDTask"))) {
		                    switch (fieldName) {
		                      case "GrpTotalNoEmp":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Number_of_Employees__c']", null, masterAppNode), "");
		                        break;
		                      default:
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("EOther") && screenName.equalsIgnoreCase("UWCase")) {
		                    switch (fieldName) {
		                      case "EGrpTotalNoEmp":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Number_of_Employees__c']", null, masterAppNode), "");
		                        break;
		                      default:
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("EnrollmentDetails") && (screenName.equalsIgnoreCase("IMTask") || screenName.equalsIgnoreCase("PIDTask"))) {
		                    switch (fieldName) {
		                      case "GrpEnSystems":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Enrollment_Systems_Used__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpEnStartDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Enrollment_Start_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpEnEndDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Enrollment_End_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpEnrollmentMethodology":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Enrollment_Methodology__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpCaseStrategy":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Case_Strategy__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpBrochureType":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Brochure_Type__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpWorkCompleted":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Work_Completed__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpChangeFileLSP":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Receive_a_Change_File_from_LSP__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpIncomeReqFT":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Income_Requirements_Full_Time__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpIncomeReqPT":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Income_Requirements_Part_Time__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpMinHrsWeekFT":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Minimum_Hours_per_week_Full_Time_Part__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpMinLenService":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Minimum_Length_of_Service_Days__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpExpIssueReq":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Express_Issue_Requested__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpGuaranIssueReq":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Guaranteed_Issue_Requested__c']", null, masterAppNode), "");
		                        break;
		                      case "perpetualEnrollment":
		                        if (objEnrollment != null)
		                          fieldValue = getJSONKeyValue(objEnrollment, fieldName); 
		                        break;
		                      case "censusToBeProvided":
		                        if (objEnrollment != null)
		                          fieldValue = getJSONKeyValue(objEnrollment, fieldName); 
		                        break;
		                      case "benefitWaitPeriod":
		                        if (objEnrollment != null)
		                          fieldValue = getJSONKeyValue(objEnrollment, fieldName); 
		                        break;
		                      case "newHireBenefitWaitPeriod":
		                        if (objEnrollment != null)
		                          fieldValue = getJSONKeyValue(objEnrollment, fieldName); 
		                        break;
		                      case "newHireEnrollmentWindow":
		                        if (objEnrollment != null)
		                          fieldValue = getJSONKeyValue(objEnrollment, fieldName); 
		                        break;
		                      case "newHireServiceWaitPeriod":
		                        if (objEnrollment != null)
		                          fieldValue = getJSONKeyValue(objEnrollment, fieldName); 
		                        break;
		                      default:
		                        if (objEnrollment != null) {
		                          fieldValue = getJSONKeyValue(objEnrollment, fieldName);
		                          break;
		                        } 
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("EEnrollmentDetails") && screenName.equalsIgnoreCase("UWCase")) {
		                    switch (fieldName) {
		                      case "EGrpEnSystems":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Enrollment_Systems_Used__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpEnStartDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Enrollment_Start_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpEnEndDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Enrollment_End_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpEnrollmentMethodology":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Enrollment_Methodology__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpCaseStrategy":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Case_Strategy__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpBrochureType":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Brochure_Type__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpWorkCompleted":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Work_Completed__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpChangeFileLSP":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Receive_a_Change_File_from_LSP__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpIncomeReqFT":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Income_Requirements_Full_Time__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpIncomeReqPT":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Income_Requirements_Part_Time__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpMinHrsWeekFT":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Minimum_Hours_per_week_Full_Time_Part__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpMinLenService":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Minimum_Length_of_Service_Days__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpExpIssueReq":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Express_Issue_Requested__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpGuaranIssueReq":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Guaranteed_Issue_Requested__c']", null, masterAppNode), "");
		                        break;
		                      case "EperpetualEnrollment":
		                        if (objeEnrollment != null)
		                          fieldValue = getJSONKeyValue(objeEnrollment, fieldName); 
		                        break;
		                      case "EcensusToBeProvided":
		                        if (objeEnrollment != null)
		                          fieldValue = getJSONKeyValue(objeEnrollment, fieldName); 
		                        break;
		                      case "EbenefitWaitPeriod":
		                        if (objeEnrollment != null)
		                          fieldValue = getJSONKeyValue(objeEnrollment, fieldName); 
		                        break;
		                      case "EnewHireBenefitWaitPeriod":
		                        if (objeEnrollment != null)
		                          fieldValue = getJSONKeyValue(objeEnrollment, fieldName); 
		                        break;
		                      case "EnewHireEnrollmentWindow":
		                        if (objeEnrollment != null)
		                          fieldValue = getJSONKeyValue(objeEnrollment, fieldName); 
		                        break;
		                      case "EnewHireServiceWaitPeriod":
		                        if (objeEnrollment != null)
		                          fieldValue = getJSONKeyValue(objeEnrollment, fieldName); 
		                        break;
		                      default:
		                        if (objeEnrollment != null) {
		                          fieldValue = getJSONKeyValue(objeEnrollment, fieldName);
		                          break;
		                        } 
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("BillingRemittance") && (screenName.equalsIgnoreCase("IMTask") || screenName.equalsIgnoreCase("PIDTask"))) {
		                    switch (fieldName) {
		                      case "RemittanceMode":
		                        if (objBillingRemittance != null)
		                          fieldValue = getJSONKeyValue(objBillingRemittance, fieldName); 
		                        break;
		                      case "multipleBillingLocations":
		                        if (objBillingRemittance != null)
		                          fieldValue = getJSONKeyValue(objBillingRemittance, fieldName); 
		                        break;
		                      case "employeeIDforBilling":
		                        if (objBillingRemittance != null)
		                          fieldValue = getJSONKeyValue(objBillingRemittance, fieldName); 
		                        break;
		                      case "GrpIniDeductnDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Initial_Deduction_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpPayMethod":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Payment_Method__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpDdctnFreq":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Deduction_Frequency_Confirmed__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpDdctnFreqOther":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Deduction_Frequency_Other__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpReadyForProd":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Ready_for_Production_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpIniPayrollDedctnReport":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Initial_Payroll_Deduction_Report_Sent__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpCnfrmEmailSentPayroll":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Confirmation_Email_Sent_to_Payroll__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpWelcomeKitSentDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Welcome_Kit_Sent_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpIniPremiumRecvdDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Initial_premium_Received_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpExpDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Expiration_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpBillType":
		                    	fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Bill_Type__c']", null, masterAppNode), "");
		                       /* if(caseType!=null && !caseType.equalsIgnoreCase("") && caseType.equalsIgnoreCase("Expedited"))
		                        {//Defaulted to Paper when Auto Pay selected for expedited cases WIMSWRK-929
		                        	fieldValue="Paper";
		                        }*/

		                        break;
		                      case "GrpPastDueParams":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Past_Due_Parameters__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpPastDueExpRsn":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Past_Due_Exception_Reason__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpPayRcvdDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Payment_Date_Received__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpPayDtApplied":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Payment_Date_Applied__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpIniInvoiceSentDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Initial_Invoice_Sent_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpInvoiceSentDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Invoice_Sent_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpDdctnFileSent":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Deduction_File_Sent__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpBillCallContact":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='BillCallContactName']", null, masterAppNode), "");
		                        break;
		                      case "GrpBillCallReqNotes":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Bill_Call_Request_Notes__c']", null, masterAppNode), "");
		                        break;
		                      default:
		                        if (productType != null && !productType.equalsIgnoreCase("")) {
		                          JSONObject obj2 = new JSONObject(productType);
		                          if (hasKey(obj2, fieldName)) {
		                            fieldValue = getJSONKeyValue(obj2, fieldName);
		                            break;
		                          } 
		                          fieldValue = "";
		                          break;
		                        } 
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("EBillingRemittance") && screenName.equalsIgnoreCase("UWCase")) {
		                    switch (fieldName) {
		                      case "ERemittanceMode":
		                        if (objeBillingRemittance != null)
		                          fieldValue = getJSONKeyValue(objeBillingRemittance, fieldName); 
		                        break;
		                      case "EmultipleBillingLocations":
		                        if (objeBillingRemittance != null)
		                          fieldValue = getJSONKeyValue(objeBillingRemittance, fieldName); 
		                        break;
		                      case "EemployeeIDforBilling":
		                        if (objeBillingRemittance != null)
		                          fieldValue = getJSONKeyValue(objeBillingRemittance, fieldName); 
		                        break;
		                      case "EGrpIniDeductnDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Initial_Deduction_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpPayMethod":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Payment_Method__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpDdctnFreq":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Deduction_Frequency_Confirmed__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpDdctnFreqOther":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Deduction_Frequency_Other__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpReadyForProd":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Ready_for_Production_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpIniPayrollDedctnReport":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Initial_Payroll_Deduction_Report_Sent__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpCnfrmEmailSentPayroll":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Confirmation_Email_Sent_to_Payroll__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpWelcomeKitSentDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Welcome_Kit_Sent_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpIniPremiumRecvdDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Initial_premium_Received_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpExpDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Expiration_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpBillType":
		                    	fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Bill_Type__c']", null, masterAppNode), "");
		                        if(caseType!=null && !caseType.equalsIgnoreCase("") && (caseType.equalsIgnoreCase("Expedited")|| caseType.equalsIgnoreCase("Bundled GI")))
		                        {//Defaulted to Paper when Auto Pay selected for expedited cases WIMSWRK-929
		                        	fieldValue="Paper";
		                        }
		                        break;
		                      case "EGrpPastDueParams":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Past_Due_Parameters__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpPastDueExpRsn":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Past_Due_Exception_Reason__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpPayRcvdDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Payment_Date_Received__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpPayDtApplied":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Payment_Date_Applied__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpIniInvoiceSentDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Initial_Invoice_Sent_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpInvoiceSentDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Invoice_Sent_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpDdctnFileSent":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Deduction_File_Sent__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpBillCallContact":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='BillCallContactName']", null, masterAppNode), "");
		                        break;
		                      case "EGrpBillCallReqNotes":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Bill_Call_Request_Notes__c']", null, masterAppNode), "");
		                        break;
		                      default:
		                        if (productType != null && !productType.equalsIgnoreCase("")) {
		                          JSONObject obj2 = new JSONObject(productType);
		                          if (hasKey(obj2, fieldName)) {
		                            fieldValue = getJSONKeyValue(obj2, fieldName);
		                            break;
		                          } 
		                          fieldValue = "";
		                          break;
		                        } 
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("GroupDisabilityChampion") && (screenName.equalsIgnoreCase("IMTask") || screenName.equalsIgnoreCase("PIDTask"))) {
		                    String champValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Group_Disability_Champion__c']", null, masterAppNode), "");
		                    champValue = (champValue == null) ? "" : champValue;
		                    String[] champProductArray = champValue.split(";");
		                    if (champValue != null && !champValue.equalsIgnoreCase("") && !champValue.equalsIgnoreCase("null")) {
		                      switch (fieldName) {
		                        case "GrpDIChampPlanIDGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Gold")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Gold", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "GrpDIChampPlanIDPlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Platinum")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Platinum", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "GrpDIChampPlanIDDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Diamond")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Diamond", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "GrpDIChampPlanIDCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Custom")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Custom", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                      } 
		                      if (productType != null && !productType.equalsIgnoreCase("")) {
		                        JSONObject obj2 = new JSONObject(productType);
		                        if (hasKey(obj2, fieldName)) {
		                          fieldValue = getJSONKeyValue(obj2, fieldName);
		                        } else {
		                          fieldValue = "";
		                        } 
		                      } else {
		                        fieldValue = "";
		                      } 
		                      document.createTextElement(sourceField, fieldValue, rootNode);
		                    } 
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("CriticalIllnessChampion") && (screenName.equalsIgnoreCase("IMTask") || screenName.equalsIgnoreCase("PIDTask"))) {
		                    String champValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Critical_Illness_Champion__c']", null, masterAppNode), "");
		                    champValue = (champValue == null) ? "" : champValue;
		                    if (champValue != null && !champValue.equalsIgnoreCase("") && !champValue.equalsIgnoreCase("null")) {
		                      String[] champProductArray = champValue.split(";");
		                      switch (fieldName) {
		                        case "CIChampPlanIDGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Gold")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Gold", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "CIChampPlanIDPlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Platinum")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Platinum", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "CIChampPlanIDDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Diamond")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Diamond", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "CIChampPlanIDCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Custom")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Custom", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                      } 
		                      if (productType != null && !productType.equalsIgnoreCase("")) {
		                        JSONObject obj2 = new JSONObject(productType);
		                        if (hasKey(obj2, fieldName)) {
		                          fieldValue = getJSONKeyValue(obj2, fieldName);
		                        } else {
		                          fieldValue = "";
		                        } 
		                      } else {
		                        fieldValue = "";
		                      } 
		                      document.createTextElement(sourceField, fieldValue, rootNode);
		                    } 
		                    continue;
		                  } 
						   //added for IHC
						  if (groupHeader.equalsIgnoreCase("IndividualHospitalChampion") && (screenName.equalsIgnoreCase("IMTask") || screenName.equalsIgnoreCase("PIDTask"))) {
		                    String champValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_IHC_Plan_Type__c']", null, masterAppNode), "");
		                    champValue = (champValue == null) ? "" : champValue;
		                    if (champValue != null && !champValue.equalsIgnoreCase("") && !champValue.equalsIgnoreCase("null")) {
		                      String[] champProductArray = champValue.split(";");
		                      switch (fieldName) {
		                        case "IHCPlanIDBaseGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Base-Gold")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Base-Gold", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "IHCPlanIDBasePlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Base-Platinum")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Base-Platinum", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
								  continue;
								  case "IHCPlanIDBaseSilver":
		                          if (Arrays.<String>asList(champProductArray).contains("Base-Silver")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Base-Silver", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "IHCPlanIDBaseDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Base-Diamond")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Base-Diamond", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "IHCPlanIDBaseCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Base-Custom")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Base-Custom", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
								  case "IHCPlanIDEnhancedGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Enhanced-Gold")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Enhanced-Gold", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "IHCPlanIDEnhancedPlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Enhanced-Platinum")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Enhanced-Platinum", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
								  case "IHCPlanIDEnhancedSilver":
		                          if (Arrays.<String>asList(champProductArray).contains("Enhanced-Silver")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Enhanced-Silver", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
								  continue;
		                        case "IHCPlanIDEnhancedDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Enhanced-Diamond")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Enhanced-Diamond", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "IHCPlanIDEnhancedCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Enhanced-Custom")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Enhanced-Custom", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                      } 
		                      if (productType != null && !productType.equalsIgnoreCase("")) {
		                        JSONObject obj2 = new JSONObject(productType);
		                        if (hasKey(obj2, fieldName)) {
		                          fieldValue = getJSONKeyValue(obj2, fieldName);
		                        } else {
		                          fieldValue = "";
		                        } 
		                      } else {
		                        fieldValue = "";
		                      } 
		                      document.createTextElement(sourceField, fieldValue, rootNode);
		                    } 
		                    continue;
		                  } 
						  //IHC ends here
		                  if (groupHeader.equalsIgnoreCase("IndividualCriticalIllnessChampion") && (screenName.equalsIgnoreCase("IMTask") || screenName.equalsIgnoreCase("PIDTask"))) {
		                    String champValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Individual_Critical_Illness_Champion__c']", null, masterAppNode), "");
		                    champValue = (champValue == null) ? "" : champValue;
		                    if (champValue != null && !champValue.equalsIgnoreCase("") && !champValue.equalsIgnoreCase("null")) {
		                      String[] champProductArray = champValue.split(";");
		                      switch (fieldName) {
		                        case "IndiCIChampPlanIDGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Gold")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Gold", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "IndiCIChampPlanIDPlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Platinum")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Platinum", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "IndiCIChampPlanIDDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Diamond")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Diamond", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "IndiCIChampPlanIDCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Custom")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Custom", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                      } 
		                      if (productType != null && !productType.equalsIgnoreCase("")) {
		                        JSONObject obj2 = new JSONObject(productType);
		                        if (hasKey(obj2, fieldName)) {
		                          fieldValue = getJSONKeyValue(obj2, fieldName);
		                        } else {
		                          fieldValue = "";
		                        } 
		                      } else {
		                        fieldValue = "";
		                      } 
		                      document.createTextElement(sourceField, fieldValue, rootNode);
		                    } 
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("IndividualAccidentChampion") && (screenName.equalsIgnoreCase("IMTask") || screenName.equalsIgnoreCase("PIDTask"))) {
		                    String champValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Individual_Accident_Champion__c']", null, masterAppNode), "");
		                    champValue = (champValue == null) ? "" : champValue;
		                    if (champValue != null && !champValue.equalsIgnoreCase("") && !champValue.equalsIgnoreCase("null")) {
		                      String[] champProductArray = champValue.split(";");
		                      switch (fieldName) {
		                        case "IndiAccChampPlanIDGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Gold")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Gold", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "IndiAccChampPlanIDPlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Platinum")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Platinum", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "IndiAccChampPlanIDDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Diamond")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Diamond", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "IndiAccChampPlanIDCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Custom")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Custom", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                      } 
		                      if (productType != null && !productType.equalsIgnoreCase("")) {
		                        JSONObject obj2 = new JSONObject(productType);
		                        if (hasKey(obj2, fieldName)) {
		                          fieldValue = getJSONKeyValue(obj2, fieldName);
		                        } else {
		                          fieldValue = "";
		                        } 
		                      } else {
		                        fieldValue = "";
		                      } 
		                      document.createTextElement(sourceField, fieldValue, rootNode);
		                    } 
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("AceGroupCriticalIllness") && (screenName.equalsIgnoreCase("IMTask") || screenName.equalsIgnoreCase("PIDTask"))) {
		                    String champValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='ACE_Group_Critical_Illness_UW__c']", null, masterAppNode), "");
		                    champValue = (champValue == null) ? "" : champValue;
		                    if (champValue != null && !champValue.equalsIgnoreCase("") && !champValue.equalsIgnoreCase("null")) {
		                      String[] champProductArray = champValue.split(";");
		                      switch (fieldName) {
		                        case "AceGrpCIPlanIDGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Gold")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Gold", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "AceGrpCIPlanIDPlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Platinum")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Platinum", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "AceGrpCIPlanIDDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Diamond")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Diamond", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "AceGrpCIPlanIDCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Custom")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Custom", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                      } 
		                      if (productType != null && !productType.equalsIgnoreCase("")) {
		                        JSONObject obj2 = new JSONObject(productType);
		                        if (hasKey(obj2, fieldName)) {
		                          fieldValue = getJSONKeyValue(obj2, fieldName);
		                        } else {
		                          fieldValue = "";
		                        } 
		                      } else {
		                        fieldValue = "";
		                      } 
		                      document.createTextElement(sourceField, fieldValue, rootNode);
		                    } 
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("AceGroupAccident") && (screenName.equalsIgnoreCase("IMTask") || screenName.equalsIgnoreCase("PIDTask"))) {
		                    String champValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='ACE_Group_Accident_UW__c']", null, masterAppNode), "");
		                    champValue = (champValue == null) ? "" : champValue;
		                    if (champValue != null && !champValue.equalsIgnoreCase("") && !champValue.equalsIgnoreCase("null")) {
		                      String[] champProductArray = champValue.split(";");
		                      switch (fieldName) {
		                        case "AceGrpAccPlanIDGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Gold")) {
		                            if (caseType != null && !caseType.isEmpty() && (caseType.equalsIgnoreCase("Expedited") || caseType.equalsIgnoreCase("Bundled GI"))) {
		                              fieldValue = "Gold";
		                            } else if (productType != null && !productType.equalsIgnoreCase("")) {
		                              JSONObject obj2 = new JSONObject(productType);
		                              if (hasKey(obj2, fieldName)) {
		                                updatedPlanIds = getJSONKeyValue(obj2, fieldName);
		                                if (Node.isValidNode(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad))) {
		                                  updatedPlanIds = updatedPlanIds + "," + Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad), "");
		                                  fieldValue = formatPlanString(updatedPlanIds);
		                                } 
		                              } else {
		                                fieldValue = "";
		                              } 
		                            } else {
		                              fieldValue = "";
		                            } 
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "AceGrpAccPlanIDPlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Platinum")) {
		                            if (caseType != null && !caseType.isEmpty() && (caseType.equalsIgnoreCase("Expedited") || caseType.equalsIgnoreCase("Bundled GI"))) {
		                              fieldValue = "Platinum";
		                            } else if (productType != null && !productType.equalsIgnoreCase("")) {
		                              JSONObject obj2 = new JSONObject(productType);
		                              if (hasKey(obj2, fieldName)) {
		                                updatedPlanIds = getJSONKeyValue(obj2, fieldName);
		                                if (Node.isValidNode(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad))) {
		                                  updatedPlanIds = updatedPlanIds + "," + Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad), "");
		                                  fieldValue = formatPlanString(updatedPlanIds);
		                                } 
		                              } else {
		                                fieldValue = "";
		                              } 
		                            } else {
		                              fieldValue = "";
		                            } 
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "AceGrpAccPlanIDDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Diamond")) {
		                            if (caseType != null && !caseType.isEmpty() && (caseType.equalsIgnoreCase("Expedited") || caseType.equalsIgnoreCase("Bundled GI"))) {
		                              fieldValue = "Diamond";
		                            } else if (productType != null && !productType.equalsIgnoreCase("")) {
		                              JSONObject obj2 = new JSONObject(productType);
		                              if (hasKey(obj2, fieldName)) {
		                                updatedPlanIds = getJSONKeyValue(obj2, fieldName);
		                                if (Node.isValidNode(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad))) {
		                                  updatedPlanIds = updatedPlanIds + "," + Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad), "");
		                                  fieldValue = formatPlanString(updatedPlanIds);
		                                } 
		                              } else {
		                                fieldValue = "";
		                              } 
		                            } else {
		                              fieldValue = "";
		                            } 
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "AceGrpAccPlanIDCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Custom")) {
		                            if (caseType != null && !caseType.isEmpty() && (caseType.equalsIgnoreCase("Expedited") || caseType.equalsIgnoreCase("Bundled GI"))) {
		                              fieldValue = "Custom";
		                            } else if (productType != null && !productType.equalsIgnoreCase("")) {
		                              JSONObject obj2 = new JSONObject(productType);
		                              if (hasKey(obj2, fieldName)) {
		                                updatedPlanIds = getJSONKeyValue(obj2, fieldName);
		                                if (Node.isValidNode(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad))) {
		                                  updatedPlanIds = updatedPlanIds + "," + Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad), "");
		                                  fieldValue = formatPlanString(updatedPlanIds);
		                                } 
		                              } else {
		                                fieldValue = "";
		                              } 
		                            } else {
		                              fieldValue = "";
		                            } 
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                      } 
		                      if (productType != null && !productType.equalsIgnoreCase("")) {
		                        JSONObject obj2 = new JSONObject(productType);
		                        if (hasKey(obj2, fieldName)) {
		                          fieldValue = getJSONKeyValue(obj2, fieldName);
		                        } else {
		                          fieldValue = "";
		                        } 
		                      } else {
		                        fieldValue = "";
		                      } 
		                      document.createTextElement(sourceField, fieldValue, rootNode);
		                    } 
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("EGroupDisabilityChampion") && screenName.equalsIgnoreCase("UWCase")) {
		                    String champValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Group_Disability_Champion__c']", null, masterAppNode), "");
		                    champValue = (champValue == null) ? "" : champValue;
		                    if (champValue != null && !champValue.equalsIgnoreCase("") && !champValue.equalsIgnoreCase("null")) {
		                      String[] champProductArray = champValue.split(";");
		                      switch (fieldName) {
		                        case "EGrpDIChampPlanIDGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Gold")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Gold", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EGrpDIChampPlanIDPlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Platinum")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Platinum", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EGrpDIChampPlanIDDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Diamond")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Diamond", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EGrpDIChampPlanIDCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Custom")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Custom", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                      } 
		                      if (productType != null && !productType.equalsIgnoreCase("")) {
		                        JSONObject obj2 = new JSONObject(productType);
		                        if (hasKey(obj2, fieldName)) {
		                          fieldValue = getJSONKeyValue(obj2, fieldName);
		                        } else {
		                          fieldValue = "";
		                        } 
		                      } else {
		                        fieldValue = "";
		                      } 
		                      document.createTextElement(sourceField, fieldValue, rootNode);
		                    } 
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("ECriticalIllnessChampion") && screenName.equalsIgnoreCase("UWCase")) {
		                    String champValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Critical_Illness_Champion__c']", null, masterAppNode), "");
		                    champValue = (champValue == null) ? "" : champValue;
		                    if (champValue != null && !champValue.equalsIgnoreCase("") && !champValue.equalsIgnoreCase("null")) {
		                      String[] champProductArray = champValue.split(";");
		                      switch (fieldName) {
		                        case "ECIChampPlanIDGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Gold")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Gold", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "ECIChampPlanIDPlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Platinum")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Platinum", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "ECIChampPlanIDDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Diamond")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Diamond", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "ECIChampPlanIDCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Custom")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Custom", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                      } 
		                      if (productType != null && !productType.equalsIgnoreCase("")) {
		                        JSONObject obj2 = new JSONObject(productType);
		                        if (hasKey(obj2, fieldName)) {
		                          fieldValue = getJSONKeyValue(obj2, fieldName);
		                        } else {
		                          fieldValue = "";
		                        } 
		                      } else {
		                        fieldValue = "";
		                      } 
		                      document.createTextElement(sourceField, fieldValue, rootNode);
		                    } 
		                    continue;
		                  } 
						  //added for IHC
						  if (groupHeader.equalsIgnoreCase("EIndividualHospitalChampion") && screenName.equalsIgnoreCase("UWCase")) {
		                    String champValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_IHC_Plan_Type__c']", null, masterAppNode), "");
		                    champValue = (champValue == null) ? "" : champValue;
		                    if (champValue != null && !champValue.equalsIgnoreCase("") && !champValue.equalsIgnoreCase("null")) {
		                      String[] champProductArray = champValue.split(";");
		                      switch (fieldName) {
		                        case "EIHCPlanIDBaseGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Base-Gold")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Base-Gold", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EIHCPlanIDBasePlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Base-Platinum")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Base-Platinum", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
								  continue;
								case "EIHCPlanIDBaseSilver":
		                          if (Arrays.<String>asList(champProductArray).contains("Base-Silver")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Base-Silver", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          }
		                          continue;
		                        case "EIHCPlanIDBaseDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Base-Diamond")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Base-Diamond", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EIHCPlanIDBaseCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Base-Custom")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Base-Custom", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
								  case "EIHCPlanIDEnhancedGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Enhanced-Gold")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Enhanced-Gold", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EIHCPlanIDEnhancedPlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Enhanced-Platinum")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Enhanced-Platinum", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
								case "EIHCPlanIDEnhancedSilver":
		                          if (Arrays.<String>asList(champProductArray).contains("Enhanced-Silver")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Enhanced-Silver", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          }
		                          continue;
		                        case "EIHCPlanIDEnhancedDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Enhanced-Diamond")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Enhanced-Diamond", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EIHCPlanIDEnhancedCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Enhanced-Custom")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Enhanced-Custom", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                      } 
		                      if (productType != null && !productType.equalsIgnoreCase("")) {
		                        JSONObject obj2 = new JSONObject(productType);
		                        if (hasKey(obj2, fieldName)) {
		                          fieldValue = getJSONKeyValue(obj2, fieldName);
		                        } else {
		                          fieldValue = "";
		                        } 
		                      } else {
		                        fieldValue = "";
		                      } 
		                      document.createTextElement(sourceField, fieldValue, rootNode);
		                    } 
		                    continue;
		                  } 
						  //IHC code ends here
		                  if (groupHeader.equalsIgnoreCase("EIndividualCriticalIllnessChampion") && screenName.equalsIgnoreCase("UWCase")) {
		                    String champValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Individual_Critical_Illness_Champion__c']", null, masterAppNode), "");
		                    champValue = (champValue == null) ? "" : champValue;
		                    if (champValue != null && !champValue.equalsIgnoreCase("") && !champValue.equalsIgnoreCase("null")) {
		                      String[] champProductArray = champValue.split(";");
		                      switch (fieldName) {
		                        case "EIndiCIChampPlanIDGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Gold")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Gold", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EIndiCIChampPlanIDPlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Platinum")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Platinum", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EIndiCIChampPlanIDDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Diamond")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Diamond", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EIndiCIChampPlanIDCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Custom")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Custom", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                      } 
		                      if (productType != null && !productType.equalsIgnoreCase("")) {
		                        JSONObject obj2 = new JSONObject(productType);
		                        if (hasKey(obj2, fieldName)) {
		                          fieldValue = getJSONKeyValue(obj2, fieldName);
		                        } else {
		                          fieldValue = "";
		                        } 
		                      } else {
		                        fieldValue = "";
		                      } 
		                      document.createTextElement(sourceField, fieldValue, rootNode);
		                    } 
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("EIndividualAccidentChampion") && screenName.equalsIgnoreCase("UWCase")) {
		                    String champValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Individual_Accident_Champion__c']", null, masterAppNode), "");
		                    champValue = (champValue == null) ? "" : champValue;
		                    if (champValue != null && !champValue.equalsIgnoreCase("") && !champValue.equalsIgnoreCase("null")) {
		                      String[] champProductArray = champValue.split(";");
		                      switch (fieldName) {
		                        case "EIndiAccChampPlanIDGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Gold")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Gold", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EIndiAccChampPlanIDPlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Platinum")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Platinum", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EIndiAccChampPlanIDDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Diamond")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Diamond", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EIndiAccChampPlanIDCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Custom")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Custom", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                      } 
		                      if (productType != null && !productType.equalsIgnoreCase("")) {
		                        JSONObject obj2 = new JSONObject(productType);
		                        if (hasKey(obj2, fieldName)) {
		                          fieldValue = getJSONKeyValue(obj2, fieldName);
		                        } else {
		                          fieldValue = "";
		                        } 
		                      } else {
		                        fieldValue = "";
		                      } 
		                      document.createTextElement(sourceField, fieldValue, rootNode);
		                    } 
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("EAceGroupCriticalIllness") && screenName.equalsIgnoreCase("UWCase")) {
		                    String champValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='ACE_Group_Critical_Illness_UW__c']", null, masterAppNode), "");
		                    champValue = (champValue == null) ? "" : champValue;
		                    if (champValue != null && !champValue.equalsIgnoreCase("") && !champValue.equalsIgnoreCase("null")) {
		                      String[] champProductArray = champValue.split(";");
		                      switch (fieldName) {
		                        case "EAceGrpCIPlanIDGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Gold")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Gold", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EAceGrpCIPlanIDPlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Platinum")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Platinum", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EAceGrpCIPlanIDDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Diamond")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Diamond", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EAceGrpCIPlanIDCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Custom")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Custom", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                      } 
		                      if (productType != null && !productType.equalsIgnoreCase("")) {
		                        JSONObject obj2 = new JSONObject(productType);
		                        if (hasKey(obj2, fieldName)) {
		                          fieldValue = getJSONKeyValue(obj2, fieldName);
		                        } else {
		                          fieldValue = "";
		                        } 
		                      } else {
		                        fieldValue = "";
		                      } 
		                      document.createTextElement(sourceField, fieldValue, rootNode);
		                    } 
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("EAceGroupAccident") && screenName.equalsIgnoreCase("UWCase")) {
		                    String champValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='ACE_Group_Accident_UW__c']", null, masterAppNode), "");
		                    champValue = (champValue == null) ? "" : champValue;
		                    if (champValue != null && !champValue.equalsIgnoreCase("") && !champValue.equalsIgnoreCase("null")) {
		                      String[] champProductArray = champValue.split(";");
		                      switch (fieldName) {
		                        case "EAceGrpAccPlanIDGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Gold")) {
		                            if (caseType != null && !caseType.isEmpty() && (caseType.equalsIgnoreCase("Expedited")|| caseType.equalsIgnoreCase("Bundled GI"))) {
		                              fieldValue = "Gold";
		                            } else if (productType != null && !productType.equalsIgnoreCase("")) {
		                              JSONObject obj2 = new JSONObject(productType);
		                              if (hasKey(obj2, fieldName)) {
		                                updatedPlanIds = getJSONKeyValue(obj2, fieldName);
		                                if (Node.isValidNode(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad))) {
		                                  updatedPlanIds = updatedPlanIds + "," + Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad), "");
		                                  fieldValue = formatPlanString(updatedPlanIds);
		                                } 
		                              } else {
		                                fieldValue = "";
		                              } 
		                            } else {
		                              fieldValue = "";
		                            } 
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EAceGrpAccPlanIDPlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Platinum")) {
		                            if (caseType != null && !caseType.isEmpty() && (caseType.equalsIgnoreCase("Expedited")|| caseType.equalsIgnoreCase("Bundled GI"))) {
		                              fieldValue = "Platinum";
		                            } else if (productType != null && !productType.equalsIgnoreCase("")) {
		                              JSONObject obj2 = new JSONObject(productType);
		                              if (hasKey(obj2, fieldName)) {
		                                updatedPlanIds = getJSONKeyValue(obj2, fieldName);
		                                if (Node.isValidNode(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad))) {
		                                  updatedPlanIds = updatedPlanIds + "," + Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad), "");
		                                  fieldValue = formatPlanString(updatedPlanIds);
		                                } 
		                              } else {
		                                fieldValue = "";
		                              } 
		                            } else {
		                              fieldValue = "";
		                            } 
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EAceGrpAccPlanIDDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Diamond")) {
		                            if (caseType != null && !caseType.isEmpty() && (caseType.equalsIgnoreCase("Expedited")|| caseType.equalsIgnoreCase("Bundled GI"))) {
		                              fieldValue = "Diamond";
		                            } else if (productType != null && !productType.equalsIgnoreCase("")) {
		                              JSONObject obj2 = new JSONObject(productType);
		                              if (hasKey(obj2, fieldName)) {
		                                updatedPlanIds = getJSONKeyValue(obj2, fieldName);
		                                if (Node.isValidNode(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad))) {
		                                  updatedPlanIds = updatedPlanIds + "," + Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad), "");
		                                  fieldValue = formatPlanString(updatedPlanIds);
		                                } 
		                              } else {
		                                fieldValue = "";
		                              } 
		                            } else {
		                              fieldValue = "";
		                            } 
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EAceGrpAccPlanIDCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Custom")) {
		                            if (caseType != null && !caseType.isEmpty() && (caseType.equalsIgnoreCase("Expedited")|| caseType.equalsIgnoreCase("Bundled GI"))) {
		                              fieldValue = "Custom";
		                            } else if (productType != null && !productType.equalsIgnoreCase("")) {
		                              JSONObject obj2 = new JSONObject(productType);
		                              if (hasKey(obj2, fieldName)) {
		                                updatedPlanIds = getJSONKeyValue(obj2, fieldName);
		                                if (Node.isValidNode(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad))) {
		                                  updatedPlanIds = updatedPlanIds + "," + Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad), "");
		                                  fieldValue = formatPlanString(updatedPlanIds);
		                                } 
		                              } else {
		                                fieldValue = "";
		                              } 
		                            } else {
		                              fieldValue = "";
		                            } 
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                      } 
		                      if (productType != null && !productType.equalsIgnoreCase("")) {
		                        JSONObject obj2 = new JSONObject(productType);
		                        if (hasKey(obj2, fieldName)) {
		                          fieldValue = getJSONKeyValue(obj2, fieldName);
		                        } else {
		                          fieldValue = "";
		                        } 
		                      } else {
		                        fieldValue = "";
		                      } 
		                      document.createTextElement(sourceField, fieldValue, rootNode);
		                    } 
		                    continue;
		                  } 
		                  document.createTextElement(sourceField, fieldValue, rootNode);
		                } 
		              } 
		            } 
		          } 
		        } 
		      } else {
		        String queryText = "select distinct Tab from SFFieldsValidations";
		        QueryObject columnQueryobj = new QueryObject(queryText);
		        BusObjectIterator<BusObject> headerObjects = columnQueryobj.getObjects();
		        while (headerObjects.hasMoreElements()) {
		          BusObject headerObject = headerObjects.nextElement();
		          String tabName = headerObject.getStringProperty("Tab");
		          if (tabName != null && !tabName.equalsIgnoreCase("")) {
		            if (!Node.isValidNode(XPath.getFirstMatch(".//*[local-name()='" + tabName + "']", null, rootNode)));
		            queryText = "select * from SFFieldsValidations where Tab='" + tabName + "'";
		            columnQueryobj = new QueryObject(queryText);
		            BusObjectIterator<BusObject> groupHeaderObjects = columnQueryobj.getObjects();
		            while (groupHeaderObjects.hasMoreElements()) {
		              BusObject busObject = groupHeaderObjects.nextElement();
		              String fieldName = busObject.getStringProperty("Field");
		              String sourceField = busObject.getStringProperty("SourceField");
		              fieldName = (fieldName == null) ? "" : fieldName;
		              fieldName = fieldName.replaceAll("\\s+", "");
		              String groupHeader = busObject.getStringProperty("GroupHeader");
		              groupHeader = (groupHeader == null) ? "" : groupHeader;
		              groupHeader = groupHeader.replaceAll("\\s+", "");
		              String productType = "";
		              if (tabName != null && tabName.equalsIgnoreCase("PlanId")) {
		                productType = getJSONKeyValue(objPlanId, groupHeader);
		              } else if (tabName != null && tabName.equalsIgnoreCase("EProductInfo")) {
		                productType = getJSONKeyValue(objeProductInfo, groupHeader);
		              } else {
		                productType = getJSONKeyValue(objProductInfo, groupHeader);
		              } 
		              if (fieldName != null && !fieldName.equalsIgnoreCase("")) {
		                String fieldValue = "", updatedPlanIds = "";
		                fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='" + fieldName + "']", null, rootNode), "");
		                if (fieldValue == null || fieldValue.equalsIgnoreCase("")) {
		                  if (groupHeader.equalsIgnoreCase("CompensationDetails")) {
		                    switch (fieldName) {
		                      case "Cica":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Contract_Code_CICA__c']", null, masterAppNode), "");
		                        document.createTextElement(sourceField, fieldValue, rootNode);
		                        continue;
		                      case "NonCica":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Contract_Code_Non_CICA__c']", null, masterAppNode), "");
		                        document.createTextElement(sourceField, fieldValue, rootNode);
		                        continue;
		                      case "GrpDetAttachedDate":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Compensation_Detail_Attached_Date__c']", null, masterAppNode), "");
		                        document.createTextElement(sourceField, fieldValue, rootNode);
		                        continue;
		                      case "compStructure":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Broker_Compensation__c']", null, masterAppNode), "");
		                        document.createTextElement(sourceField, fieldValue, rootNode);
		                        continue;
		                      case "GrpCommLevel":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Commission_Code__c']", null, masterAppNode), "");
		                        document.createTextElement(sourceField, fieldValue, rootNode);
		                        continue;
		                    } 
		                    fieldValue = "";
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("ECompensationDetails")) {
		                    switch (fieldName) {
		                      case "ECica":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Contract_Code_CICA__c']", null, masterAppNode), "");
		                        document.createTextElement(sourceField, fieldValue, rootNode);
		                        continue;
		                      case "ENonCica":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Contract_Code_Non_CICA__c']", null, masterAppNode), "");
		                        document.createTextElement(sourceField, fieldValue, rootNode);
		                        continue;
		                      case "EGrpDetAttachedDate":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Compensation_Detail_Attached_Date__c']", null, masterAppNode), "");
		                        document.createTextElement(sourceField, fieldValue, rootNode);
		                        continue;
		                      case "EcompStructure":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Broker_Compensation__c']", null, masterAppNode), "");
		                        document.createTextElement(sourceField, fieldValue, rootNode);
		                        continue;
		                      case "EGrpCommLevel":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Commission_Code__c']", null, masterAppNode), "");
		                        document.createTextElement(sourceField, fieldValue, rootNode);
		                        continue;
		                    } 
		                    fieldValue = "";
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("ProdDetailsOther")) {
		                    switch (fieldName) {
		                      case "primaryState1":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Primary_State_Location__c']", null, masterAppNode), "");
		                        break;
		                      case "statesEnrolling1":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='States_Enrolling__c']", null, masterAppNode), "");
		                        break;
		                      case "statesState1":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Situs_State__c']", null, masterAppNode), "");
		                        break;
		                      case "situsType1":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Situs_Type__c']", null, masterAppNode), "");
		                        break;
		                      case "attachedGIAgreement1":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Attached_Guaranteed_Issue_Agreement__c']", null, masterAppNode), "");
		                        break;
		                      case "prodReplacedDiscon1":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Products_Being_Replaced_Discontinued__c']", null, masterAppNode), "");
		                        break;
		                      case "underwritingNotes1":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Additional_Underwriting_Comments__c']", null, masterAppNode), "");
		                        break;
		                      default:
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("EProdDetailsOther")) {
		                    switch (fieldName) {
		                      case "EprimaryState1":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Primary_State_Location__c']", null, masterAppNode), "");
		                        break;
		                      case "EstatesEnrolling1":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='States_Enrolling__c']", null, masterAppNode), "");
		                        break;
		                      case "EstatesState1":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Situs_State__c']", null, masterAppNode), "");
		                        break;
		                      case "EsitusType1":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Situs_Type__c']", null, masterAppNode), "");
		                        break;
		                      case "EattachedGIAgreement1":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Attached_Guaranteed_Issue_Agreement__c']", null, masterAppNode), "");
		                        break;
		                      case "EprodReplacedDiscon1":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Products_Being_Replaced_Discontinued__c']", null, masterAppNode), "");
		                        break;
		                      case "EunderwritingNotes1":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Additional_Underwriting_Comments__c']", null, masterAppNode), "");
		                        break;
		                      default:
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("ContactDetails")) {
		                    switch (fieldName) {
		                      case "GrpGroupContact":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Implementation_Contact__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpBroker":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='BrokerName']", null, masterAppNode), "");
		                        break;
		                      case "GrpSalesContact":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Sales_Contact__c']", null, masterAppNode), "");
		                        break;
		                      case "brokerEmail":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='BrokerEmail']", null, masterAppNode), "");
		                        break;
		                      case "GrpClientName":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='ClientName']", null, masterAppNode), "");
		                        break;
		                      case "GrpClientEmail":
		                        //fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Client_Email__c']", null, masterAppNode), "");
								fieldValue = (contactsNode.length>0)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Email']", null, contactsNode[0]), ""):"";
		                        break;
		                      case "GrpClientPhone":
		                        //fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='ClientPhone']", null, masterAppNode), "");
								fieldValue = (contactsNode.length>0)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Phone']", null, contactsNode[0]), ""):"";
		                        break;
		                      case "GrpClientAddress":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='ClientAddress']", null, masterAppNode), "");
		                        break;
		                      case "GrpContactName1":
			                        fieldValue = (contactsNode.length>0)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Name']", null, contactsNode[0]), ""):"";
			                        break;
			                  case "GrpContactTitle1":
			                	  fieldValue = (contactsNode.length>0)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Title']", null, contactsNode[0]), ""):"";
			                        break;
			                  case "GrpContactEmail1":
			                	  fieldValue = (contactsNode.length>0)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Email']", null, contactsNode[0]), ""):"";
			                        break;
			                  case "GrpContactPhone1":
			                	  fieldValue = (contactsNode.length>0)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Phone']", null, contactsNode[0]), ""):"";
			                        break;
			                  case "GrpContactName2":
			                	  fieldValue = (contactsNode.length>1)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Name']", null, contactsNode[1]), ""):"";
				                        break;
				              case "GrpContactTitle2":
				            	  fieldValue = (contactsNode.length>1)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Title']", null, contactsNode[1]), ""):"";
				                        break;
				              case "GrpContactEmail2":
				            	  fieldValue = (contactsNode.length>1)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Email']", null, contactsNode[1]), ""):"";
				                        break;
				              case "GrpContactPhone2":
				            	  fieldValue = (contactsNode.length>1)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Phone']", null, contactsNode[1]), ""):"";
				                        break;
		                      default:
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("EContactDetails")) {
		                    switch (fieldName) {
		                      case "EGrpGroupContact":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Implementation_Contact__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpBroker":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='BrokerName']", null, masterAppNode), "");
		                        break;
		                      case "EGrpSalesContact":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Sales_Contact__c']", null, masterAppNode), "");
		                        break;
		                      case "EbrokerEmail":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='BrokerEmail']", null, masterAppNode), "");
		                        break;
		                      case "EGrpClientName":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='ClientName']", null, masterAppNode), "");
		                        break;
		                      case "EGrpClientEmail":
		                        //fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Client_Email__c']", null, masterAppNode), "");
								fieldValue = (contactsNode.length>0)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Email']", null, contactsNode[0]), ""):"";
		                        break;
		                      case "EGrpClientPhone":
		                        //fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='ClientPhone']", null, masterAppNode), "");
								fieldValue = (contactsNode.length>0)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Phone']", null, contactsNode[0]), ""):"";
		                        break;
		                      case "EGrpClientAddress":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='ClientAddress']", null, masterAppNode), "");
		                        break;
		                      case "EGrpContactName1":
			                        fieldValue = (contactsNode.length>0)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Name']", null, contactsNode[0]), ""):"";
			                        break;
			                  case "EGrpContactTitle1":
			                	  fieldValue = (contactsNode.length>0)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Title']", null, contactsNode[0]), ""):"";
			                        break;
			                  case "EGrpContactEmail1":
			                	  fieldValue = (contactsNode.length>0)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Email']", null, contactsNode[0]), ""):"";
			                        break;
			                  case "EGrpContactPhone1":
			                	  fieldValue = (contactsNode.length>0)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Phone']", null, contactsNode[0]), ""):"";
			                        break;
			                  case "EGrpContactName2":
			                	  fieldValue = (contactsNode.length>1)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Name']", null, contactsNode[1]), ""):"";
				                        break;
				              case "EGrpContactTitle2":
				            	  fieldValue = (contactsNode.length>1)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Title']", null, contactsNode[1]), ""):"";
				                        break;
				              case "EGrpContactEmail2":
				            	  fieldValue = (contactsNode.length>1)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Email']", null, contactsNode[1]), ""):"";
				                        break;
				              case "EGrpContactPhone2":
				            	  fieldValue = (contactsNode.length>1)?Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Phone']", null, contactsNode[1]), ""):"";
				                        break;	
		                      default:
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("IncomeProtector")) {
		                    switch (fieldName) {
		                      case "IncomeProtectorTakeover":
		                        if (productType != null && !productType.equalsIgnoreCase("")) {
		                          JSONObject obj2 = new JSONObject(productType);
		                          if (hasKey(obj2, fieldName)) {
		                            fieldValue = getJSONKeyValue(obj2, fieldName);
		                            break;
		                          } 
		                          fieldValue = "";
		                          break;
		                        } 
		                        fieldValue = "";
		                        break;
		                      default:
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("LifetimeBenefitTerm")) {
		                    switch (fieldName) {
		                      case "LBTRiders":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_LBT_Riders__c']", null, masterAppNode), "");
		                        break;
		                      case "SelmanMarketCode":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Selman_Market_Code__c']", null, masterAppNode), "");
		                        break;
		                      case "LBTTakeover":
		                        if (productType != null && !productType.equalsIgnoreCase("")) {
		                          JSONObject obj2 = new JSONObject(productType);
		                          if (hasKey(obj2, fieldName)) {
		                            fieldValue = getJSONKeyValue(obj2, fieldName);
		                            break;
		                          } 
		                          fieldValue = "";
		                          break;
		                        } 
		                        fieldValue = "";
		                        break;
		                      case "enrollmentEffDate":
		                        if (productType != null && !productType.equalsIgnoreCase("")) {
		                          JSONObject obj2 = new JSONObject(productType);
		                          if (hasKey(obj2, fieldName)) {
		                            fieldValue = getJSONKeyValue(obj2, fieldName);
		                            break;
		                          } 
		                          fieldValue = "";
		                          break;
		                        } 
		                        fieldValue = "";
		                        break;
		                      default:
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("EIncomeProtector")) {
		                    switch (fieldName) {
		                      case "EIncomeProtectorTakeover":
		                        if (productType != null && !productType.equalsIgnoreCase("")) {
		                          JSONObject obj2 = new JSONObject(productType);
		                          if (hasKey(obj2, fieldName)) {
		                            fieldValue = getJSONKeyValue(obj2, fieldName);
		                            break;
		                          } 
		                          fieldValue = "";
		                          break;
		                        } 
		                        fieldValue = "";
		                        break;
		                      default:
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("ELifetimeBenefitTerm")) {
		                    switch (fieldName) {
		                      case "ELBTRiders":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_LBT_Riders__c']", null, masterAppNode), "");
		                        break;
		                      case "ESelmanMarketCode":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Selman_Market_Code__c']", null, masterAppNode), "");
		                        break;
		                      case "ELBTTakeover":
		                        if (productType != null && !productType.equalsIgnoreCase("")) {
		                          JSONObject obj2 = new JSONObject(productType);
		                          if (hasKey(obj2, fieldName)) {
		                            fieldValue = getJSONKeyValue(obj2, fieldName);
		                            break;
		                          } 
		                          fieldValue = "";
		                          break;
		                        } 
		                        fieldValue = "";
		                        break;
		                      case "EenrollmentEffDate":
		                        if (productType != null && !productType.equalsIgnoreCase("")) {
		                          JSONObject obj2 = new JSONObject(productType);
		                          if (hasKey(obj2, fieldName)) {
		                            fieldValue = getJSONKeyValue(obj2, fieldName);
		                            break;
		                          } 
		                          fieldValue = "";
		                          break;
		                        } 
		                        fieldValue = "";
		                        break;
		                      default:
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("Other")) {
		                    switch (fieldName) {
		                      case "GrpTotalNoEmp":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Number_of_Employees__c']", null, masterAppNode), "");
		                        break;
		                      default:
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("EOther")) {
		                    switch (fieldName) {
		                      case "EGrpTotalNoEmp":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Number_of_Employees__c']", null, masterAppNode), "");
		                        break;
		                      default:
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("EnrollmentDetails")) {
		                    switch (fieldName) {
		                      case "GrpEnSystems":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Enrollment_Systems_Used__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpEnStartDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Enrollment_Start_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpEnEndDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Enrollment_End_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpEnrollmentMethodology":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Enrollment_Methodology__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpCaseStrategy":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Case_Strategy__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpBrochureType":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Brochure_Type__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpWorkCompleted":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Work_Completed__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpChangeFileLSP":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Receive_a_Change_File_from_LSP__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpIncomeReqFT":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Income_Requirements_Full_Time__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpIncomeReqPT":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Income_Requirements_Part_Time__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpMinHrsWeekFT":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Minimum_Hours_per_week_Full_Time_Part__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpMinLenService":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Minimum_Length_of_Service_Days__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpExpIssueReq":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Express_Issue_Requested__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpGuaranIssueReq":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Guaranteed_Issue_Requested__c']", null, masterAppNode), "");
		                        break;
		                      case "perpetualEnrollment":
		                        if (objEnrollment != null)
		                          fieldValue = getJSONKeyValue(objEnrollment, fieldName); 
		                        break;
		                      case "censusToBeProvided":
		                        if (objEnrollment != null)
		                          fieldValue = getJSONKeyValue(objEnrollment, fieldName); 
		                        break;
		                      case "benefitWaitPeriod":
		                        if (objEnrollment != null)
		                          fieldValue = getJSONKeyValue(objEnrollment, fieldName); 
		                        break;
		                      case "newHireBenefitWaitPeriod":
		                        if (objEnrollment != null)
		                          fieldValue = getJSONKeyValue(objEnrollment, fieldName); 
		                        break;
		                      case "newHireEnrollmentWindow":
		                        if (objEnrollment != null)
		                          fieldValue = getJSONKeyValue(objEnrollment, fieldName); 
		                        break;
		                      case "newHireServiceWaitPeriod":
		                        if (objEnrollment != null)
		                          fieldValue = getJSONKeyValue(objEnrollment, fieldName); 
		                        break;
		                      default:
		                        if (objEnrollment != null) {
		                          fieldValue = getJSONKeyValue(objEnrollment, fieldName);
		                          break;
		                        } 
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("EEnrollmentDetails")) {
		                    switch (fieldName) {
		                      case "EGrpEnSystems":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Enrollment_Systems_Used__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpEnStartDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Enrollment_Start_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpEnEndDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Enrollment_End_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpEnrollmentMethodology":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Enrollment_Methodology__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpCaseStrategy":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Case_Strategy__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpBrochureType":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Brochure_Type__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpWorkCompleted":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Work_Completed__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpChangeFileLSP":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Receive_a_Change_File_from_LSP__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpIncomeReqFT":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Income_Requirements_Full_Time__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpIncomeReqPT":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Income_Requirements_Part_Time__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpMinHrsWeekFT":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Minimum_Hours_per_week_Full_Time_Part__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpMinLenService":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Minimum_Length_of_Service_Days__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpExpIssueReq":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Express_Issue_Requested__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpGuaranIssueReq":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Guaranteed_Issue_Requested__c']", null, masterAppNode), "");
		                        break;
		                      case "EperpetualEnrollment":
		                        if (objeEnrollment != null)
		                          fieldValue = getJSONKeyValue(objeEnrollment, fieldName); 
		                        break;
		                      case "EcensusToBeProvided":
		                        if (objeEnrollment != null)
		                          fieldValue = getJSONKeyValue(objeEnrollment, fieldName); 
		                        break;
		                      case "EbenefitWaitPeriod":
		                        if (objeEnrollment != null)
		                          fieldValue = getJSONKeyValue(objeEnrollment, fieldName); 
		                        break;
		                      case "EnewHireBenefitWaitPeriod":
		                        if (objeEnrollment != null)
		                          fieldValue = getJSONKeyValue(objeEnrollment, fieldName); 
		                        break;
		                      case "EnewHireEnrollmentWindow":
		                        if (objeEnrollment != null)
		                          fieldValue = getJSONKeyValue(objeEnrollment, fieldName); 
		                        break;
		                      case "EnewHireServiceWaitPeriod":
		                        if (objeEnrollment != null)
		                          fieldValue = getJSONKeyValue(objeEnrollment, fieldName); 
		                        break;
		                      default:
		                        if (objeEnrollment != null) {
		                          fieldValue = getJSONKeyValue(objeEnrollment, fieldName);
		                          break;
		                        } 
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("BillingRemittance")) {
		                    switch (fieldName) {
		                      case "RemittanceMode":
		                        if (objBillingRemittance != null)
		                          fieldValue = getJSONKeyValue(objBillingRemittance, fieldName); 
		                        break;
		                      case "multipleBillingLocations":
		                        if (objBillingRemittance != null)
		                          fieldValue = getJSONKeyValue(objBillingRemittance, fieldName); 
		                        break;
		                      case "employeeIDforBilling":
		                        if (objBillingRemittance != null)
		                          fieldValue = getJSONKeyValue(objBillingRemittance, fieldName); 
		                        break;
		                      case "GrpIniDeductnDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Initial_Deduction_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpPayMethod":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Payment_Method__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpDdctnFreq":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Deduction_Frequency_Confirmed__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpDdctnFreqOther":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Deduction_Frequency_Other__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpReadyForProd":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Ready_for_Production_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpIniPayrollDedctnReport":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Initial_Payroll_Deduction_Report_Sent__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpCnfrmEmailSentPayroll":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Confirmation_Email_Sent_to_Payroll__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpWelcomeKitSentDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Welcome_Kit_Sent_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpIniPremiumRecvdDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Initial_premium_Received_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpExpDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Expiration_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpBillType":
		                    	fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Bill_Type__c']", null, masterAppNode), "");
		                        if(caseType!=null && !caseType.equalsIgnoreCase("") && (caseType.equalsIgnoreCase("Expedited")|| caseType.equalsIgnoreCase("Bundled GI"))) {//Defaulted to Paper when Auto Pay selected for expedited cases WIMSWRK-929
		                        	fieldValue="Paper";
		                        }

		                        break;
		                      case "GrpPastDueParams":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Past_Due_Parameters__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpPastDueExpRsn":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Past_Due_Exception_Reason__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpPayRcvdDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Payment_Date_Received__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpPayDtApplied":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Payment_Date_Applied__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpIniInvoiceSentDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Initial_Invoice_Sent_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpInvoiceSentDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Invoice_Sent_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpDdctnFileSent":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Deduction_File_Sent__c']", null, masterAppNode), "");
		                        break;
		                      case "GrpBillCallContact":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='BillCallContactName']", null, masterAppNode), "");
		                        break;
		                      case "GrpBillCallReqNotes":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Bill_Call_Request_Notes__c']", null, masterAppNode), "");
		                        break;
		                      default:
		                        if (productType != null && !productType.equalsIgnoreCase("")) {
		                          JSONObject obj2 = new JSONObject(productType);
		                          if (hasKey(obj2, fieldName)) {
		                            fieldValue = getJSONKeyValue(obj2, fieldName);
		                            break;
		                          } 
		                          fieldValue = "";
		                          break;
		                        } 
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("EBillingRemittance")) {
		                    switch (fieldName) {
		                      case "ERemittanceMode":
		                        if (objeBillingRemittance != null)
		                          fieldValue = getJSONKeyValue(objeBillingRemittance, fieldName); 
		                        break;
		                      case "EmultipleBillingLocations":
		                        if (objeBillingRemittance != null)
		                          fieldValue = getJSONKeyValue(objeBillingRemittance, fieldName); 
		                        break;
		                      case "EemployeeIDforBilling":
		                        if (objeBillingRemittance != null)
		                          fieldValue = getJSONKeyValue(objeBillingRemittance, fieldName); 
		                        break;
		                      case "EGrpIniDeductnDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Initial_Deduction_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpPayMethod":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Payment_Method__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpDdctnFreq":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Deduction_Frequency_Confirmed__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpDdctnFreqOther":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Deduction_Frequency_Other__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpReadyForProd":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Ready_for_Production_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpIniPayrollDedctnReport":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Initial_Payroll_Deduction_Report_Sent__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpCnfrmEmailSentPayroll":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Confirmation_Email_Sent_to_Payroll__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpWelcomeKitSentDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Welcome_Kit_Sent_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpIniPremiumRecvdDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Initial_premium_Received_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpExpDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Expiration_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpBillType":
				                    	fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Bill_Type__c']", null, masterAppNode), "");
		                        if(caseType!=null && !caseType.equalsIgnoreCase("") && (caseType.equalsIgnoreCase("Expedited")|| caseType.equalsIgnoreCase("Bundled GI"))) {//Defaulted to Paper when Auto Pay selected for expedited cases WIMSWRK-929
		                        	fieldValue="Paper";
		                        }

		                        break;
		                      case "EGrpPastDueParams":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Past_Due_Parameters__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpPastDueExpRsn":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Past_Due_Exception_Reason__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpPayRcvdDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Payment_Date_Received__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpPayDtApplied":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Payment_Date_Applied__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpIniInvoiceSentDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Initial_Invoice_Sent_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpInvoiceSentDt":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Invoice_Sent_Date__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpDdctnFileSent":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Deduction_File_Sent__c']", null, masterAppNode), "");
		                        break;
		                      case "EGrpBillCallContact":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='BillCallContactName']", null, masterAppNode), "");
		                        break;
		                      case "EGrpBillCallReqNotes":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Bill_Call_Request_Notes__c']", null, masterAppNode), "");
		                        break;
		                      default:
		                        if (productType != null && !productType.equalsIgnoreCase("")) {
		                          JSONObject obj2 = new JSONObject(productType);
		                          if (hasKey(obj2, fieldName)) {
		                            fieldValue = getJSONKeyValue(obj2, fieldName);
		                            break;
		                          } 
		                          fieldValue = "";
		                          break;
		                        } 
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("GroupDisabilityChampion")) {
		                    String champValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Group_Disability_Champion__c']", null, masterAppNode), "");
		                    champValue = (champValue == null) ? "" : champValue;
		                    if (champValue != null && !champValue.equalsIgnoreCase("") && !champValue.equalsIgnoreCase("null")) {
		                      String[] champProductArray = champValue.split(";");
		                      switch (fieldName) {
		                        case "GrpDIChampPlanIDGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Gold")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Gold", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "GrpDIChampPlanIDPlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Platinum")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Platinum", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "GrpDIChampPlanIDDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Diamond")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Diamond", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "GrpDIChampPlanIDCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Custom")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Custom", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                      } 
		                      if (productType != null && !productType.equalsIgnoreCase("")) {
		                        JSONObject obj2 = new JSONObject(productType);
		                        if (hasKey(obj2, fieldName)) {
		                          fieldValue = getJSONKeyValue(obj2, fieldName);
		                        } else {
		                          fieldValue = "";
		                        } 
		                      } else {
		                        fieldValue = "";
		                      } 
		                      document.createTextElement(sourceField, fieldValue, rootNode);
		                    } 
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("CriticalIllnessChampion")) {
		                    String champValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Critical_Illness_Champion__c']", null, masterAppNode), "");
		                    champValue = (champValue == null) ? "" : champValue;
		                    if (champValue != null && !champValue.equalsIgnoreCase("") && !champValue.equalsIgnoreCase("null")) {
		                      String[] champProductArray = champValue.split(";");
		                      switch (fieldName) {
		                        case "CIChampPlanIDGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Gold")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Gold", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "CIChampPlanIDPlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Platinum")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Platinum", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "CIChampPlanIDDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Diamond")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Diamond", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "CIChampPlanIDCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Custom")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Custom", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
						    } 
		                      if (productType != null && !productType.equalsIgnoreCase("")) {
		                        JSONObject obj2 = new JSONObject(productType);
		                        if (hasKey(obj2, fieldName)) {
		                          fieldValue = getJSONKeyValue(obj2, fieldName);
		                        } else {
		                          fieldValue = "";
		                        } 
		                      } else {
		                        fieldValue = "";
		                      } 
		                      document.createTextElement(sourceField, fieldValue, rootNode);
		                    } 
		                    continue;
		                  } 
						  //added for IHC
						  if (groupHeader.equalsIgnoreCase("IndividualHospitalChampion")) {
		                    String champValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_IHC_Plan_Type__c']", null, masterAppNode), "");
		                    champValue = (champValue == null) ? "" : champValue;
		                    if (champValue != null && !champValue.equalsIgnoreCase("") && !champValue.equalsIgnoreCase("null")) {
		                      String[] champProductArray = champValue.split(";");
		                      switch (fieldName) {
		                        case "IHCPlanIDBaseGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Base-Gold")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Base-Gold", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "IHCPlanIDBasePlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Base-Platinum")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Base-Platinum", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
								 case "IHCPlanIDBaseSilver":
		                          if (Arrays.<String>asList(champProductArray).contains("Base-Silver")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Base-Silver", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "IHCPlanIDBaseDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Base-Diamond")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Base-Diamond", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "IHCPlanIDBaseCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Base-Custom")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Base-Custom", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
								  case "IHCPlanIDEnhancedGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Enhanced-Gold")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Enhanced-Gold", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "IHCPlanIDEnhancedPlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Enhanced-Platinum")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Enhanced-Platinum", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
								 case "IHCPlanIDEnhancedSilver":
		                          if (Arrays.<String>asList(champProductArray).contains("Enhanced-Silver")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Enhanced-Silver", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "IHCPlanIDEnhancedDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Enhanced-Diamond")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Enhanced-Diamond", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "IHCPlanIDEnhancedCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Enhanced-Custom")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Enhanced-Custom", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                      } 
		                      if (productType != null && !productType.equalsIgnoreCase("")) {
		                        JSONObject obj2 = new JSONObject(productType);
		                        if (hasKey(obj2, fieldName)) {
		                          fieldValue = getJSONKeyValue(obj2, fieldName);
		                        } else {
		                          fieldValue = "";
		                        } 
		                      } else {
		                        fieldValue = "";
		                      } 
		                      document.createTextElement(sourceField, fieldValue, rootNode);
		                    } 
		                    continue;
		                  } 
						  //IHC ends here
		                  if (groupHeader.equalsIgnoreCase("IndividualCriticalIllnessChampion")) {
		                    String champValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Individual_Critical_Illness_Champion__c']", null, masterAppNode), "");
		                    champValue = (champValue == null) ? "" : champValue;
		                    if (champValue != null && !champValue.equalsIgnoreCase("") && !champValue.equalsIgnoreCase("null")) {
		                      String[] champProductArray = champValue.split(";");
		                      switch (fieldName) {
		                        case "IndiCIChampPlanIDGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Gold")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Gold", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "IndiCIChampPlanIDPlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Platinum")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Platinum", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "IndiCIChampPlanIDDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Diamond")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Diamond", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "IndiCIChampPlanIDCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Custom")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Custom", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                      } 
		                      if (productType != null && !productType.equalsIgnoreCase("")) {
		                        JSONObject obj2 = new JSONObject(productType);
		                        if (hasKey(obj2, fieldName)) {
		                          fieldValue = getJSONKeyValue(obj2, fieldName);
		                        } else {
		                          fieldValue = "";
		                        } 
		                      } else {
		                        fieldValue = "";
		                      } 
		                      document.createTextElement(sourceField, fieldValue, rootNode);
		                    } 
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("IndividualAccidentChampion")) {
		                    String champValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Individual_Accident_Champion__c']", null, masterAppNode), "");
		                    champValue = (champValue == null) ? "" : champValue;
		                    if (champValue != null && !champValue.equalsIgnoreCase("") && !champValue.equalsIgnoreCase("null")) {
		                      String[] champProductArray = champValue.split(";");
		                      switch (fieldName) {
		                        case "IndiAccChampPlanIDGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Gold")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Gold", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "IndiAccChampPlanIDPlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Platinum")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Platinum", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "IndiAccChampPlanIDDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Diamond")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Diamond", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "IndiAccChampPlanIDCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Custom")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Custom", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                      } 
		                      if (productType != null && !productType.equalsIgnoreCase("")) {
		                        JSONObject obj2 = new JSONObject(productType);
		                        if (hasKey(obj2, fieldName)) {
		                          fieldValue = getJSONKeyValue(obj2, fieldName);
		                        } else {
		                          fieldValue = "";
		                        } 
		                      } else {
		                        fieldValue = "";
		                      } 
		                      document.createTextElement(sourceField, fieldValue, rootNode);
		                    } 
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("AceGroupCriticalIllness")) {
		                    String champValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='ACE_Group_Critical_Illness_UW__c']", null, masterAppNode), "");
		                    champValue = (champValue == null) ? "" : champValue;
		                    if (champValue != null && !champValue.equalsIgnoreCase("") && !champValue.equalsIgnoreCase("null")) {
		                      String[] champProductArray = champValue.split(";");
		                      switch (fieldName) {
		                        case "AceGrpCIPlanIDGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Gold")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Gold", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "AceGrpCIPlanIDPlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Platinum")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Platinum", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "AceGrpCIPlanIDDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Diamond")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Diamond", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "AceGrpCIPlanIDCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Custom")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Custom", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                      } 
		                      if (productType != null && !productType.equalsIgnoreCase("")) {
		                        JSONObject obj2 = new JSONObject(productType);
		                        if (hasKey(obj2, fieldName)) {
		                          fieldValue = getJSONKeyValue(obj2, fieldName);
		                        } else {
		                          fieldValue = "";
		                        } 
		                      } else {
		                        fieldValue = "";
		                      } 
		                      document.createTextElement(sourceField, fieldValue, rootNode);
		                    } 
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("AceGroupAccident")) {
		                    String champValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='ACE_Group_Accident_UW__c']", null, masterAppNode), "");
		                    champValue = (champValue == null) ? "" : champValue;
		                    if (champValue != null && !champValue.equalsIgnoreCase("") && !champValue.equalsIgnoreCase("null")) {
		                      String[] champProductArray = champValue.split(";");
		                      switch (fieldName) {
		                        case "AceGrpAccPlanIDGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Gold")) {
		                            if (caseType != null && !caseType.isEmpty() && (caseType.equalsIgnoreCase("Expedited")|| caseType.equalsIgnoreCase("Bundled GI"))) {
		                              fieldValue = "Gold";
		                            } else if (Arrays.<String>asList(champProductArray).contains("Gold")) {
		                              if (productType != null && !productType.equalsIgnoreCase("")) {
		                                JSONObject obj2 = new JSONObject(productType);
		                                if (hasKey(obj2, fieldName)) {
		                                  updatedPlanIds = getJSONKeyValue(obj2, fieldName);
		                                  if (Node.isValidNode(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad))) {
		                                    updatedPlanIds = updatedPlanIds + "," + Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad), "");
		                                    fieldValue = formatPlanString(updatedPlanIds);
		                                  } 
		                                } else {
		                                  fieldValue = "";
		                                } 
		                              } else {
		                                fieldValue = "";
		                              } 
		                            } 
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "AceGrpAccPlanIDPlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Platinum")) {
		                            if (caseType != null && !caseType.isEmpty() && (caseType.equalsIgnoreCase("Expedited")|| caseType.equalsIgnoreCase("Bundled GI"))) {
		                              fieldValue = "Platinum";
		                            } else if (productType != null && !productType.equalsIgnoreCase("")) {
		                              JSONObject obj2 = new JSONObject(productType);
		                              if (hasKey(obj2, fieldName)) {
		                                updatedPlanIds = getJSONKeyValue(obj2, fieldName);
		                                if (Node.isValidNode(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad))) {
		                                  updatedPlanIds = updatedPlanIds + "," + Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad), "");
		                                  fieldValue = formatPlanString(updatedPlanIds);
		                                } 
		                              } else {
		                                fieldValue = "";
		                              } 
		                            } else {
		                              fieldValue = "";
		                            } 
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "AceGrpAccPlanIDDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Diamond")) {
		                            if (caseType != null && !caseType.isEmpty() && (caseType.equalsIgnoreCase("Expedited")|| caseType.equalsIgnoreCase("Bundled GI"))) {
		                              fieldValue = "Diamond";
		                            } else if (productType != null && !productType.equalsIgnoreCase("")) {
		                              JSONObject obj2 = new JSONObject(productType);
		                              if (hasKey(obj2, fieldName)) {
		                                updatedPlanIds = getJSONKeyValue(obj2, fieldName);
		                                if (Node.isValidNode(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad))) {
		                                  updatedPlanIds = updatedPlanIds + "," + Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad), "");
		                                  fieldValue = formatPlanString(updatedPlanIds);
		                                } 
		                              } else {
		                                fieldValue = "";
		                              } 
		                            } else {
		                              fieldValue = "";
		                            } 
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "AceGrpAccPlanIDCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Custom")) {
		                            if (caseType != null && !caseType.isEmpty() && (caseType.equalsIgnoreCase("Expedited")|| caseType.equalsIgnoreCase("Bundled GI"))) {
		                              fieldValue = "Custom";
		                            } else if (productType != null && !productType.equalsIgnoreCase("")) {
		                              JSONObject obj2 = new JSONObject(productType);
		                              if (hasKey(obj2, fieldName)) {
		                                updatedPlanIds = getJSONKeyValue(obj2, fieldName);
		                                if (Node.isValidNode(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad))) {
		                                  updatedPlanIds = updatedPlanIds + "," + Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad), "");
		                                  fieldValue = formatPlanString(updatedPlanIds);
		                                } 
		                              } else {
		                                fieldValue = "";
		                              } 
		                            } else {
		                              fieldValue = "";
		                            } 
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                      } 
		                      if (productType != null && !productType.equalsIgnoreCase("")) {
		                        JSONObject obj2 = new JSONObject(productType);
		                        if (hasKey(obj2, fieldName)) {
		                          fieldValue = getJSONKeyValue(obj2, fieldName);
		                        } else {
		                          fieldValue = "";
		                        } 
		                      } else {
		                        fieldValue = "";
		                      } 
		                      document.createTextElement(sourceField, fieldValue, rootNode);
		                    } 
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("EGroupDisabilityChampion")) {
		                    String champValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Group_Disability_Champion__c']", null, masterAppNode), "");
		                    champValue = (champValue == null) ? "" : champValue;
		                    if (champValue != null && !champValue.equalsIgnoreCase("") && !champValue.equalsIgnoreCase("null")) {
		                      String[] champProductArray = champValue.split(";");
		                      switch (fieldName) {
		                        case "EGrpDIChampPlanIDGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Gold")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Gold", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EGrpDIChampPlanIDPlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Platinum")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Platinum", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EGrpDIChampPlanIDDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Diamond")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Diamond", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EGrpDIChampPlanIDCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Custom")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Custom", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                      } 
		                      if (productType != null && !productType.equalsIgnoreCase("")) {
		                        JSONObject obj2 = new JSONObject(productType);
		                        if (hasKey(obj2, fieldName)) {
		                          fieldValue = getJSONKeyValue(obj2, fieldName);
		                        } else {
		                          fieldValue = "";
		                        } 
		                      } else {
		                        fieldValue = "";
		                      } 
		                      document.createTextElement(sourceField, fieldValue, rootNode);
		                    } 
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("ECriticalIllnessChampion")) {
		                    String champValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Critical_Illness_Champion__c']", null, masterAppNode), "");
		                    champValue = (champValue == null) ? "" : champValue;
		                    if (champValue != null && !champValue.equalsIgnoreCase("") && !champValue.equalsIgnoreCase("null")) {
		                      String[] champProductArray = champValue.split(";");
		                      switch (fieldName) {
		                        case "ECIChampPlanIDGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Gold")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Gold", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "ECIChampPlanIDPlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Platinum")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Platinum", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "ECIChampPlanIDDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Diamond")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Diamond", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "ECIChampPlanIDCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Custom")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Custom", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                      } 
		                      if (productType != null && !productType.equalsIgnoreCase("")) {
		                        JSONObject obj2 = new JSONObject(productType);
		                        if (hasKey(obj2, fieldName)) {
		                          fieldValue = getJSONKeyValue(obj2, fieldName);
		                        } else {
		                          fieldValue = "";
		                        } 
		                      } else {
		                        fieldValue = "";
		                      } 
		                      document.createTextElement(sourceField, fieldValue, rootNode);
		                    } 
		                    continue;
		                  } 
						  //added for IHC
						  if (groupHeader.equalsIgnoreCase("EIndividualHospitalChampion")) {
		                    String champValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_IHC_Plan_Type__c']", null, masterAppNode), "");
		                    champValue = (champValue == null) ? "" : champValue;
		                    if (champValue != null && !champValue.equalsIgnoreCase("") && !champValue.equalsIgnoreCase("null")) {
		                      String[] champProductArray = champValue.split(";");
		                      switch (fieldName) {
		                        case "EIHCPlanIDBaseGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Base-Gold")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Base-Gold", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EIHCPlanIDBasePlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Base-Platinum")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Base-Platinum", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
								case "EIHCPlanIDBaseSilver":
		                          if (Arrays.<String>asList(champProductArray).contains("Base-Silver")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Base-Silver", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EIHCPlanIDBaseDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Base-Diamond")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Base-Diamond", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EIHCPlanIDBaseCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Base-Custom")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Base-Custom", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
								  case "EIHCPlanIDEnhancedGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Enhanced-Gold")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Enhanced-Gold", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EIHCPlanIDEnhancedPlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Enhanced-Platinum")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Enhanced-Platinum", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
								case "EIHCPlanIDEnhancedSilver":
		                          if (Arrays.<String>asList(champProductArray).contains("Enhanced-Silver")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Enhanced-Silver", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EIHCPlanIDEnhancedDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Enhanced-Diamond")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Enhanced-Diamond", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EIHCPlanIDEnhancedCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Enhanced-Custom")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Enhanced-Custom", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                      } 
		                      if (productType != null && !productType.equalsIgnoreCase("")) {
		                        JSONObject obj2 = new JSONObject(productType);
		                        if (hasKey(obj2, fieldName)) {
		                          fieldValue = getJSONKeyValue(obj2, fieldName);
		                        } else {
		                          fieldValue = "";
		                        } 
		                      } else {
		                        fieldValue = "";
		                      } 
		                      document.createTextElement(sourceField, fieldValue, rootNode);
		                    } 
		                    continue;
		                  } 
						  //IHC ends here
		                  if (groupHeader.equalsIgnoreCase("EIndividualCriticalIllnessChampion")) {
		                    String champValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Individual_Critical_Illness_Champion__c']", null, masterAppNode), "");
		                    champValue = (champValue == null) ? "" : champValue;
		                    if (champValue != null && !champValue.equalsIgnoreCase("") && !champValue.equalsIgnoreCase("null")) {
		                      String[] champProductArray = champValue.split(";");
		                      switch (fieldName) {
		                        case "EIndiCIChampPlanIDGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Gold")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Gold", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EIndiCIChampPlanIDPlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Platinum")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Platinum", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EIndiCIChampPlanIDDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Diamond")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Diamond", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EIndiCIChampPlanIDCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Custom")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Custom", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                      } 
		                      if (productType != null && !productType.equalsIgnoreCase("")) {
		                        JSONObject obj2 = new JSONObject(productType);
		                        if (hasKey(obj2, fieldName)) {
		                          fieldValue = getJSONKeyValue(obj2, fieldName);
		                        } else {
		                          fieldValue = "";
		                        } 
		                      } else {
		                        fieldValue = "";
		                      } 
		                      document.createTextElement(sourceField, fieldValue, rootNode);
		                    } 
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("EIndividualAccidentChampion")) {
		                    String champValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Individual_Accident_Champion__c']", null, masterAppNode), "");
		                    champValue = (champValue == null) ? "" : champValue;
		                    if (champValue != null && !champValue.equalsIgnoreCase("") && !champValue.equalsIgnoreCase("null")) {
		                      String[] champProductArray = champValue.split(";");
		                      switch (fieldName) {
		                        case "EIndiAccChampPlanIDGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Gold")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Gold", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EIndiAccChampPlanIDPlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Platinum")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Platinum", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EIndiAccChampPlanIDDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Diamond")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Diamond", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EIndiAccChampPlanIDCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Custom")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Custom", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                      } 
		                      if (productType != null && !productType.equalsIgnoreCase("")) {
		                        JSONObject obj2 = new JSONObject(productType);
		                        if (hasKey(obj2, fieldName)) {
		                          fieldValue = getJSONKeyValue(obj2, fieldName);
		                        } else {
		                          fieldValue = "";
		                        } 
		                      } else {
		                        fieldValue = "";
		                      } 
		                      document.createTextElement(sourceField, fieldValue, rootNode);
		                    } 
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("EAceGroupCriticalIllness")) {
		                    String champValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='ACE_Group_Critical_Illness_UW__c']", null, masterAppNode), "");
		                    champValue = (champValue == null) ? "" : champValue;
		                    if (champValue != null && !champValue.equalsIgnoreCase("") && !champValue.equalsIgnoreCase("null")) {
		                      String[] champProductArray = champValue.split(";");
		                      switch (fieldName) {
		                        case "EAceGrpCIPlanIDGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Gold")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Gold", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EAceGrpCIPlanIDPlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Platinum")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Platinum", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EAceGrpCIPlanIDDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Diamond")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Diamond", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EAceGrpCIPlanIDCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Custom")) {
		                            fieldValue = getPlanInformation(caseType, champValue, opMode, groupHeader, fieldName, sourceField, "Custom", productType, updatedPlanIds, masterAppNode, payLoad);
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                      } 
		                      if (productType != null && !productType.equalsIgnoreCase("")) {
		                        JSONObject obj2 = new JSONObject(productType);
		                        if (hasKey(obj2, fieldName)) {
		                          fieldValue = getJSONKeyValue(obj2, fieldName);
		                        } else {
		                          fieldValue = "";
		                        } 
		                      } else {
		                        fieldValue = "";
		                      } 
		                      document.createTextElement(sourceField, fieldValue, rootNode);
		                    } 
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("GrpAccChampion")) {
		                    switch (fieldName) {
		                      case "grpAccChampVal":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Group_Accident__c']", null, masterAppNode), "");
		                        break;
		                      default:
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("EGrpAccChampion")) {
		                    switch (fieldName) {
		                      case "EgrpAccChampVal":
		                        fieldValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='UW_Group_Accident__c']", null, masterAppNode), "");
		                        break;
		                      default:
		                        fieldValue = "";
		                        break;
		                    } 
		                    document.createTextElement(sourceField, fieldValue, rootNode);
		                    continue;
		                  } 
		                  if (groupHeader.equalsIgnoreCase("EAceGroupAccident")) {
		                    String champValue = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='ACE_Group_Accident_UW__c']", null, masterAppNode), "");
		                    champValue = (champValue == null) ? "" : champValue;
		                    if (champValue != null && !champValue.equalsIgnoreCase("") && !champValue.equalsIgnoreCase("null")) {
		                      String[] champProductArray = champValue.split(";");
		                      switch (fieldName) {
		                        case "EAceGrpAccPlanIDGold":
		                          if (Arrays.<String>asList(champProductArray).contains("Gold")) {
		                            if (caseType != null && !caseType.isEmpty() && (caseType.equalsIgnoreCase("Expedited")|| caseType.equalsIgnoreCase("Bundled GI"))) {
		                              fieldValue = "Gold";
		                            } else if (productType != null && !productType.equalsIgnoreCase("")) {
		                              JSONObject obj2 = new JSONObject(productType);
		                              if (hasKey(obj2, fieldName)) {
		                                updatedPlanIds = getJSONKeyValue(obj2, fieldName);
		                                if (Node.isValidNode(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad))) {
		                                  updatedPlanIds = updatedPlanIds + "," + Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad), "");
		                                  fieldValue = formatPlanString(updatedPlanIds);
		                                } 
		                              } else {
		                                fieldValue = "";
		                              } 
		                            } else {
		                              fieldValue = "";
		                            } 
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EAceGrpAccPlanIDPlatinum":
		                          if (Arrays.<String>asList(champProductArray).contains("Platinum")) {
		                            if (caseType != null && !caseType.isEmpty() && (caseType.equalsIgnoreCase("Expedited")|| caseType.equalsIgnoreCase("Bundled GI"))) {
		                              fieldValue = "Platinum";
		                            } else if (productType != null && !productType.equalsIgnoreCase("")) {
		                              JSONObject obj2 = new JSONObject(productType);
		                              if (hasKey(obj2, fieldName)) {
		                                updatedPlanIds = getJSONKeyValue(obj2, fieldName);
		                                if (Node.isValidNode(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad))) {
		                                  updatedPlanIds = updatedPlanIds + "," + Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad), "");
		                                  fieldValue = formatPlanString(updatedPlanIds);
		                                } 
		                              } else {
		                                fieldValue = "";
		                              } 
		                            } else {
		                              fieldValue = "";
		                            } 
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EAceGrpAccPlanIDDiamond":
		                          if (Arrays.<String>asList(champProductArray).contains("Diamond")) {
		                            if (caseType != null && !caseType.isEmpty() && (caseType.equalsIgnoreCase("Expedited")|| caseType.equalsIgnoreCase("Bundled GI"))) {
		                              fieldValue = "Diamond";
		                            } else if (productType != null && !productType.equalsIgnoreCase("")) {
		                              JSONObject obj2 = new JSONObject(productType);
		                              if (hasKey(obj2, fieldName)) {
		                                updatedPlanIds = getJSONKeyValue(obj2, fieldName);
		                                if (Node.isValidNode(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad))) {
		                                  updatedPlanIds = updatedPlanIds + "," + Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad), "");
		                                  fieldValue = formatPlanString(updatedPlanIds);
		                                } 
		                              } else {
		                                fieldValue = "";
		                              } 
		                            } else {
		                              fieldValue = "";
		                            } 
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                        case "EAceGrpAccPlanIDCustom":
		                          if (Arrays.<String>asList(champProductArray).contains("Custom")) {
		                            if (caseType != null && !caseType.isEmpty() && (caseType.equalsIgnoreCase("Expedited")|| caseType.equalsIgnoreCase("Bundled GI"))) {
		                              fieldValue = "Custom";
		                            } else if (productType != null && !productType.equalsIgnoreCase("")) {
		                              JSONObject obj2 = new JSONObject(productType);
		                              if (hasKey(obj2, fieldName)) {
		                                updatedPlanIds = getJSONKeyValue(obj2, fieldName);
		                                if (Node.isValidNode(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad))) {
		                                  updatedPlanIds = updatedPlanIds + "," + Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad), "");
		                                  fieldValue = formatPlanString(updatedPlanIds);
		                                } 
		                              } else {
		                                fieldValue = "";
		                              } 
		                            } else {
		                              fieldValue = "";
		                            } 
		                            document.createTextElement(sourceField, fieldValue, rootNode);
		                          } 
		                          continue;
		                      } 
		                      if (productType != null && !productType.equalsIgnoreCase("")) {
		                        JSONObject obj2 = new JSONObject(productType);
		                        if (hasKey(obj2, fieldName)) {
		                          fieldValue = getJSONKeyValue(obj2, fieldName);
		                        } else {
		                          fieldValue = "";
		                        } 
		                      } else {
		                        fieldValue = "";
		                      } 
		                      document.createTextElement(sourceField, fieldValue, rootNode);
		                    } 
		                    continue;
		                  } 
		                  document.createTextElement(sourceField, fieldValue, rootNode);
		                } 
		              } 
		            } 
		          } 
		        } 
		      } 
		      response = executeSaveAndCompleteSfProcess(rootNode);
		      if (Node.isValidNode(response)) {
		        String status = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Status']", null, response), "");
		        if (status == null || !status.equalsIgnoreCase("Successful"))
		          throw new Exception("Error in sending salseforce data to WIMS"); 
		      } 
		      rootNode = Node.duplicate(response);
		    } catch (Exception ex) {
		      logger.error("Error in frameSFXmlData method:" + ex);
		      throw ex;
		    } finally {
		      if (Node.isValidNode(response))
		        Node.delete(response); 
		      if (Node.isValidNode(masterAppNode))
		        Node.delete(masterAppNode); 
		    } 
		    return rootNode;
		  }
		  

		  public static String getPlanInformation(String caseType, String champValue, String opMode, String groupHeader, String fieldName, String sourceField, String planType, String productType, String updatedPlanIds, int masterAppNode, int payLoad) throws Exception {
		    String[] champProductArray = champValue.split(";");
		    String fieldValue = "", levelForCI="", benefitElimination="", ihcFunding="", ihcHospAdmission="";
						levelForCI = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='levelForCI']", null, payLoad), "");
		benefitElimination= Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='beneDurationElim']", null, payLoad), "");
		ihcFunding= Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='IHCFunding']", null, payLoad), "");
		ihcHospAdmission= Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='IHCHospAdmission']", null, payLoad), "");	   
		    if (caseType != null && !caseType.isEmpty() && (caseType.equalsIgnoreCase("Expedited")|| caseType.equalsIgnoreCase("Bundled GI"))) {
		      if (Arrays.<String>asList(champProductArray).contains(planType)) {
		/*        if (Node.isValidNode(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad)))
		          updatedPlanIds = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad), ""); */
		        fieldValue = getUpdatedPlanDetails(opMode, groupHeader, fieldName, planType, productType, updatedPlanIds, masterAppNode, levelForCI, benefitElimination, ihcFunding, ihcHospAdmission);
		      if (productType != null && !productType.equalsIgnoreCase("")) {
		        JSONObject obj2 = new JSONObject(productType);
		        if (hasKey(obj2, fieldName))
		          if (Node.isValidNode(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad))) {
		            updatedPlanIds = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad), "");
		            
		          }  
		      }
		      fieldValue =fieldValue+","+ updatedPlanIds;
		      fieldValue = formatPlanString(fieldValue);
		      } else if (productType != null && !productType.equalsIgnoreCase("")) {
		        JSONObject obj2 = new JSONObject(productType);
		        if (hasKey(obj2, fieldName))
		          if (Node.isValidNode(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad))) {
		            updatedPlanIds = Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad), "");
		            fieldValue = updatedPlanIds;
		          }  
		      } 
		    } else if (Arrays.<String>asList(champProductArray).contains(planType)) {
		      if (productType != null && !productType.equalsIgnoreCase("")) {
		        JSONObject obj2 = new JSONObject(productType);
		        if (hasKey(obj2, fieldName)) {
		          updatedPlanIds = getJSONKeyValue(obj2, fieldName);
		          if (Node.isValidNode(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad))) {
		            updatedPlanIds = updatedPlanIds + "," + Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='" + sourceField + "']", null, payLoad), "");
		            fieldValue = formatPlanString(updatedPlanIds);
		          } 
		        } else {
		          fieldValue = "";
		        } 
		      } else {
		        fieldValue = "";
		      } 
		    } 
		    return fieldValue;
		  }
		  
		public static String getUpdatedPlanDetails(String opMode, String groupHeader,String fieldName,String planName, String productJSON,String updatedPlanIds, int masterAppNode, String levelForCI, String benefitElimination, String ihcFunding, String ihcHospAdmission) 
	{
		String planValue="",primaryState="",dirClass="",benefitDuration="",elimPeriod="",indAccOption="",uwWaive="", caseHandlingTypeSF="", employeeCount="";
		try
		{
			if(Node.isValidNode(masterAppNode))
			{
				indAccOption=Node.getData(XPath.getFirstMatch(".//*[local-name()='Ind_Acc_Option__c']",null,masterAppNode));			
				primaryState= Node.getData(XPath.getFirstMatch(".//*[local-name()='Situs_State__c']",null,masterAppNode));
				dirClass= Node.getData(XPath.getFirstMatch(".//*[local-name()='DI_Rating_Class__c']",null,masterAppNode));
				/*elimPeriod= Node.getData(XPath.getFirstMatch(".//*[local-name()='DC_Elimination_Period__c']",null,masterAppNode));
				benefitDuration= Node.getData(XPath.getFirstMatch(".//*[local-name()='DC_Benefit_Duration__c']",null,masterAppNode));*/
				uwWaive=Node.getData(XPath.getFirstMatch(".//*[local-name()='UW_CI_With_Waive_Underwriting__c']",null,masterAppNode));

				int masterSubNode= XPath.getFirstMatch(".//*[local-name()='MasterApplication']",null,masterAppNode);
				caseHandlingTypeSF=Node.getDataWithDefault(XPath.getFirstMatch(".//*[local-name()='Enrollment_Case_Type__c']", null, masterSubNode), "");

				int benefitEliminationlength=0;
				String[] indbenefit= new String[50];
				String[] benefitDuratn= new String[50];
			if(benefitElimination.length()>0)
				{
				indbenefit= benefitElimination.split(";");
				benefitEliminationlength= indbenefit.length;
				}
				if(opMode!=null && !opMode.equalsIgnoreCase("") && opMode.equalsIgnoreCase("INSERT") )
				{
					switch (groupHeader) 
					{
						case "GroupDisabilityChampion":

						
							
							if(benefitEliminationlength>0)
								{
							for(int i=0;i<benefitEliminationlength;i++)
							{									
								benefitDuratn= indbenefit[i].split(" - ");
							benefitDuratn[0]=(benefitDuratn[0]!=null)?benefitDuratn[0].replaceAll("[^\\d.)(]", ""):"";
							benefitDuration=benefitDuratn[0]; 
							elimPeriod= benefitDuratn[1];
							
								if(planValue!=null && !planValue.equalsIgnoreCase(""))
								planValue= planValue+","+getPlanIdByParams("Group DI",planName,primaryState,dirClass,benefitDuration,elimPeriod,caseHandlingTypeSF);
								
								else
								planValue= getPlanIdByParams("Group DI",planName,primaryState,dirClass,benefitDuration,elimPeriod,caseHandlingTypeSF);
									
							}
							}
							break;
						case "CriticalIllnessChampion":
							planValue=getPlanIdByParams("Group CI",planName,primaryState,"",levelForCI,"",caseHandlingTypeSF);
							break;
	   //added for IHC
						case "IndividualHospitalChampion":
						planValue=getPlanIdByParams("Individual Hospital Champion",planName,primaryState,ihcHospAdmission,levelForCI,ihcFunding,caseHandlingTypeSF);
							break;
						case "IndividualCriticalIllnessChampion":
							//planValue=getPlanIdByParams("Individual CI",planName,primaryState,"","","",caseHandlingTypeSF);
										if((primaryState!=null && primaryState.equalsIgnoreCase("FL")) && (uwWaive!=null && !uwWaive.equalsIgnoreCase("")))
										{
											planValue=getPlanIdByParams("Individual CI",planName,primaryState,"",uwWaive,"",caseHandlingTypeSF);
										}
										else
										{
											planValue=getPlanIdByParams("Individual CI",planName,primaryState,"","","",caseHandlingTypeSF);
										}
							break;
						case "IndividualAccidentChampion":
							planValue=getPlanIdByParams("Individual Acc",planName,primaryState,"",indAccOption,"",caseHandlingTypeSF);
							
							break;
						case "AceGroupCriticalIllness":
							planValue=getPlanIdByParams("AceGroupCI",planName,primaryState,"","","",caseHandlingTypeSF);
							break;	
						case "EGroupDisabilityChampion":
							if(benefitEliminationlength>0)
								{
							for(int i=0;i<benefitEliminationlength;i++)
							{	
								//indbenefit=benefitElimination.split(",")[i];
								
								benefitDuratn= indbenefit[i].split(" - ");
							benefitDuratn[0]=(benefitDuratn[0]!=null)?benefitDuratn[0].replaceAll("[^\\d.)(]", ""):"";
							benefitDuration=benefitDuratn[0]; 
							elimPeriod= benefitDuratn[1];
								
								if(planValue!=null && !planValue.equalsIgnoreCase(""))
								planValue= planValue+","+getPlanIdByParams("Group DI",planName,primaryState,dirClass,benefitDuration,elimPeriod,caseHandlingTypeSF);
								
								else
								planValue= getPlanIdByParams("Group DI",planName,primaryState,dirClass,benefitDuration,elimPeriod,caseHandlingTypeSF);
									
							}
								}
							break;
						case "ECriticalIllnessChampion":
							planValue = getPlanIdByParams("Group CI", planName, primaryState, "", levelForCI, "",caseHandlingTypeSF);
							break;
					//added for IHC  
						case "EIndividualHospitalChampion":
							planValue=getPlanIdByParams("Individual Hospital Champion",planName,primaryState,ihcHospAdmission,levelForCI,ihcFunding,caseHandlingTypeSF);
							break;
				        case "EIndividualCriticalIllnessChampion":
				        	if ((primaryState!=null && primaryState.equalsIgnoreCase("FL")) && (uwWaive!=null && !uwWaive.equalsIgnoreCase(""))) {
				        		planValue = getPlanIdByParams("Individual CI", planName, primaryState, "", uwWaive, "",caseHandlingTypeSF);
				                break;
				        	} 
				        	planValue = getPlanIdByParams("Individual CI", planName, primaryState, "", "", "",caseHandlingTypeSF);
				        	break;
				        case "EIndividualAccidentChampion":
				        	planValue = getPlanIdByParams("Individual Acc", planName, primaryState, "", indAccOption, "",caseHandlingTypeSF);
				        	break;
				        case "EAceGroupCriticalIllness":
				        	planValue = getPlanIdByParams("AceGroupCI", planName, primaryState, "", "", "",caseHandlingTypeSF);
				        	break;
						default:
							break;
					}
						
				}
				else
				{
					if(productJSON!=null && !productJSON.equalsIgnoreCase(""))
					{
						try
						{
							JSONObject object=new JSONObject(productJSON);
							if(!hasKey(object,fieldName))
							{
								//planValue=getPlanIdByParams("DI",planName,primaryState,dirClass,benefitDuration,elimPeriod,caseHandlingTypeSF);
								switch (groupHeader) 
								{
									case "GroupDisabilityChampion":
		  if(benefitEliminationlength>0)
								{
										for(int i=0;i<benefitEliminationlength;i++)
							{	
								
								benefitDuratn= indbenefit[i].split(" - ");
							benefitDuratn[0]=(benefitDuratn[0]!=null)?benefitDuratn[0].replaceAll("[^\\d.)(]", ""):"";
							benefitDuration=benefitDuratn[0]; 
							elimPeriod= benefitDuratn[1];
								
								if(planValue!=null && !planValue.equalsIgnoreCase(""))
								planValue= planValue+","+getPlanIdByParams("Group DI",planName,primaryState,dirClass,benefitDuration,elimPeriod,caseHandlingTypeSF);
								
								else
								planValue= getPlanIdByParams("Group DI",planName,primaryState,dirClass,benefitDuration,elimPeriod,caseHandlingTypeSF);
									
							}
								}
										break;
									case "CriticalIllnessChampion":
										planValue=getPlanIdByParams("Group CI",planName,primaryState,"",levelForCI,"",caseHandlingTypeSF);
										break;
										//added for IHC
									case "IndividualHospitalChampion":
							planValue=getPlanIdByParams("Individual Hospital Champion",planName,primaryState,ihcHospAdmission,levelForCI,ihcFunding,caseHandlingTypeSF);
										break;
									case "IndividualCriticalIllnessChampion":
										//planValue=getPlanIdByParams("Individual CI",planName,primaryState,"","","",caseHandlingTypeSF);
										if((primaryState!=null && primaryState.equalsIgnoreCase("FL")) && (uwWaive!=null && !uwWaive.equalsIgnoreCase("")))
										{
											planValue=getPlanIdByParams("Individual CI",planName,primaryState,"",uwWaive,"",caseHandlingTypeSF);
										}
										else
										{
											planValue=getPlanIdByParams("Individual CI",planName,primaryState,"","","",caseHandlingTypeSF);
										}
										break;
									case "IndividualAccidentChampion":
										planValue=getPlanIdByParams("Individual Acc",planName,primaryState,"",indAccOption,"",caseHandlingTypeSF);
										
										break;
									case "AceGroupCriticalIllness":
										planValue=getPlanIdByParams("AceGroupCI",planName,primaryState,"","","",caseHandlingTypeSF);
										break;					
									case "EGroupDisabilityChampion":
										//commenetd for validation
										if(benefitEliminationlength>0)
								{
										for(int i=0;i<benefitEliminationlength;i++)
							{	
				
								benefitDuratn= indbenefit[i].split(" - ");
							benefitDuratn[0]=(benefitDuratn[0]!=null)?benefitDuratn[0].replaceAll("[^\\d.)(]", ""):"";
							benefitDuration=benefitDuratn[0]; 
							elimPeriod= benefitDuratn[1];
								
								if(planValue!=null && !planValue.equalsIgnoreCase(""))
								planValue= planValue+","+getPlanIdByParams("Group DI",planName,primaryState,dirClass,benefitDuration,elimPeriod,caseHandlingTypeSF);
								
								else
								planValue= getPlanIdByParams("Group DI",planName,primaryState,dirClass,benefitDuration,elimPeriod,caseHandlingTypeSF);
								
							}								
							}
										break;
									case "ECriticalIllnessChampion":
										planValue = getPlanIdByParams("Group CI", planName, primaryState, "", levelForCI, "",caseHandlingTypeSF);
										break;
										//added for IHC
									case "EIndividualHospitalChampion":
							planValue=getPlanIdByParams("Individual Hospital Champion",planName,primaryState,ihcHospAdmission,levelForCI,ihcFunding,caseHandlingTypeSF);
										break;
							        case "EIndividualCriticalIllnessChampion":
							        	if ((primaryState!=null && primaryState.equalsIgnoreCase("FL")) && (uwWaive!=null && !uwWaive.equalsIgnoreCase(""))) {
							        		planValue = getPlanIdByParams("Individual CI", planName, primaryState, "", uwWaive, "",caseHandlingTypeSF);
							                break;
							        	} 
							        	planValue = getPlanIdByParams("Individual CI", planName, primaryState, "", "", "",caseHandlingTypeSF);
							        	break;
							        case "EIndividualAccidentChampion":
							        	planValue = getPlanIdByParams("Individual Acc", planName, primaryState, "", indAccOption, "",caseHandlingTypeSF);
							        	break;
							        case "EAceGroupCriticalIllness":
							        	planValue = getPlanIdByParams("AceGroupCI", planName, primaryState, "", "", "",caseHandlingTypeSF);
							        	break;
							
									default:
										break;
								}
							}
							else
							{	
								String oldPlanId=getJSONKeyValue(object, fieldName);
								switch (groupHeader) 
								{
									case "GroupDisabilityChampion":
		  										
										
										
										if(benefitEliminationlength>0)
								{
										for(int i=0;i<benefitEliminationlength;i++)
							{	
								
								benefitDuratn= indbenefit[i].split(" - ");
							benefitDuratn[0]=(benefitDuratn[0]!=null)?benefitDuratn[0].replaceAll("[^\\d.)(]", ""):"";
							benefitDuration=benefitDuratn[0]; 
							elimPeriod= benefitDuratn[1];
								
								if(planValue!=null && !planValue.equalsIgnoreCase(""))
								planValue= planValue+","+getPlanIdByParams("Group DI",planName,primaryState,dirClass,benefitDuration,elimPeriod,caseHandlingTypeSF);
								
								else
								planValue= getPlanIdByParams("Group DI",planName,primaryState,dirClass,benefitDuration,elimPeriod,caseHandlingTypeSF);
									
							}
								}
										break;
									case "CriticalIllnessChampion":
										planValue=getPlanIdByParams("Group CI",planName,primaryState,"",levelForCI,"",caseHandlingTypeSF);
										break;
										//added for IHC
									case "IndividualHospitalChampion":
							planValue=getPlanIdByParams("Individual Hospital Champion",planName,primaryState,ihcHospAdmission,levelForCI,ihcFunding,caseHandlingTypeSF);
										break;
									case "IndividualCriticalIllnessChampion":
										//planValue=getPlanIdByParams("Individual CI",planName,primaryState,"","","",caseHandlingTypeSF);
										if((primaryState!=null && primaryState.equalsIgnoreCase("FL")) && (uwWaive!=null && !uwWaive.equalsIgnoreCase("")))
										{
											planValue=getPlanIdByParams("Individual CI",planName,primaryState,"",uwWaive,"",caseHandlingTypeSF);
										}
										else
										{
											planValue=getPlanIdByParams("Individual CI",planName,primaryState,"","","",caseHandlingTypeSF);
										}
										break;
									case "IndividualAccidentChampion":
										planValue=getPlanIdByParams("Individual Acc",planName,primaryState,"",indAccOption,"",caseHandlingTypeSF);

										break;
									case "AceGroupCriticalIllness":
										planValue=getPlanIdByParams("AceGroupCI",planName,primaryState,"","","",caseHandlingTypeSF);
										break;					
									case "EGroupDisabilityChampion":
		  if(benefitEliminationlength>0)
								{
										for(int i=0;i<benefitEliminationlength;i++)
							{	
								
								benefitDuratn= indbenefit[i].split(" - ");
							benefitDuratn[0]=(benefitDuratn[0]!=null)?benefitDuratn[0].replaceAll("[^\\d.)(]", ""):"";
							benefitDuration=benefitDuratn[0]; 
							elimPeriod= benefitDuratn[1];
								
								if(planValue!=null && !planValue.equalsIgnoreCase(""))
								planValue= planValue+","+getPlanIdByParams("Group DI",planName,primaryState,dirClass,benefitDuration,elimPeriod,caseHandlingTypeSF);
								
								else
								planValue= getPlanIdByParams("Group DI",planName,primaryState,dirClass,benefitDuration,elimPeriod,caseHandlingTypeSF);
									
							}
							}
										break;
									case "ECriticalIllnessChampion":
										planValue = getPlanIdByParams("Group CI", planName, primaryState, "", levelForCI, "",caseHandlingTypeSF);
										break;
										//added for IHC
									case "EIndividualHospitalChampion":
							planValue=getPlanIdByParams("Individual Hospital Champion",planName,primaryState,ihcHospAdmission,levelForCI,ihcFunding,caseHandlingTypeSF);
										break;
							        case "EIndividualCriticalIllnessChampion":
							        	if((primaryState!=null && primaryState.equalsIgnoreCase("FL")) && (uwWaive!=null && !uwWaive.equalsIgnoreCase(""))) {
							        		planValue = getPlanIdByParams("Individual CI", planName, primaryState, "", uwWaive, "",caseHandlingTypeSF);
							                break;
							        	} 
							        	planValue = getPlanIdByParams("Individual CI", planName, primaryState, "", "", "",caseHandlingTypeSF);
							        	break;
							        case "EIndividualAccidentChampion":
							        	planValue = getPlanIdByParams("Individual Acc", planName, primaryState, "", indAccOption, "",caseHandlingTypeSF);
							        	break;
							        case "EAceGroupCriticalIllness":
							        	planValue = getPlanIdByParams("AceGroupCI", planName, primaryState, "", "", "",caseHandlingTypeSF);
							        	break;
							
									default:
										break;
								}
								//planValue=(oldPlanId!=null && !oldPlanId.equalsIgnoreCase(""))?planValue+","+oldPlanId+","+updatedPlanIds:planValue+","+updatedPlanIds;
								//planValue=(oldPlanId!=null && !oldPlanId.equalsIgnoreCase(""))?oldPlanId+","+updatedPlanIds:updatedPlanIds;
								 //planValue=planValue+","+updatedPlanIds;
								planValue=formatPlanString(planValue);
							}
						}catch(Exception e)
						{
							throw new Exception("The product json is not in proper format:"+e);
						}
					}
				}				
			}			
		}catch(Exception e)
		{
			logger.error("Error in getUpdatedPlanDetails method:Header:"+groupHeader+", Error:"+e);
		}
		return planValue;
		
	}

	public static String getPlanIdByParams(String planName,String type,String state,String diRatingClass,String benefitDuration,String elimPeriod,String caseHandlingTypeSF)
	{
		String planId="";
		if(state!=null && !state.equalsIgnoreCase("") && !state.isEmpty())
		{
			
		String query="select * from WKSOPSCaseHandlingConfig where planname='"+planName+"' and Type1='"+type+"' and State='"+state+"' and Type3='"+diRatingClass+"' and Type2='"+benefitDuration+"' and Type4 ='"+elimPeriod+"' and CaseType ='"+caseHandlingTypeSF+"'";
		QueryObject qObj=new QueryObject(query);
		qObj.setResultClass(WorksiteUtil.class);
		BusObject object=qObj.getObject();
		if(object==null)
		{
			query="select * from WKSOPSCaseHandlingConfig where planname='"+planName+"' and Type1='"+type+"' and State='**' and Type3='"+diRatingClass+"' and Type2='"+benefitDuration+"' and Type4 ='"+elimPeriod+"' and CaseType ='"+caseHandlingTypeSF+"'";
			qObj=new QueryObject(query);
			qObj.setResultClass(WorksiteUtil.class);
			object=qObj.getObject();
		}	
	
		if(object!=null)
		{
			planId=object.getStringProperty("PLANID");
		}
}
		return planId;
	}

public static String createXMLfromJsonSF(String MasterAppNumber, String GroupNumber, String CompanyCode, String Tab) throws Exception
    {
       String jsonData="";
       String convertedXML="";
       String query1 = "SELECT SFData from SFDataRequest WHERE MasterAppNumber= :MasterAppNumber AND GroupNumber= :GroupNumber AND CompanyCode= :CompanyCode AND Tab= :Tab";
            QueryObject queryObj1 = new QueryObject(query1);
                        queryObj1.addParameter("MasterAppNumber", "SFDataRequest.MasterAppNumber", QueryObject.PARAM_STRING, MasterAppNumber);
                        queryObj1.addParameter("GroupNumber", "SFDataRequest.GroupNumber", QueryObject.PARAM_STRING, GroupNumber);
			queryObj1.addParameter("CompanyCode", "SFDataRequest.CompanyCode", QueryObject.PARAM_STRING, CompanyCode);
                        queryObj1.addParameter("Tab", "SFDataRequest.Tab", QueryObject.PARAM_STRING, Tab);  
			queryObj1.setResultClass(WorksiteUtil.class);
            BusObject busObject=queryObj1.getObject();
            if(busObject!=null)
			{
				jsonData=busObject.getStringProperty("SFData");
                         }
		try{
	  JSONObject jObj=new JSONObject(jsonData);
//convertedXML=convertJSONTolXMLLocal(jsonData,"<ProductInfo></ProductInfo>");

convertedXML = XML.toString(jObj);
		}
		catch (Exception e)              
        { 
            logger.error("Error:"+e); 
           // throw e;
        } 
        return convertedXML;
    }

	public static int executeSaveAndCompleteSfProcess(int xml)
	{
		int response=-1;
		SOAPRequestObject sro=null;
		
		try
		{
			sro=new SOAPRequestObject("http://schemas.cordys.com/default", "SaveandCompleteSF ", null, null);
			sro.addParameterAsXml(xml);
			response=sro.execute();
		}catch(Exception ex)
		{
			logger.error("Error in executeSaveAndCompleteSfProcess method:"+ex);
		}
		return response;
	}
public static String WKSOPSPlanActivity(String caseinstanceid, String activity, String activityName, String humanTaskModelId, String subject, String assignee, String principal, String assignToUser, String dueDate, String deliveryModelName, String targetType, String priority,int preassignments)
    {
    	String reqXML="<planactivities>"
    			+"            <activity id=\""+activity+"\" name=\""+activityName+"\">"
    			+"<case:activity xmlns:sch=\"http://schemas.cordys.com/\" xmlns:ns25=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\" xmlns:ns26=\"http://schemas.microsoft.com/2003/10/Serialization/\" xmlns:ns27=\"http://schemas.datacontract.org/2004/07/MRSServiceWrks\" xmlns:ns21=\"http://www.w3.org/2006/05/addressing/wsdl\" xmlns:ns22=\"http://schemas.xmlsoap.org/ws/2004/09/policy\" xmlns:ns23=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" xmlns:ns24=\"http://schemas.xmlsoap.org/ws/2004/09/mex\" xmlns:ns20=\"http://schemas.xmlsoap.org/ws/2004/08/addressing/policy\" xmlns:ns18=\"http://www.w3.org/2005/08/addressing\" xmlns:ns19=\"http://www.w3.org/2007/05/addressing/metadata\" xmlns:ns14=\"http://schemas.cordys.com/default_005056A2-27FA-A1EA-B8AF-D784153BC15E\" xmlns:ns15=\"http://schemas.microsoft.com/ws/2005/12/wsdl/contract\" xmlns:ns16=\"http://schemas.xmlsoap.org/wsdl/soap12/\"  xmlns:ns17=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\" xmlns:ns10=\"http://schemas.cordys.com/1.0/xmlstore\" xmlns:ns11=\"http://schemas.cordys.com/uw/dataservices/1.0\" xmlns:ns12=\"http://tempuri.org/\" xmlns:ns9=\"http://schemas.cordys.com/default\" xmlns:ns13=\"http://schemas.cordys.com/casemanagement/execution/1.0\" xmlns:ns7=\"http://schemas.cordys.com/notification/workflow/1.0\" xmlns:ns8=\"http://schemas.cordys.com/bpm/execution/1.0\" xmlns:ns5=\"http://schemas.cordys.com/WorksiteWSAppPackage\" xmlns:ns6=\"http://schemas.cordys.com/General/ClientAttributes/\" xmlns:ns3=\"http://schemas.cordys.com/bpm/instance/1.0\" xmlns:ns4=\"http://schemas.cordys.com/General/1.0/\" xmlns:ns1=\"http://schemas.cordys.com/1.0/xforms/processapi\" xmlns:ns2=\"http://schemas.cordys.com/\" xmlns:sm=\"http://www.w3.org/2005/07/scxml\" xmlns:case=\"http://schemas.cordys.com/casemanagement/1.0\" xmlns=\"\" id=\""+activity+"\" name=\""+activityName+"\" type=\"HUMANTASK\"> "
    					+"<case:implementation>"
    			+"                     <HumanInteraction xmlns=\"http://schemas.cordys.com/notification/workflow/1.0\">"
    			+"                        <HumanTaskModelId>"+humanTaskModelId+"</HumanTaskModelId>"
    			+"                        <Subject>"+subject+"</Subject>"
    			+"                        <Priority source=\"asInMainCase\">"+priority+"</Priority>"
    			+"                        <SendTo>"
    			+"                           <Target type=\""+targetType+"\">"
    			+"                              <Assignee dynamic=\"false\">"+assignee+"</Assignee>"
    			+"                           </Target>";
    			/*+"                           <ExecutionPolicy>"
    			+"                              <Entry>"
    			+"                                 <Principal type=\"role\">"+principal+"</Principal>"
    			+"                                 <Privilege>view</Privilege>"
    			+"                                 <Privilege>execute</Privilege>"
    			+"                              </Entry>"
    			+"                           </ExecutionPolicy>";*/
    	
    	
    		if(assignToUser != null && !assignToUser.isEmpty())
    		{
    			reqXML +="                           <AssignToUser type=\"ASSIGN\">"+assignToUser+"</AssignToUser>";
    		}
    			reqXML +="                        </SendTo>";
    		if(dueDate != null && !dueDate.isEmpty())
    		{
    	    	reqXML +="  <DueDate isDuration=\"true\" dynamic=\"false\">"+dueDate+"</DueDate>";
    		}
    			reqXML +="                     </HumanInteraction>"
    			+"                  </case:implementation>"
    			+"                  <case:messages>"
    			+"                     <case:input>"
    			+"                        <case:message name=\""+deliveryModelName+"\" ns=\"http://schemas.cordys.com/1.0/xforms/processapi\">"
    			+"                        </case:message>"
    			+"                     </case:input>"
    			+"                  </case:messages>"
    			+"                  <case:associatedevents />"			
    			+"                  <case:escalation />"
				 +   Node.writeToString(XPath.getFirstMatch(".//*[local-name()='preassignment']", null, preassignments),true)
    			+"               </case:activity>"
    			+"            </activity>"
    			+"         </planactivities>";
    	
    	Document doc = new Document();
    	int reqNode=0;
    	try {
    		reqNode = doc.parseString(reqXML);
    	} catch (Exception e) {
    		// TODO Auto-generated catch block
    		e.printStackTrace();
    		logger.log(Severity.ERROR, "Exception Error Request" + e.getMessage());
    	} 
    	String[] parameterName = {"caseinstanceid"};
    	String[] parameterValue = {caseinstanceid};
    	SOAPRequestObject sro=new SOAPRequestObject ("http://schemas.cordys.com/casemanagement/execution/1.0","PlanActivities", parameterName, parameterValue) ;
    	
    	sro.addParameterAsXml(reqNode);
    	logger.log(Severity.ERROR,"OPSPlan Acitivity: "+Node.writeToString(reqNode, true));
    	int response = sro.execute();
    	return Node.writeToString(response, true);
    }
public static String preprocessingUploader(String fileId,String fileName,String fileFormat,String encodedFile,String fileAction,String taskinstanceId,String mode)
{
	//Added by Chaithanya for OT Upgrade Migration for Filepath changes
        //reading filepath configs from xml store
            String fileInDir = "";
                 String argss[]={"key"};
		String valuess[]={"com/cica/worksite/Saleforce_Configurations.xml"};
		SOAPRequestObject srObj1=null;
		int responsee=-1;boolean flag=false;
        srObj1=new SOAPRequestObject("http://schemas.cordys.com/1.0/xmlstore","GetXMLObject",argss,valuess);
        responsee=srObj1.sendAndWait();
		fileInDir = Node.getData(XPath.getFirstMatch(".//*[local-name()='Install_DIR']",null,responsee));


     /*Commentted for OT Upgrade Project
	 Declare and initialize local variables
	String originalPath = EIBProperties.getInstallDir()+"\\webroot\\shared\\WorkSite\\FileProcessing\\Original";
	String regularPath = EIBProperties.getInstallDir()+"\\webroot\\shared\\WorkSite\\FileProcessing\\Regular";
	String regularTempPath = EIBProperties.getInstallDir()+"\\webroot\\shared\\WorkSite\\FileProcessing\\Regular\\temp";
	//New Business 
	String originalPathNB = EIBProperties.getInstallDir()+"\\webroot\\shared\\WorkSite\\FileProcessing\\NewBusiness\\Original";
	String regularPathNB = EIBProperties.getInstallDir()+"\\webroot\\shared\\WorkSite\\FileProcessing\\NewBusiness\\Regular";
	String regularTempPathNB = EIBProperties.getInstallDir()+"\\webroot\\shared\\WorkSite\\FileProcessing\\NewBusiness\\Regular\\temp";*/
	
	String originalPath = fileInDir+"\\FileProcessing\\Original";
	String regularPath = fileInDir+"\\FileProcessing\\Regular";
	String regularTempPath = fileInDir+"\\FileProcessing\\Regular\\temp";
	//New Business 
	String originalPathNB = fileInDir+"\\FileProcessing\\NewBusiness\\Original";
	String regularPathNB = fileInDir+"\\FileProcessing\\NewBusiness\\Regular";
          String regularTempPathNB = fileInDir+"\\FileProcessing\\NewBusiness\\Regular\\temp";
	
	
	String backupPath = fileInDir+"\\FileProcessing\\Backup";
	String Filepath = "",backupFileName = "",backupFilePath = "",fileDir = "",backupDir = "",response = "",regularFileDir = "",queryText="",oldFileName="";
	boolean updateFlag=false;
	boolean fileFlage=false;
	// get system date and time in timestamp format
	Timestamp timestamp = new Timestamp(System.currentTimeMillis());
	try {
		oldFileName = fileName;
		// convert encoded file content to byte format
		//byte[] decoded = Base64.getDecoder().decode(encodedFile);
		byte[] decoded = Base64.decodeBytes(encodedFile);
		// file actions starts
		String args[]={"key"};
		String values[]={"com/cica/worksite/PreProcessingConfig.xml"};
		SOAPRequestObject srObj=null;
		int responseConfg=-1;
		
		
		try
		{
                      
			srObj=new SOAPRequestObject("http://schemas.cordys.com/1.0/xmlstore","GetXMLObject",args,values);
			responseConfg=srObj.sendAndWait();
			fileformatConfig = Node.getData(XPath.getFirstMatch(".//*[local-name()='FILE_FORMAT']",null,responseConfg));

			
		}catch(Exception ex)
		{
			logger.error("Error in loadSfConfigurations method:"+ex);
			
		}
if(fileformatConfig!=null && !fileformatConfig.equalsIgnoreCase("") && !fileformatConfig.isEmpty() && fileformatConfig.contains(","))
	  {
if(Arrays.asList(fileformatConfig.split(",")).indexOf(fileFormat) != -1)
 {
			if(!fileAction.equalsIgnoreCase("discardNB") && !fileAction.equalsIgnoreCase("uploadNB")) {
			BusObject adlObject = ADL_InputFiles.getADL_InputFilesObject(Long.parseLong(fileId));
			fileName = adlObject.getStringProperty("FileName");
			if(adlObject.getStringProperty("ErrorMessage").equalsIgnoreCase("Invalid FileName"))
				fileFlage=true;
			if(fileName.contains(".")) {
				int dot = fileName.lastIndexOf('.');
				String base = (dot == -1) ? fileName : fileName.substring(0, dot);
				fileName = base;
			}
			}
			if(fileAction.equalsIgnoreCase("upload"))
			{
				// move the files to regulartemp folder for pre-processing api to validate the file data
				if(mode.equalsIgnoreCase("staging"))
				{
					fileName = oldFileName;
					// file directory starts 
					//fileDir = regularTempPath+"\\"+fileId+"_"+fileName;
					fileDir = regularTempPath ;
					Filepath = fileDir+"\\"+fileName+"."+fileFormat;
					// checking file directory
					File filedirectory = new File(fileDir);
					if (!filedirectory.exists() && !filedirectory.isDirectory()) {
						filedirectory.mkdir(); // create new directory
					}
					File file= new File(Filepath);
					// checking file existanceregularTempPath
					if(!file.exists()){
					// create new file
						file.createNewFile();
					}
					OutputStream stream = new FileOutputStream(Filepath);
					stream.write(decoded);	// write the file content
					stream.flush();
					stream.close();
					response = "file uploaded successfully"+fileName+"."+fileFormat;
					//file Encryption Start
String[] parameterName = {"Action","FileName","InputFilePath","OutputFilePath"};
String[] parameterValue = {"Encrypt",fileName+"."+fileFormat,regularTempPath+"\\" ,regularTempPath+"\\" };
SOAPRequestObject sro=new SOAPRequestObject ("http://schemas.cordys.com/default","EncyptionDecryption", parameterName, parameterValue) ;

int response1 = sro.execute();
//file Encryption END
						
				}		
						
				// move the files to regular folder for pre-processing api to upload data to db
				else if(mode.equalsIgnoreCase("upload"))
				{
					//fileName = oldFileName;
					// to avoid multiple variable creation here we will reuse the backup file variable for regular
					//fileDir = regularTempPath+"\\"+fileId+"_"+fileName;
					fileDir = regularTempPath;
					Filepath = fileDir+"\\"+oldFileName+"."+fileFormat;
					//backupDir = regularPath+"\\"+fileId+"_"+fileName;
					String regularDir = regularPath;
					String regularFilepath ="";
					File regFile = null;
					String fileQuery = "";
					String regTempDir = regularPath;
					String regTempPath = regTempDir+"\\"+oldFileName+"."+fileFormat;
					File rgTempfile= new File(regTempPath);
					backupDir = backupPath;
					backupFileName =fileName+fileTimeFormat.format(timestamp)+"."+fileFormat; // adding timestamp to backup file
					backupFilePath = backupDir+"\\"+backupFileName;
					File backupFiledirectory = new File(backupDir);
					if (!backupFiledirectory.exists() && !backupFiledirectory.isDirectory()) {
						backupFiledirectory.mkdir(); // create new directory
					}
					File bkfile= new File(backupFilePath);
					File oldFile = new File(Filepath);
					if(!bkfile.exists()){
						// create new file
						bkfile.createNewFile();
					}
					if(fileFlage)
					{
						regularFilepath = regularDir+"\\"+oldFileName+"."+fileFormat;
						regFile = new File(regularFilepath);	
						if(!regFile.exists()){
							// create new file
							regFile.createNewFile();
						}
						
					}
					else
					{
						fileQuery = "select * from ReviewActionSummary where ActionType='File Original' and CaseNbr='"+fileId+"'";
						QueryObject query = new QueryObject(fileQuery);
						query.execute();
						BusObject fileObject = query.getObject();
						fileName = fileObject.getStringProperty("Description");
						
						regularFilepath = regularDir+"\\"+fileName;
						regFile = new File(regularFilepath);	
						if(!rgTempfile.exists()){
							// create new file
							rgTempfile.createNewFile();
						}
						byte[] tempdata = Files.readAllBytes(oldFile.toPath());
						OutputStream tempstream = new FileOutputStream(regTempPath);
						tempstream.write(tempdata);
						tempstream.flush();
						tempstream.close();
					}
												
					if(bkfile.canWrite())
					{
						//regFile.renameTo(bkfile);
						//Files.move(Paths.get(regularFilepath), Paths.get(backupFilePath),StandardCopyOption.REPLACE_EXISTING); // move file from regularPathtemp to regularPath
						byte[] rgdata = Files.readAllBytes(regFile.toPath());
						OutputStream rgstream = new FileOutputStream(backupFilePath);
						rgstream.write(rgdata);
						rgstream.flush();
						rgstream.close();
						byte[] data = Files.readAllBytes(oldFile.toPath());
						OutputStream stream = new FileOutputStream(regularFilepath);
						stream.write(data);
						stream.flush();
						stream.close();
						//Files.move(Paths.get(Filepath), Paths.get(regularFilepath),StandardCopyOption.REPLACE_EXISTING); // move file from regularPathtemp to regularPath
						//Files.move(Paths.get(Filepath), Paths.get(backupFilePath),StandardCopyOption.REPLACE_EXISTING); // move file from regularPathtemp to regularPath
						response = "file uploaded successfully"+fileName+"."+fileFormat;
						String tfname=fileName.replaceAll("'","''");
						String tofname=oldFileName.replaceAll("'","''");
						queryText="insert into ReviewActionSummary(ActionType,Description,CaseNbr,TaskId,WorkItem,OldDescription)"
							+ " values('File Upload','"+tfname+"."+fileFormat+"','"+fileId+"','"+taskinstanceId+"','Pre-Processing Error','"+tofname+"."+fileFormat+"')";
						DMLStatement updateData1 = new DMLStatement(queryText);
						updateData1.execute();
						/*if(fileFlage) {
							String queryText1="update ADL_InputFiles set FileName='"+oldFileName+"."+fileFormat+"' where FileID='"+Long.parseLong(fileId)+"'";
							DMLStatement updateData = new DMLStatement(queryText1);
							updateData.execute();
						}*/
//file Encryption Start
String[] parameterName = {"Action","FileName","InputFilePath","OutputFilePath"};
String[] parameterValue = {"Encrypt",fileName+"."+fileFormat,regularTempPath+"\\" ,regularTempPath+"\\" };
SOAPRequestObject sro=new SOAPRequestObject ("http://schemas.cordys.com/default","EncyptionDecryption", parameterName, parameterValue) ;

int response1 = sro.execute();
//file Encryption END
					}
					else
						response = "file not uploaded.Please try again sometime after";
				}
				else
				{
					// do nothing
				}
			
			}
			else if(fileAction.equalsIgnoreCase("uploadNB"))
			{
				// move the files to NB regulartemp folder for pre-processing api to validate the file data
				if(mode.equalsIgnoreCase("staging"))
				{
					fileName = oldFileName;
					// file directory starts 
					//fileDir = regularTempPath+"\\"+fileId+"_"+fileName;
					fileDir = regularTempPathNB;
					Filepath = fileDir+"\\"+fileName+"."+fileFormat;
					// checking file directory
					File filedirectory = new File(fileDir);
					if (!filedirectory.exists() && !filedirectory.isDirectory()) {
						filedirectory.mkdir(); // create new directory
					}
					File file= new File(Filepath);
					// checking file existance
					if(!file.exists()){
					// create new file
						file.createNewFile();
					}
					OutputStream stream = new FileOutputStream(Filepath);
					stream.write(decoded);	// write the file content
					stream.flush();
					stream.close();
					response = "file uploaded successfully"+fileName+"."+fileFormat;
					//file Encryption Start
String[] parameterName = {"Action","FileName","InputFilePath","OutputFilePath"};
String[] parameterValue = {"Encrypt",fileName+"."+fileFormat,regularTempPathNB+"\\" ,regularTempPathNB+"\\" };
SOAPRequestObject sro=new SOAPRequestObject ("http://schemas.cordys.com/default","EncyptionDecryption", parameterName, parameterValue) ;

int response1 = sro.execute();
//file Encryption END
					/*Path file = Paths.get(Filepath);
					//FileChannel file =new RandomAccessFile(Filepath,"rw").getChannel();
					boolean exist = Files.exists(file);
					FileChannel fc=null;
					if(exist)
					{
						fc= FileChannel.open(file, StandardOpenOption.READ,StandardOpenOption.WRITE,StandardOpenOption.TRUNCATE_EXISTING);
						boolean writeResult = fileWrite(Filepath,decoded);
						if(writeResult)
							response = "file uploaded successfully"+fileName+"."+fileFormat;
					
						fc.close();
					}
					
					else
					{
						fc= FileChannel.open(file,StandardOpenOption.CREATE_NEW,StandardOpenOption.READ,StandardOpenOption.WRITE,StandardOpenOption.TRUNCATE_EXISTING);
						boolean writeResult = fileWrite(Filepath,decoded);
						if(writeResult)
							response = "file uploaded successfully"+fileName+"."+fileFormat;
						fc.close();
					}*/
						
				}		
						
				// move the files to NB regular folder for pre-processing api to upload data to db
				else if(mode.equalsIgnoreCase("upload"))
				{
					//fileName = oldFileName;
					// to avoid multiple variable creation here we will reuse the backup file variable for regular
					//fileDir = regularTempPath+"\\"+fileId+"_"+fileName;
					fileDir = regularTempPathNB;
					Filepath = fileDir+"\\"+oldFileName+"."+fileFormat;
					//backupDir = regularPath+"\\"+fileId+"_"+fileName;
					String regularDir = regularPathNB;
					String regularFilepath ="";
					File regFile = null;
					String fileQuery = "";
					String regTempDir = regularPathNB;
					String regTempPath = regTempDir+"\\"+oldFileName+"."+fileFormat;
					File rgTempfile= new File(regTempPath);
					backupDir = backupPath;
					backupFileName =fileName+fileTimeFormat.format(timestamp)+"."+fileFormat; // adding timestamp to backup file
					backupFilePath = backupDir+"\\"+backupFileName;
					File backupFiledirectory = new File(backupDir);
					if (!backupFiledirectory.exists() && !backupFiledirectory.isDirectory()) {
						backupFiledirectory.mkdir(); // create new directory
					}
					File bkfile= new File(backupFilePath);
					File oldFile = new File(Filepath);
					if(!bkfile.exists()){
						// create new file
						bkfile.createNewFile();
					}
					if(fileFlage)
					{
						regularFilepath = regularDir+"\\"+oldFileName+"."+fileFormat;
						regFile = new File(regularFilepath);	
						if(!regFile.exists()){
							// create new file
							regFile.createNewFile();
						}
						
					}
					else
					{
						fileQuery = "select * from ReviewActionSummary where ActionType='NBFile Original' and CaseNbr='"+fileId+"'";
						QueryObject query = new QueryObject(fileQuery);
						query.execute();
						BusObject fileObject = query.getObject();
						fileName = fileObject.getStringProperty("Description");
						
						regularFilepath = regularDir+"\\"+fileName;
						regFile = new File(regularFilepath);	
						if(!rgTempfile.exists()){
							// create new file
							rgTempfile.createNewFile();
						}
						byte[] tempdata = Files.readAllBytes(oldFile.toPath());
						OutputStream tempstream = new FileOutputStream(regTempPath);
						tempstream.write(tempdata);
						tempstream.flush();
						tempstream.close();
					}
												
					if(bkfile.canWrite())
					{
						//regFile.renameTo(bkfile);
						//Files.move(Paths.get(regularFilepath), Paths.get(backupFilePath),StandardCopyOption.REPLACE_EXISTING); // move file from regularPathtemp to regularPath
						byte[] rgdata = Files.readAllBytes(regFile.toPath());
						OutputStream rgstream = new FileOutputStream(backupFilePath);
						rgstream.write(rgdata);
						rgstream.flush();
						rgstream.close();
						byte[] data = Files.readAllBytes(oldFile.toPath());
						OutputStream stream = new FileOutputStream(regularFilepath);
						stream.write(data);
						stream.flush();
						stream.close();
						//Files.move(Paths.get(Filepath), Paths.get(regularFilepath),StandardCopyOption.REPLACE_EXISTING); // move file from regularPathtemp to regularPath
						//Files.move(Paths.get(Filepath), Paths.get(backupFilePath),StandardCopyOption.REPLACE_EXISTING); // move file from regularPathtemp to regularPath
						response = "file uploaded successfully"+fileName+"."+fileFormat;
						//file Encryption Start
String[] parameterName = {"Action","FileName","InputFilePath","OutputFilePath"};
String[] parameterValue = {"Encrypt",fileName+"."+fileFormat,regularFilepath+"\\" ,regularFilepath+"\\" };
SOAPRequestObject sro=new SOAPRequestObject ("http://schemas.cordys.com/default","EncyptionDecryption", parameterName, parameterValue) ;

int response1 = sro.execute();
String tfname=fileName.replaceAll("'","''");
String tofname=oldFileName.replaceAll("'","''");
						queryText="insert into ReviewActionSummary(ActionType,Description,CaseNbr,TaskId,WorkItem,OldDescription)"
							+ " values('NBFile Upload','"+tfname+"."+fileFormat+"','"+fileId+"','"+taskinstanceId+"','New Business Review','"+tofname+"."+fileFormat+"')";
						DMLStatement updateData1 = new DMLStatement(queryText);
						updateData1.execute();
						/*if(fileFlage) {
							String queryText1="update ADL_InputFiles set FileName='"+oldFileName+"."+fileFormat+"' where FileID='"+Long.parseLong(fileId)+"'";
							DMLStatement updateData = new DMLStatement(queryText1);
							updateData.execute();
						}*/
					}
					else
						response = "file not uploaded.Please try again sometime after";
				}
				else
				{
					// do nothing
				}
			
			}
			/*else if(fileAction.equalsIgnoreCase("submit"))
			{
				fileDir = originalPath+"\\"+fileId+"_"+fileName; // folder structure
				Filepath = fileDir+"\\"+fileName+"."+fileFormat; // file path
				backupDir = backupPath+"\\"+fileId+"_"+fileName; // backup folder structure
				backupFileName =fileName+fileTimeFormat.format(timestamp)+"."+fileFormat; // adding timestamp to backup file
				File backupFiledirectory = new File(backupDir);
				if (!backupFiledirectory.exists() && !backupFiledirectory.isDirectory()) {
					backupFiledirectory.mkdir(); // create new directory
				}
				backupFilePath = backupDir+"\\"+backupFileName;
				Files.move(Paths.get(Filepath), Paths.get(backupFilePath)); // move file from original to backupFilePath
				regularFileDir = regularPath+"\\"+fileId+"_"+fileName+"\\"+fileName+"."+fileFormat; // regular file path
				File file= new File(Filepath);
				// checking file existance
				if(!file.exists()){
				// create new file
					file.createNewFile();
				}
				Files.copy(Paths.get(regularFileDir), Paths.get(Filepath),StandardCopyOption.REPLACE_EXISTING); // copy file from regular to original
				
				response = "original file updated";
			}*/
			else if(fileAction.equalsIgnoreCase("discard"))
			{
				//fileDir = originalPath+"\\"+fileId+"_"+fileName;
				fileDir = originalPath;
				Filepath = fileDir+"\\"+fileName+"."+fileFormat; // file path
				//backupDir = backupPath+"\\"+fileId+"_"+fileName+"\\Discard"; // backup folder structure
				backupDir = backupPath+"\\Discard";
				backupFileName =fileName+fileTimeFormat.format(timestamp)+"."+fileFormat; // adding timestamp to backup file
				File backupFiledirectory = new File(backupDir);
				if (!backupFiledirectory.exists() && !backupFiledirectory.isDirectory()) {
					backupFiledirectory.mkdir(); // create new directory
				}
				backupFilePath = backupDir+"\\"+backupFileName;
				File orgFile = new File(Filepath);
				File  bkFile = new File(backupFilePath);
				if(orgFile.canWrite()) {
					orgFile.renameTo(bkFile);
					//Files.move(Paths.get(Filepath), Paths.get(backupFilePath)); // move file from original to backupFilePath
					updateFlag =true;
				}
				timestamp = null;
				timestamp = new Timestamp(System.currentTimeMillis());
				backupDir = "";
				//backupDir = backupPath+"\\"+fileId+"_"+fileName+"\\Discard"; // backup folder structure
				backupDir = backupPath+"\\Discard";
				String RgbackupFileName = fileName+fileTimeFormat.format(timestamp)+"."+fileFormat; // adding timestamp to backup file
				String RgbackupFilePath = backupDir+"\\"+RgbackupFileName;
				//regularFileDir = regularPath+"\\"+fileId+"_"+fileName+"\\"+fileName+"."+fileFormat; // regular file path
				regularFileDir = regularPath+"\\"+fileName+"."+fileFormat;
				//Files.move(Paths.get(regularFileDir), Paths.get(RgbackupFilePath).resolve(RgbackupFileName)); // move file from regular to backupFilePath
				File regFile = new File(regularFileDir);
				File rgbkFile = new File(RgbackupFilePath);
				if(regFile.canWrite()) {
					regFile.renameTo(rgbkFile);
					//Files.move(Paths.get(regularFileDir), Paths.get(RgbackupFilePath),StandardCopyOption.REPLACE_EXISTING);
					updateFlag =true;
				}
				fileDir="";Filepath="";
				//fileDir = regularTempPath+"\\"+fileId+"_"+fileName;
				fileDir = regularTempPath;
				Filepath = fileDir+"\\"+fileName+"."+fileFormat; // file path
				timestamp = null;
				timestamp = new Timestamp(System.currentTimeMillis());
				backupDir = "";
				//backupDir = backupPath+"\\"+fileId+"_"+fileName+"\\Discard"; // backup folder structure
				backupDir = backupPath+"\\Discard";
				String RgbackupTempFileName = fileName+fileTimeFormat.format(timestamp)+"."+fileFormat; // adding timestamp to backup file
				String RgbackupTempFilePath = backupDir+"\\"+RgbackupTempFileName;
				File regTempFile = new File(Filepath);
				File rgbktempFile = new File(RgbackupTempFilePath);
				if(regTempFile.canWrite()) {
					regTempFile.renameTo(rgbktempFile);
					//Files.move(Paths.get(fileDir).resolve(fileName+"."+fileFormat), Paths.get(backupDir).resolve(RgbackupTempFileName));
					updateFlag = true;
				}
				if(updateFlag) {
					response = "file discarded";
					queryText="update ADL_InputFiles set Status='Cancelled' where FileID='"+Long.parseLong(fileId)+"'";
					DMLStatement updateData1 = new DMLStatement(queryText);
					updateData1.execute();
					String tfname=fileName.replaceAll("'","''");
						String tofname=oldFileName.replaceAll("'","''");
					queryText = "";
					queryText="insert into ReviewActionSummary(ActionType,Description,CaseNbr,TaskId,WorkItem,OldDescription)"
							+ " values('File Discard','"+tfname+"','"+fileId+"','"+taskinstanceId+"','Pre-Processing Error','"+tofname+"')";
					DMLStatement updateData2 = new DMLStatement(queryText);
					updateData2.execute();
				}
				else
					response = "file discard not possible because file not present in location , please contact support team";
			}
			else if(fileAction.equalsIgnoreCase("discardNB"))
			{
				//fileDir = originalPath+"\\"+fileId+"_"+fileName;
				fileName = oldFileName;
				fileDir = originalPathNB;
				Filepath = fileDir+"\\"+fileName+"."+fileFormat; // file path
				//backupDir = backupPath+"\\"+fileId+"_"+fileName+"\\Discard"; // backup folder structure
				backupDir = backupPath+"\\Discard";
				backupFileName =fileName+fileTimeFormat.format(timestamp)+"."+fileFormat; // adding timestamp to backup file
				File backupFiledirectory = new File(backupDir);
				if (!backupFiledirectory.exists() && !backupFiledirectory.isDirectory()) {
					backupFiledirectory.mkdir(); // create new directory
				}
				backupFilePath = backupDir+"\\"+backupFileName;
				File orgFile = new File(Filepath);
				File  bkFile = new File(backupFilePath);
				if(orgFile.canWrite()) {
					orgFile.renameTo(bkFile);
					//Files.move(Paths.get(Filepath), Paths.get(backupFilePath)); // move file from original to backupFilePath
					updateFlag =true;
				}
				timestamp = null;
				timestamp = new Timestamp(System.currentTimeMillis());
				backupDir = "";
				fileName = oldFileName;
				//backupDir = backupPath+"\\"+fileId+"_"+fileName+"\\Discard"; // backup folder structure
				backupDir = backupPath+"\\Discard";
				String RgbackupFileName = fileName+fileTimeFormat.format(timestamp)+"."+fileFormat; // adding timestamp to backup file
				String RgbackupFilePath = backupDir+"\\"+RgbackupFileName;
				//regularFileDir = regularPath+"\\"+fileId+"_"+fileName+"\\"+fileName+"."+fileFormat; // regular file path
				regularFileDir = regularPathNB+"\\"+fileName+"."+fileFormat;
				//Files.move(Paths.get(regularFileDir), Paths.get(RgbackupFilePath).resolve(RgbackupFileName)); // move file from regular to backupFilePath
				File regFile = new File(regularFileDir);
				File rgbkFile = new File(RgbackupFilePath);
				if(regFile.canWrite()) {
					regFile.renameTo(rgbkFile);
					//Files.move(Paths.get(regularFileDir), Paths.get(RgbackupFilePath),StandardCopyOption.REPLACE_EXISTING);
					updateFlag =true;
				}
				fileDir="";Filepath="";
				fileName = oldFileName;
				//fileDir = regularTempPath+"\\"+fileId+"_"+fileName;
				fileDir = regularTempPathNB;
				Filepath = fileDir+"\\"+fileName+"."+fileFormat; // file path
				timestamp = null;
				timestamp = new Timestamp(System.currentTimeMillis());
				backupDir = "";
				//backupDir = backupPath+"\\"+fileId+"_"+fileName+"\\Discard"; // backup folder structure
				backupDir = backupPath+"\\Discard";
				String RgbackupTempFileName = fileName+fileTimeFormat.format(timestamp)+"."+fileFormat; // adding timestamp to backup file
				String RgbackupTempFilePath = backupDir+"\\"+RgbackupTempFileName;
				File regTempFile = new File(Filepath);
				File rgbktempFile = new File(RgbackupTempFilePath);
				if(regTempFile.canWrite()) {
					regTempFile.renameTo(rgbktempFile);
					//Files.move(Paths.get(fileDir).resolve(fileName+"."+fileFormat), Paths.get(backupDir).resolve(RgbackupTempFileName));
					updateFlag = true;
				}
				if(updateFlag) {
					response = "file discarded";
					/*queryText="update ADL_InputFiles set Status='Cancelled' where FileID='"+Long.parseLong(fileId)+"'";
					DMLStatement updateData1 = new DMLStatement(queryText);
					updateData1.execute();*/
					String tfname=fileName.replaceAll("'","''");
						String tofname=oldFileName.replaceAll("'","''");
					queryText = "";
					queryText="insert into ReviewActionSummary(ActionType,Description,CaseNbr,TaskId,WorkItem,OldDescription)"
							+ " values('File Discard','"+tfname+"','"+fileId+"','"+taskinstanceId+"','New Business Review','"+tofname+"')";
					DMLStatement updateData2 = new DMLStatement(queryText);
					updateData2.execute();
				}
				else
					response = "file discard not possible as of now.please try sometime after";
			}
			else
				response = "FileAction "+fileAction+" is not processable.Possible actions are upload,discard";
			// file actions end
			
		}
		else
			response = "File format "+fileFormat+" is not processable.Acceptable formats are "+fileformatConfig;
}
	}
	catch(Exception ex)
	{
		response = "file action "+fileAction+"is failed "+ex.toString();
	}
	return response;
}
private static boolean fileMove(String sourceFilepath,String destionationFilePath) throws Exception
{
	//Input file
    /*String inputFile = sourceFilepath;
     
    //Files contents will be written in these files
    String outputFile = destionationFilePath;
     
    //Get channel for output file
    FileOutputStream fos = new FileOutputStream(new File(outputFile));
    WritableByteChannel targetChannel = fos.getChannel();
     
    
	//Get channel for input file
	FileInputStream fis = new FileInputStream(inputFile);
	FileChannel inputChannel = fis.getChannel();

	//Transfer data from input channel to output channel
	inputChannel.transferTo(0, inputChannel.size(), targetChannel);
	//inputChannel.truncate(0);
	RandomAccessFile sourceFile = new RandomAccessFile(sourceFilepath, "rw");
	 Path path = Paths.get(sourceFilepath);
     byte[] data = Files.readAllBytes(path);
     fileWrite(outputFile,data);
	fos.getChannel().force(true);
	fis.getChannel().force(true);
	//close the input channel
	inputChannel.close();
	fis.close();
    //finally close the target channel
    targetChannel.close();
    fos.close();
	return true;
	RandomAccessFile sourceFile = new RandomAccessFile(sourceFilepath, "rw");
	 Path path = Paths.get(sourceFilepath);
    byte[] data = Files.readAllBytes(path);
    fileWrite(destionationFilePath,data);
    return true;*/
	Files.move(Paths.get(sourceFilepath),Paths.get(destionationFilePath));
	return true;
}
private static boolean fileWrite(String filePath,byte[] decoded) throws Exception
{
	FileChannel fc = new RandomAccessFile(filePath, "rw").getChannel();
    fc.position(fc.size());
    fc.write(ByteBuffer.wrap(decoded));
    fc.close();
    return true;
}
 public static BusObjectIterator<com.worksitewsapppackage.WorksiteUtil> getDuplicateRecordsforReinsist(String businesstype,String caseid,String fileType)
  {
  	String querytext="";
  	if(fileType.equalsIgnoreCase("UF")) {
  querytext = "select  count(*) from "+
  " (select distinct employeeSSN,businesstype,ProductNumber from UF_DataValues_Case where CaseID='"+caseid+"' and BusinessType='"+businesstype+"' and RecordtyPE = '1'"+ "group by employeessN,businesstype,ProductNumber having count(*) > 1) Temp";
  /*" (select distinct dbo.fn_fpDecryptData(employeeSSN)employeeSSN,businesstype,ProductNumber from UF_DataValues_Case where CaseID='"+caseid+"' and BusinessType='"+businesstype+"' and RecordtyPE = '1'"+ "group by dbo.fn_fpDecryptData(employeessN),businesstype,ProductNumber having count(*) > 1) Temp"; */
  
  	}
  	if(fileType.equalsIgnoreCase("UFN")) {
  		querytext = "select  count(*) from "+
  " (select distinct employeeSSN,businesstype,ProductNumber from UFN_DataValues_Case where CaseID='"+caseid+"' and BusinessType='"+businesstype+"' and RecordtyPE = '1'"+ "group by employeessN,businesstype,ProductNumber having count(*) > 1) Temp";
  /*" (select distinct dbo.fn_fpDecryptData(employeeSSN)employeeSSN,businesstype,ProductNumber from UFN_DataValues_Case where CaseID='"+caseid+"' and BusinessType='"+businesstype+"' and RecordtyPE = '1'"+ "group by dbo.fn_fpDecryptData(employeessN),businesstype,ProductNumber having count(*) > 1) Temp";*/
  	}
  	
  	QueryObject query = new QueryObject(querytext);
  	query.setResultClass(WorksiteUtil.class);
  	return query.getObjects();
  }
public static BusObjectIterator<com.worksitewsapppackage.WorksiteUtil> getReInstatementrecordsforXL(String param1)
    {
        String querytext="select GROUPNAME , GROUPNUMBER,DESCRIPTION,POLICY#,OTStatus from ADL_DataAfterCompare where DESCRIPTION like '%"+param1+"%'";
QueryObject query = new QueryObject(querytext);
query.addParameter("param1 ", "WorksiteUtil.param1 ", QueryObject.PARAM_STRING, param1);
query.setResultClass(WorksiteUtil.class);
return query.getObjects();
    }
public static String countRecordsMatches(long fileId)
{
	String queryText = "",ADLFileName="",result="No";
	long ADLCount =0,UFNCount=0,UFCount=0;
	queryText = "select count,FileName from ADL_InputFiles where FileID='"+fileId+"'";
	QueryObject query = new QueryObject(queryText);
    query.setResultClass(ADL_InputFiles.class);
    BusObject adlObj = query.getObject();
    ADLFileName = adlObj.getStringProperty("FileName");
    ADLCount = adlObj.getLongProperty("count");
    queryText = "";
    if(ADLFileName.startsWith("UFN_")) {
    	queryText = "select count(*) count from UFN_DataValues where FileID='"+fileId+"' and CCStatus='ToBeProcessed'";
    	QueryObject query1 = new QueryObject(queryText);
        query1.setResultClass(UFN_DataValues.class);
        BusObject UFNObj = query1.getObject();
        UFNCount = UFNObj.getLongProperty("count");
        if(ADLCount==UFNCount) result= "Yes";
        
    }
    else if(ADLFileName.startsWith("UF_")) {
    	queryText = "select count(*) count from UF_DataValues where FileID='"+fileId+"' and CCStatus='ToBeProcessed'";
    	QueryObject query2 = new QueryObject(queryText);
    	query2.setResultClass(UF_DataValues.class);
        BusObject UFObj = query2.getObject();
        UFCount = UFObj.getLongProperty("count");
        if(ADLCount==UFCount) result= "Yes";
    }
    else
    {
    	return "No";
    }
    return result;
    
}
public static String DecidingDeductionFileTask(String EnrollmentEndDate,String CaseType)
{
	
    return "true";
}
public static String fileDownload(String fileName,String source)
{
	
	//Added by Chaithanya for OT Upgrade Migration for Filepath changes
        //reading filepath configs from xml store
          String fileInDir = "";
                 String args[]={"key"};
		String values[]={"com/cica/worksite/Saleforce_Configurations.xml"};
		SOAPRequestObject srObj=null;
		int responsee=-1;boolean flag=false;
        srObj=new SOAPRequestObject("http://schemas.cordys.com/1.0/xmlstore","GetXMLObject",args,values);
        responsee=srObj.sendAndWait();
		fileInDir = Node.getData(XPath.getFirstMatch(".//*[local-name()='Install_DIR']",null,responsee));


    /*Commented for OT Upgrade Project
	String originalPath = EIBProperties.getInstallDir()+"\\webroot\\shared\\WorkSite\\FileProcessing\\Original";
	String regularPath = EIBProperties.getInstallDir()+"\\webroot\\shared\\WorkSite\\FileProcessing\\Regular";
	String regularTempPath = EIBProperties.getInstallDir()+"\\webroot\\shared\\WorkSite\\FileProcessing\\Regular\\temp";
	//For New Business 
	String originalPathNB = EIBProperties.getInstallDir()+"\\webroot\\shared\\WorkSite\\FileProcessing\\NewBusiness\\Original";
	String regularPathNB = EIBProperties.getInstallDir()+"\\webroot\\shared\\WorkSite\\FileProcessing\\NewBusiness\\Regular";
	String regularTempPathNB = EIBProperties.getInstallDir()+"\\webroot\\shared\\WorkSite\\FileProcessing\\NewBusiness\\Regular\\temp";*/
	
	String originalPath = fileInDir+"\\FileProcessing\\Original";
	String regularPath = fileInDir+"\\FileProcessing\\Regular";
	String regularTempPath = fileInDir+"\\FileProcessing\\Regular\\temp";
	//For New Business 
	String originalPathNB = fileInDir+"\\FileProcessing\\NewBusiness\\Original";
	String regularPathNB = fileInDir+"\\FileProcessing\\NewBusiness\\Regular";
	String regularTempPathNB = fileInDir+"\\FileProcessing\\NewBusiness\\Regular\\temp";
	
	

	String filePath="";
	if(source.equalsIgnoreCase("original"))
		filePath = originalPath;
	else if(source.equalsIgnoreCase("regular"))
		filePath = regularPath;
	else if(source.equalsIgnoreCase("regularTemp"))
		filePath = regularTempPath;
	else if(source.equalsIgnoreCase("originalNB"))
		filePath = originalPathNB;
	else if(source.equalsIgnoreCase("regularNB"))
		filePath = regularPathNB;
	else if(source.equalsIgnoreCase("regularTempNB"))
		filePath = regularTempPathNB;
	else
		filePath = "";

 
//logger.log(Severity.ERROR,filePath);
String[] parameterName = {"Action","FileName","InputFilePath","OutputFilePath"};
String[] parameterValue = {"Decrypt",fileName,filePath+"\\" ,filePath+"\\" };
SOAPRequestObject sro=new SOAPRequestObject ("http://schemas.cordys.com/default","EncyptionDecryption", parameterName, parameterValue) ;
//sro.addParameterAsXml(reqNode);
//logger.log(Severity.ERROR,"Plan Acitivity: "+Node.writeToString(reqNode, true));
int response = sro.execute();
filePath=filePath+"\\"+fileName;
//logger.log(Severity.ERROR,filePath);

    File file = new File(filePath);


    InputStream is = null;
    String encodedString = "";
    try
    {
      long length = file.length();
      if (length == 0L)
      {
        encodedString = new String(Native.encodeBinBase64(" ".getBytes(), 1));
      }
      else
      {
        byte[] bytes = new byte[(int)length];
        is = new FileInputStream(file);
        int offset = 0;
        for (int numRead = 0; (offset < bytes.length) && ((numRead = is.read(bytes, offset, bytes.length - offset)) >= 0); offset += numRead) {}
        if (offset < bytes.length) {
          throw new IOException("Could not completely read file " + file.getName());
        }
        encodedString = new String(Native.encodeBinBase64(bytes, bytes.length));
      }
    }
    catch (IOException e)
    {
      return "IO Exception Occured";
    }
    //is.close();
   
    return encodedString;
	}




  /*public static String GetFileEncyption(String FileName, String filetoEncrypt)
    {
try {
      FileWriter fr= new FileWriter(FileName);
      fr.write("gpg --recipient  \"CICAPublicKey\"  --output \""+filetoEncrypt+".gpg\" --encrypt \""+filetoEncrypt+"\" <D:\\PGP\\passphrase.txt");
      fr.close();
      
    } catch (IOException e) {
     
      e.printStackTrace();
    }

try{
String path="cmd /c start "+FileName;
            Runtime rn=Runtime.getRuntime();
            Process pr=rn.exec(path);
}
catch(Exception e)
{
e.printStackTrace();
}
return null;

}
*/
public static String GetFileEncyption(String FileName, String filetoEncrypt) throws Exception
	    {
		  String returnVal="";
	try {
	      FileWriter fr= new FileWriter(FileName);
	      fr.write("gpg --recipient  \"CICAPublicKey\"  --output \""+filetoEncrypt+".gpg\" --encrypt \""+filetoEncrypt+"\" <D:\\PGP\\passphrase.txt");
	      fr.close();
	      
	    } catch (IOException e) {
	     
	      e.printStackTrace();
	    }
	
	try{
			
		String path="cmd /c start "+FileName;
	            Runtime rn=Runtime.getRuntime();
	            //Runtime.getRuntime().exec(new String[]{"cmd.exe", "/c", "build.bat"});
	            //Process pr=rn.exec(path);
	            Process pr=rn.exec(new String[]{"cmd.exe", "/c", FileName});
	            InputStream is = pr.getInputStream();
	            int i = 0;
	            while( (i = is.read() ) != -1) {
	                //System.out.print((char)i);
	            	returnVal=returnVal+i;
	            }
	            
	}
	catch(Exception e)
	{
		logger.error("Error in getFileEncryption method:"+e);
		throw e;
	}
	return returnVal;
	
	}

public static BusObjectIterator<com.worksitewsapppackage.WorksiteUtil> getDuplicateRecordsforTriageResultFiles(String businesstype,String caseid,String fileType)
{
	String querytext="";
/* column encryption and decryption change */
	if(fileType.equalsIgnoreCase("UF")) {
		querytext="select count(*) as count ,employeeSSN,businesstype,ProductNumber from UF_DataValues_Case where CaseID='"+caseid+"' and BusinessType='"+businesstype+"' and RecordtyPE = '1' group by employeessN,businesstype,ProductNumber";
/*querytext="select count(*) as count ,dbo.fn_fpdecryptdata(employeeSSN)employeeSSN,businesstype,ProductNumber from UF_DataValues_Case where CaseID='"+caseid+"' and BusinessType='"+businesstype+"' and RecordtyPE = '1' group by dbo.fn_fpdecryptdata(employeessN),businesstype,ProductNumber";*/
	}
	if(fileType.equalsIgnoreCase("UFN")) {
		querytext="select count(*) as count ,employeeSSN,businesstype,ProductNumber from UFN_DataValues_Case where CaseID='"+caseid+"' and BusinessType='"+businesstype+"' and RecordtyPE = '1' group by employeessN,businesstype,ProductNumber";
/*querytext="select count(*) as count ,dbo.fn_fpdecryptdata(employeeSSN)employeeSSN,businesstype,ProductNumber from UFN_DataValues_Case where CaseID='"+caseid+"' and BusinessType='"+businesstype+"' and RecordtyPE = '1' group by dbo.fn_fpdecryptdata(employeessN),businesstype,ProductNumber";*/
	}
	
	QueryObject query = new QueryObject(querytext);
	query.setResultClass(WorksiteUtil.class);
	return query.getObjects();
}
public static String AssignUPCRoleToPM(String UserID,String Application,String Role, String ADMINID){
    int reqString = 0,Response=0;
    String AdiminUser = "cn="+ADMINID+",cn=organizational users,"+BSF.getOrganization();
    SOAPRequestObject userCreationObj = new SOAPRequestObject("http://schemas.cordys.com/UserManagement/1.0/Organization", "AssignRolesToUser", null, null);
    String AssignRolesReq = "<User>  "+
    " <UserName>" +UserID + "</UserName>" +
    " <Roles> " +
    "<Role application='"+Application+"'>"+Role+"</Role>" +
    "</Roles>" +
    "</User>  ";
 try {
 reqString = BSF.getXMLDocument().parseString(AssignRolesReq);
 userCreationObj.addParameterAsXml(reqString);
 userCreationObj.setUser(AdiminUser);
 userCreationObj.execute();
                   }  
		catch (Exception e) {
      return e.toString();
                   }
 finally{
 Node.delete(reqString);
 Node.delete(Response);
}
 return AssignRolesReq;
}
public static BusObjectIterator<BusObject> GetDuplicateRecCountByFileIDForLatestFile(String file_id,String file_type) throws Exception
	{
    	QueryObject obj=null;
    	String queryText="";
    	BusObjectIterator<BusObject> busObjects=null;
    	if(file_type.equalsIgnoreCase("UF") && file_type!=null)
    	{
    		/* column encryption and decryption change */
queryText="SELECT EmployeeSSN, RecordType,ProductNumber, COUNT(*)-1  as DuplicateCount FROM UF_DataValues where FileID in ("+file_id+") and RecordType='1' GROUP BY EmployeeSSN, RecordType,ProductNumber having count(*) > 1";
/*
queryText="SELECT dbo.fn_fpdecryptdata(EmployeeSSN)EmployeeSSN, RecordType,ProductNumber, COUNT(*)-1  as DuplicateCount FROM UF_DataValues where FileID in ("+file_id+") and RecordType='1' GROUP BY dbo.fn_fpdecryptdata(EmployeeSSN), RecordType,ProductNumber having count(*) > 1";
*/
    		obj=new QueryObject(queryText);
    		obj.addParameter("file_id", "UF_DataValues.FileID", QueryObject.PARAM_STRING, file_id);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
    	else if(file_type.equalsIgnoreCase("UFN") && file_type!=null)
    	{
    		
queryText="SELECT EmployeeSSN, RecordType,ProductNumber, COUNT(*)-1  as DuplicateCount FROM UFN_DataValues where FileID in ("+file_id+") and RecordType='1' GROUP BY EmployeeSSN, RecordType,ProductNumber having count(*) > 1";
/*
    		queryText="SELECT dbo.fn_fpdecryptdata(EmployeeSSN)EmployeeSSN, RecordType,ProductNumber, COUNT(*)-1  as DuplicateCount FROM UFN_DataValues where FileID in ("+file_id+") and RecordType='1' GROUP BY dbo.fn_fpdecryptdata(EmployeeSSN), RecordType,ProductNumber having count(*) > 1";
*/
    		obj=new QueryObject(queryText);
    		obj.addParameter("file_id", "UFN_DataValues.FileID", QueryObject.PARAM_STRING, file_id);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
    	else if(file_type.equalsIgnoreCase("EA042") && file_type!=null)
    	{
    		
queryText="SELECT EmployeeSSN,ProductNumber, COUNT(*)-1  as DuplicateCount FROM EA042DataValues where FileID in ("+file_id+") GROUP BY EmployeeSSN,ProductNumber having count(*) > 1";
/*
    		queryText="SELECT dbo.fn_fpdecryptdata(EmployeeSSN)EmployeeSSN,ProductNumber, COUNT(*)-1  as DuplicateCount FROM EA042DataValues where FileID in ("+file_id+") GROUP BY dbo.fn_fpdecryptdata(EmployeeSSN),ProductNumber having count(*) > 1";
*/
    		obj=new QueryObject(queryText);
    		obj.addParameter("file_id", "EA042DataValues.FileID", QueryObject.PARAM_STRING, file_id);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
		else if(file_type.equalsIgnoreCase("EA049") && file_type!=null)
    	{
    		
queryText="SELECT EmployeeSSN,ProductNumber, COUNT(*)-1  as DuplicateCount FROM EA049DataValues where FileID in ("+file_id+") GROUP BY EmployeeSSN,ProductNumber having count(*) > 1";
/*
    		queryText="SELECT dbo.fn_fpdecryptdata(EmployeeSSN)EmployeeSSN,ProductNumber, COUNT(*)-1  as DuplicateCount FROM EA049DataValues where FileID in ("+file_id+") GROUP BY dbo.fn_fpdecryptdata(EmployeeSSN),ProductNumber having count(*) > 1";
*/
    		obj=new QueryObject(queryText);
    		obj.addParameter("file_id", "EA049DataValues.FileID", QueryObject.PARAM_STRING, file_id);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
    	else if(file_type.equalsIgnoreCase("EA050") && file_type!=null)
    	{
    		
queryText="SELECT EmployeeSSN,ProductNumber, COUNT(*)-1  as DuplicateCount FROM EA050DataValues where FileID in ("+file_id+") GROUP BY EmployeeSSN,ProductNumber having count(*) > 1";
/*
    		queryText="SELECT dbo.fn_fpdecryptdata(EmployeeSSN)EmployeeSSN,ProductNumber, COUNT(*)-1  as DuplicateCount FROM EA050DataValues where FileID in ("+file_id+") GROUP BY dbo.fn_fpdecryptdata(EmployeeSSN),ProductNumber having count(*) > 1";
*/
    		obj=new QueryObject(queryText);
    		obj.addParameter("file_id", "EA050DataValues.FileID", QueryObject.PARAM_STRING, file_id);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
    	else if(file_type.equalsIgnoreCase("EA051") && file_type!=null)
    	{
    		
queryText="SELECT EmployeeSSN,ProductNumber, COUNT(*)-1  as DuplicateCount FROM EA051DataValues where FileID in ("+file_id+") GROUP BY EmployeeSSN,ProductNumber having count(*) > 1";
/*
    		queryText="SELECT dbo.fn_fpdecryptdata(EmployeeSSN)EmployeeSSN,ProductNumber, COUNT(*)-1  as DuplicateCount FROM EA051DataValues where FileID in ("+file_id+") GROUP BY dbo.fn_fpdecryptdata(EmployeeSSN),ProductNumber having count(*) > 1";
*/
    		obj=new QueryObject(queryText);
    		obj.addParameter("file_id", "EA051DataValues.FileID", QueryObject.PARAM_STRING, file_id);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
    	else if(file_type.equalsIgnoreCase("EA052") && file_type!=null)
    	{
    		
queryText="SELECT EmployeeSSN,ProductNumber, COUNT(*)-1  as DuplicateCount FROM EA052DataValues where FileID in ("+file_id+") GROUP BY EmployeeSSN,ProductNumber having count(*) > 1";
/*
    		queryText="SELECT dbo.fn_fpdecryptdata(EmployeeSSN)EmployeeSSN,ProductNumber, COUNT(*)-1  as DuplicateCount FROM EA052DataValues where FileID in ("+file_id+") GROUP BY dbo.fn_fpdecryptdata(EmployeeSSN),ProductNumber having count(*) > 1";
*/
    		obj=new QueryObject(queryText);
    		obj.addParameter("file_id", "EA052DataValues.FileID", QueryObject.PARAM_STRING, file_id);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
    	else if(file_type.equalsIgnoreCase("EA053") && file_type!=null)
    	{
    		
queryText="SELECT EmployeeSSN,ProductNumber, COUNT(*)-1  as DuplicateCount FROM EA053DataValues where FileID in ("+file_id+") GROUP BY EmployeeSSN,ProductNumber having count(*) > 1";
/*
    		queryText="SELECT dbo.fn_fpdecryptdata(EmployeeSSN)EmployeeSSN,ProductNumber, COUNT(*)-1  as DuplicateCount FROM EA053DataValues where FileID in ("+file_id+") GROUP BY dbo.fn_fpdecryptdata(EmployeeSSN),ProductNumber having count(*) > 1";
*/
    		obj=new QueryObject(queryText);
    		obj.addParameter("file_id", "EA053DataValues.FileID", QueryObject.PARAM_STRING, file_id);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
    	else if(file_type.equalsIgnoreCase("EA054") && file_type!=null)
    	{
    		
queryText="SELECT EmployeeSSN,ProductNumber, COUNT(*)-1  as DuplicateCount FROM EA054DataValues where FileID in ("+file_id+") GROUP BY EmployeeSSN,ProductNumber having count(*) > 1";
/*
    		queryText="SELECT dbo.fn_fpdecryptdata(EmployeeSSN)EmployeeSSN,ProductNumber, COUNT(*)-1  as DuplicateCount FROM EA054DataValues where FileID in ("+file_id+") GROUP BY dbo.fn_fpdecryptdata(EmployeeSSN),ProductNumber having count(*) > 1";
*/
    		obj=new QueryObject(queryText);
    		obj.addParameter("file_id", "EA054DataValues.FileID", QueryObject.PARAM_STRING, file_id);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
		else if(file_type.equalsIgnoreCase("EA055") && file_type!=null)
    	{
    		
queryText="SELECT EmployeeSSN,ProductNumber, COUNT(*)-1  as DuplicateCount FROM EA055DataValues where FileID in ("+file_id+") GROUP BY EmployeeSSN,ProductNumber having count(*) > 1";
/*
    		queryText="SELECT dbo.fn_fpdecryptdata(EmployeeSSN)EmployeeSSN,ProductNumber, COUNT(*)-1  as DuplicateCount FROM EA055DataValues where FileID in ("+file_id+") GROUP BY dbo.fn_fpdecryptdata(EmployeeSSN),ProductNumber having count(*) > 1";
*/
    		obj=new QueryObject(queryText);
    		obj.addParameter("file_id", "EA055DataValues.FileID", QueryObject.PARAM_STRING, file_id);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
    	else if(file_type.equalsIgnoreCase("EA056") && file_type!=null)
    	{
    		
queryText="SELECT EmployeeSSN,ProductNumber, COUNT(*)-1  as DuplicateCount FROM EA056DataValues where FileID in ("+file_id+") GROUP BY EmployeeSSN,ProductNumber having count(*) > 1";
/*
    		queryText="SELECT dbo.fn_fpdecryptdata(EmployeeSSN)EmployeeSSN,ProductNumber, COUNT(*)-1  as DuplicateCount FROM EA056DataValues where FileID in ("+file_id+") GROUP BY dbo.fn_fpdecryptdata(EmployeeSSN),ProductNumber having count(*) > 1";
*/
    		obj=new QueryObject(queryText);
    		obj.addParameter("file_id", "EA056DataValues.FileID", QueryObject.PARAM_STRING, file_id);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
    	
		return busObjects;
	}
public static BusObjectIterator<BusObject> GetNBProductCountByFileID(String FileID,String FileType) throws Exception
	{
    	QueryObject obj=null;
    	String queryText="";
    	BusObjectIterator<BusObject> busObjects=null;
    	if(FileType.equalsIgnoreCase("UF") && FileType!=null)
    	{
    		
queryText="select DRP.Description, count(UFD.productnumber) as Count from UF_DataValues_Case UFD  join (  select distinct Description, Value from WKSDropDownTable where Identifier = 'WorksiteProducts') DRP on DRP.value = ufd.ProductNumber where ufd.CaseID ='"+FileID+"' and  ufd.BusinessType = 'NB' and ufd.RecordType='1' group by DRP.Description ,ufd.CaseID";
    		obj=new QueryObject(queryText);
    		obj.addParameter("FileID", "UF_DataValues_Case.CaseID", QueryObject.PARAM_STRING, FileID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
    	else if(FileType.equalsIgnoreCase("UFN") && FileType!=null)
    	{
    		
queryText="select DRP.Description, count(UFD.productnumber) as Count from UFN_DataValues_Case UFD  join (  select distinct Description, Value from WKSDropDownTable where Identifier = 'WorksiteProducts') DRP on DRP.value = ufd.ProductNumber where ufd.CaseID='"+FileID+"' and  ufd.BusinessType = 'NB' and ufd.RecordType='1' group by DRP.Description ,ufd.CaseID";
    		obj=new QueryObject(queryText);
    		obj.addParameter("FileID", "UFN_DataValues_Case.CaseID", QueryObject.PARAM_STRING, FileID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
else if(FileType.equalsIgnoreCase("EA030") && FileType!=null)
    	{
    		
queryText="select DRP.Description, count(UFD.productnumber) as Count from EA030DataValues_Case UFD  join (  select distinct Description, Value from WKSDropDownTable where Identifier = 'WorksiteProducts') DRP on DRP.value = ufd.ProductNumber where ufd.CaseID='"+FileID+"' and  ufd.BusinessType = 'NB' group by DRP.Description ,ufd.CaseID";
    		obj=new QueryObject(queryText);
    		obj.addParameter("FileID", "EA030DataValues_Case.CaseID", QueryObject.PARAM_STRING, FileID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
else if(FileType.equalsIgnoreCase("EA042") && FileType!=null)
    	{
    		
queryText="select DRP.Description, count(UFD.productnumber) as Count from EA042DataValues_Case UFD  join (  select distinct Description, Value from WKSDropDownTable where Identifier = 'WorksiteProducts') DRP on DRP.value = ufd.ProductNumber where ufd.CaseID='"+FileID+"' and  ufd.BusinessType = 'NB' group by DRP.Description ,ufd.CaseID";
    		obj=new QueryObject(queryText);
    		obj.addParameter("FileID", "EA042DataValues_Case.CaseID", QueryObject.PARAM_STRING, FileID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
    	else if(FileType.equalsIgnoreCase("EA049") && FileType!=null)
    	{
    		
queryText="select DRP.Description, count(UFD.productnumber) as Count from EA049DataValues_Case UFD  join (  select distinct Description, Value from WKSDropDownTable where Identifier = 'WorksiteProducts') DRP on DRP.value = ufd.ProductNumber where ufd.CaseID='"+FileID+"' and  ufd.BusinessType = 'NB' group by DRP.Description ,ufd.CaseID";
    		obj=new QueryObject(queryText);
    		obj.addParameter("FileID", "EA049DataValues_Case.CaseID", QueryObject.PARAM_STRING, FileID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}

else if(FileType.equalsIgnoreCase("EA050") && FileType!=null)
    	{
    		
queryText="select DRP.Description, count(UFD.productnumber) as Count from EA050DataValues_Case UFD  join (  select distinct Description, Value from WKSDropDownTable where Identifier = 'WorksiteProducts') DRP on DRP.value = ufd.ProductNumber where ufd.CaseID='"+FileID+"' and  ufd.BusinessType = 'NB' group by DRP.Description ,ufd.CaseID";
    		obj=new QueryObject(queryText);
    		obj.addParameter("FileID", "EA050DataValues_Case.CaseID", QueryObject.PARAM_STRING, FileID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
else if(FileType.equalsIgnoreCase("EA051") && FileType!=null)
    	{
    		
queryText="select DRP.Description, count(UFD.productnumber) as Count from EA051DataValues_Case UFD  join (  select distinct Description, Value from WKSDropDownTable where Identifier = 'WorksiteProducts') DRP on DRP.value = ufd.ProductNumber where ufd.CaseID='"+FileID+"' and  ufd.BusinessType = 'NB' group by DRP.Description ,ufd.CaseID";
    		obj=new QueryObject(queryText);
    		obj.addParameter("FileID", "EA051DataValues_Case.CaseID", QueryObject.PARAM_STRING, FileID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
else if(FileType.equalsIgnoreCase("EA052") && FileType!=null)
    	{
    		
queryText="select DRP.Description, count(UFD.productnumber) as Count from EA052DataValues_Case UFD  join (  select distinct Description, Value from WKSDropDownTable where Identifier = 'WorksiteProducts') DRP on DRP.value = ufd.ProductNumber where ufd.CaseID='"+FileID+"' and  ufd.BusinessType = 'NB' group by DRP.Description ,ufd.CaseID";
    		obj=new QueryObject(queryText);
    		obj.addParameter("FileID", "EA052DataValues_Case.CaseID", QueryObject.PARAM_STRING, FileID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
else if(FileType.equalsIgnoreCase("EA053") && FileType!=null)
    	{
    		
queryText="select DRP.Description, count(UFD.productnumber) as Count from EA053DataValues_Case UFD  join (  select distinct Description, Value from WKSDropDownTable where Identifier = 'WorksiteProducts') DRP on DRP.value = ufd.ProductNumber where ufd.CaseID='"+FileID+"' and  ufd.BusinessType = 'NB' group by DRP.Description ,ufd.CaseID";
    		obj=new QueryObject(queryText);
    		obj.addParameter("FileID", "EA053DataValues_Case.CaseID", QueryObject.PARAM_STRING, FileID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}

else if(FileType.equalsIgnoreCase("EA054") && FileType!=null)
    	{
    		
queryText="select DRP.Description, count(UFD.productnumber) as Count from EA054DataValues_Case UFD  join (  select distinct Description, Value from WKSDropDownTable where Identifier = 'WorksiteProducts') DRP on DRP.value = ufd.ProductNumber where ufd.CaseID='"+FileID+"' and  ufd.BusinessType = 'NB' group by DRP.Description ,ufd.CaseID";
    		obj=new QueryObject(queryText);
    		obj.addParameter("FileID", "EA054DataValues_Case.CaseID", QueryObject.PARAM_STRING, FileID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
else if(FileType.equalsIgnoreCase("EA055") && FileType!=null)
    	{
    		
queryText="select DRP.Description, count(UFD.productnumber) as Count from EA055DataValues_Case UFD  join (  select distinct Description, Value from WKSDropDownTable where Identifier = 'WorksiteProducts') DRP on DRP.value = ufd.ProductNumber where ufd.CaseID='"+FileID+"' and  ufd.BusinessType = 'NB' group by DRP.Description ,ufd.CaseID";
    		obj=new QueryObject(queryText);
    		obj.addParameter("FileID", "EA055DataValues_Case.CaseID", QueryObject.PARAM_STRING, FileID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}

else if(FileType.equalsIgnoreCase("EA056") && FileType!=null)
    	{
    		
queryText="select DRP.Description, count(UFD.productnumber) as Count from EA056DataValues_Case UFD  join (  select distinct Description, Value from WKSDropDownTable where Identifier = 'WorksiteProducts') DRP on DRP.value = ufd.ProductNumber where ufd.CaseID='"+FileID+"' and  ufd.BusinessType = 'NB' group by DRP.Description ,ufd.CaseID";
    		obj=new QueryObject(queryText);
    		obj.addParameter("FileID", "EA056DataValues_Case.CaseID", QueryObject.PARAM_STRING, FileID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
    	
		return busObjects;
	}
public static BusObjectIterator<BusObject> GetApplicationRecordCount(String File_ID,String File_Type) throws Exception
	{
    	QueryObject obj=null;
    	String queryText="";
    	BusObjectIterator<BusObject> busObjects=null;
    	if(File_Type.equalsIgnoreCase("UF") && File_Type!=null)
    	{
    		
queryText="select count(*) as ApplicationRecordCount from UF_DataValues UFD  where ufd.FileID='"+File_ID+"' and ufd.RecordType='1'";
    		obj=new QueryObject(queryText);
    		obj.addParameter("File_ID", "UF_DataValues.FileID", QueryObject.PARAM_STRING, File_ID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
    	else if(File_Type.equalsIgnoreCase("UFN") && File_Type!=null)
    	{
    		
queryText="select count(*) as ApplicationRecordCount from UFN_DataValues UFD  where ufd.FileID='"+File_ID+"' and ufd.RecordType='1'";
    		obj=new QueryObject(queryText);
    		obj.addParameter("File_ID", "UFN_DataValues.FileID", QueryObject.PARAM_STRING, File_ID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
else if(File_Type.equalsIgnoreCase("EA030") && File_Type!=null)
    	{
    		
queryText="select count(*) as ApplicationRecordCount from EA030DataValues UFD  where ufd.FileID='"+File_ID+"' ";
    		obj=new QueryObject(queryText);
    		obj.addParameter("File_ID", "EA030DataValues.FileID", QueryObject.PARAM_STRING, File_ID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
else if(File_Type.equalsIgnoreCase("EA042") && File_Type!=null)
    	{
    		
queryText="select count(*) as ApplicationRecordCount from EA042DataValues UFD  where ufd.FileID='"+File_ID+"' ";
    		obj=new QueryObject(queryText);
    		obj.addParameter("File_ID", "EA042DataValues.FileID", QueryObject.PARAM_STRING, File_ID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
    	else if(File_Type.equalsIgnoreCase("EA049") && File_Type!=null)
    	{
    		
queryText="select count(*) as ApplicationRecordCount from EA049DataValues UFD  where ufd.FileID='"+File_ID+"' ";
    		obj=new QueryObject(queryText);
    		obj.addParameter("File_ID", "EA049DataValues.FileID", QueryObject.PARAM_STRING, File_ID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}

else if(File_Type.equalsIgnoreCase("EA050") && File_Type!=null)
    	{
    		
queryText="select count(*) as ApplicationRecordCount from EA050DataValues UFD  where ufd.FileID='"+File_ID+"' ";
    		obj=new QueryObject(queryText);
    		obj.addParameter("File_ID", "EA050DataValues.FileID", QueryObject.PARAM_STRING, File_ID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
else if(File_Type.equalsIgnoreCase("EA051") && File_Type!=null)
    	{
    		
queryText="select count(*) as ApplicationRecordCount from EA051DataValues UFD  where ufd.FileID='"+File_ID+"' ";
    		obj=new QueryObject(queryText);
    		obj.addParameter("File_ID", "EA051DataValues.FileID", QueryObject.PARAM_STRING, File_ID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
else if(File_Type.equalsIgnoreCase("EA052") && File_Type!=null)
    	{
    		
queryText="select count(*) as ApplicationRecordCount from EA052DataValues UFD  where ufd.FileID='"+File_ID+"' ";
    		obj=new QueryObject(queryText);
    		obj.addParameter("File_ID", "EA052DataValues.FileID", QueryObject.PARAM_STRING, File_ID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
else if(File_Type.equalsIgnoreCase("EA053") && File_Type!=null)
    	{
    		
queryText="select count(*) as ApplicationRecordCount from EA053DataValues UFD  where ufd.FileID='"+File_ID+"' ";
    		obj=new QueryObject(queryText);
    		obj.addParameter("File_ID", "EA053DataValues.FileID", QueryObject.PARAM_STRING, File_ID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}

else if(File_Type.equalsIgnoreCase("EA054") && File_Type!=null)
    	{
    		
queryText="select count(*) as ApplicationRecordCount from EA054DataValues UFD  where ufd.FileID='"+File_ID+"' ";
    		obj=new QueryObject(queryText);
    		obj.addParameter("File_ID", "EA054DataValues.FileID", QueryObject.PARAM_STRING, File_ID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
else if(File_Type.equalsIgnoreCase("EA055") && File_Type!=null)
    	{
    		
queryText="select count(*) as ApplicationRecordCount from EA055DataValues UFD  where ufd.FileID='"+File_ID+"' ";
    		obj=new QueryObject(queryText);
    		obj.addParameter("File_ID", "EA055DataValues.FileID", QueryObject.PARAM_STRING, File_ID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}

else if(File_Type.equalsIgnoreCase("EA056") && File_Type!=null)
    	{
    		
queryText="select count(*) as ApplicationRecordCount from EA056DataValues UFD  where ufd.FileID='"+File_ID+"' ";
    		obj=new QueryObject(queryText);
    		obj.addParameter("File_ID", "EA054DataValues.FileID", QueryObject.PARAM_STRING, File_ID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
    	
		return busObjects;
	}
public static BusObjectIterator<BusObject> GetNBAppCount(String CaseID,String FileType) throws Exception
	{
    	QueryObject obj=null;
    	String queryText="";
    	BusObjectIterator<BusObject> busObjects=null;
    	if(FileType.equalsIgnoreCase("UF") && FileType!=null)
    	{
    		
queryText="select count(*) as AppCount from UF_DataValues_Case UFD where ufd.CaseID ='"+CaseID+"' and  ufd.BusinessType = 'NB' and ufd.RecordType='1'";
    		obj=new QueryObject(queryText);
    		obj.addParameter("CaseID", "UF_DataValues_Case.CaseID", QueryObject.PARAM_STRING, CaseID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
    	else if(FileType.equalsIgnoreCase("UFN") && FileType!=null)
    	{
    		
queryText="select count(*) as AppCount from UFN_DataValues_Case UFD where ufd.CaseID='"+CaseID+"' and  ufd.BusinessType = 'NB' and ufd.RecordType='1'";
    		obj=new QueryObject(queryText);
    		obj.addParameter("CaseID", "UFN_DataValues_Case.CaseID", QueryObject.PARAM_STRING, CaseID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
else if(FileType.equalsIgnoreCase("EA030") && FileType!=null)
    	{
    		
queryText="select count(*) as AppCount from EA030DataValues_Case UFD where ufd.CaseID='"+CaseID+"' and  ufd.BusinessType = 'NB'";
    		obj=new QueryObject(queryText);
    		obj.addParameter("CaseID", "EA030DataValues_Case.CaseID", QueryObject.PARAM_STRING, CaseID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
else if(FileType.equalsIgnoreCase("EA042") && FileType!=null)
    	{
    		
queryText="select count(*) as AppCount from EA042DataValues_Case UFD where ufd.CaseID='"+CaseID+"' and  ufd.BusinessType = 'NB'";
    		obj=new QueryObject(queryText);
    		obj.addParameter("CaseID", "EA042DataValues_Case.CaseID", QueryObject.PARAM_STRING, CaseID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
    	else if(FileType.equalsIgnoreCase("EA049") && FileType!=null)
    	{
    		
queryText="select count(*) as AppCount from EA049DataValues_Case UFD where ufd.CaseID='"+CaseID+"' and  ufd.BusinessType = 'NB'";
    		obj=new QueryObject(queryText);
    		obj.addParameter("CaseID", "EA049DataValues_Case.CaseID", QueryObject.PARAM_STRING, CaseID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}

else if(FileType.equalsIgnoreCase("EA050") && FileType!=null)
    	{
    		
queryText="select count(*) as AppCount from EA050DataValues_Case UFD where ufd.CaseID='"+CaseID+"' and  ufd.BusinessType = 'NB'";
    		obj=new QueryObject(queryText);
    		obj.addParameter("CaseID", "EA050DataValues_Case.CaseID", QueryObject.PARAM_STRING, CaseID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
else if(FileType.equalsIgnoreCase("EA051") && FileType!=null)
    	{
    		
queryText="select count(*) as AppCount from EA051DataValues_Case UFD where ufd.CaseID='"+CaseID+"' and  ufd.BusinessType = 'NB'";
    		obj=new QueryObject(queryText);
    		obj.addParameter("CaseID", "EA051DataValues_Case.CaseID", QueryObject.PARAM_STRING, CaseID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
else if(FileType.equalsIgnoreCase("EA052") && FileType!=null)
    	{
    		
queryText="select count(*) as AppCount from EA052DataValues_Case UFD where ufd.CaseID='"+CaseID+"' and  ufd.BusinessType = 'NB'";
    		obj=new QueryObject(queryText);
    		obj.addParameter("CaseID", "EA052DataValues_Case.CaseID", QueryObject.PARAM_STRING, CaseID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
else if(FileType.equalsIgnoreCase("EA053") && FileType!=null)
    	{
    		
queryText="select count(*) as AppCount from EA053DataValues_Case UFD where ufd.CaseID='"+CaseID+"' and  ufd.BusinessType = 'NB'";
    		obj=new QueryObject(queryText);
    		obj.addParameter("CaseID", "EA053DataValues_Case.CaseID", QueryObject.PARAM_STRING, CaseID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}

else if(FileType.equalsIgnoreCase("EA054") && FileType!=null)
    	{
    		
queryText="select count(*) as AppCount from EA054DataValues_Case UFD where ufd.CaseID='"+CaseID+"' and  ufd.BusinessType = 'NB'";
    		obj=new QueryObject(queryText);
    		obj.addParameter("CaseID", "EA054DataValues_Case.CaseID", QueryObject.PARAM_STRING, CaseID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
else if(FileType.equalsIgnoreCase("EA055") && FileType!=null)
    	{
    		
queryText="select count(*) as AppCount from EA055DataValues_Case UFD where ufd.CaseID='"+CaseID+"' and  ufd.BusinessType = 'NB'";
    		obj=new QueryObject(queryText);
    		obj.addParameter("CaseID", "EA055DataValues_Case.CaseID", QueryObject.PARAM_STRING, CaseID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}

else if(FileType.equalsIgnoreCase("EA056") && FileType!=null)
    	{
    		
queryText="select count(*) as AppCount from EA056DataValues_Case UFD where ufd.CaseID='"+CaseID+"' and  ufd.BusinessType = 'NB'";
    		obj=new QueryObject(queryText);
    		obj.addParameter("CaseID", "EA056DataValues_Case.CaseID", QueryObject.PARAM_STRING, CaseID);
    		obj.setResultClass(WorksiteUtil.class);
    		busObjects=obj.getObjects();

    	}
    	
		return busObjects;
	}
public static int readEncryptedData(String sequenceNumber)
	{
		int appNode=-1,keyData=-1;
		QueryObject query=null;
		
		try
		{
			appNode=document.parseString("<AppData></AppData>");
			String queryText = "OPEN SYMMETRIC KEY FP_SymKey DECRYPTION BY CERTIFICATE FP_Encrypt_Certificate";
		    //QueryObject query = new QueryObject(queryText);
		    //query.setResultClass(WKSREALfeed.class);
		    //keyData=query.getObject()._getObjectData();
		    DMLStatement openKey = new DMLStatement(queryText);
		    openKey.execute();
		//    appNode = keyData;
		    
		    queryText = "SELECT CustID, CustName,BankACCNumber,BankACCNumber_encrypt AS 'EncryptedData'," + 
		    		" CONVERT(varchar, DecryptByKey(BankACCNumber_encrypt)) AS 'DecryptedData'" + 
		    		" FROM CustomerInfo";
		    query = new QueryObject(queryText);
		    query.setResultClass(WKSREALfeed.class);
		    BusObjectIterator<com.worksitewsapppackage.WKSREALfeed> iterator= query.getObjects();
		    while(iterator.hasMoreElements())
		    {
		    	BusObject busObject=iterator.nextElement();
		    	int objectData=busObject._getObjectData();
		    	Node.appendToChildren(objectData, appNode);
		    }
		    queryText = "CLOSE SYMMETRIC KEY FP_SymKey";
		    DMLStatement closeKey = new DMLStatement(queryText);
		    openKey.execute();
		}catch(Exception ex)
		{
			logger.error("Error in getFileProcessingData method:"+ex);

		}
		return appNode;
	}


	public static BusObjectIterator<com.cordys.cpc.bsf.busobject.BusObject> GetFileSearchData(String fileName, String folderName, String fromDate, String toDate) throws Exception
    {
		return null;
	}
  public static BusObjectIterator<com.worksitewsapppackage.WorksiteUtil> GetDownloadedFilesCount(String Date)
  {
  	
  	String FDate=Date+" 00:00AM";
String TDate=Date+" 23:58PM";
        String queryText = "select sum(NewFilesCount) as 'FilesDownloaded',Run,max(FileRecevieddate) as LatestDate from TumbleWeed_Files where FileReceviedDate > '"+FDate+"' and FileReceviedDate < '"+TDate+"' group by Run";
  	QueryObject query = new QueryObject(queryText);
  	query.setResultClass(WorksiteUtil.class);
  	return query.getObjects();
  }
public static String CalculateDueDateforFirstBill(String start_date,String end_date)
    {

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); 
      // long difference_In_Days  =0;
   String Difference ="";
        // Try Block
        try {

            // the text from a string to produce the date
            Date d1 = sdf.parse(start_date);
            Date d2 = sdf.parse(end_date);
            long difference_In_Time = d2.getTime() - d1.getTime();
          //  long difference_In_Days = (difference_In_Time / (1000 * 60 * 60 * 24))% 365;
           long difference_In_Days  =  (difference_In_Time / (1000 * 60 * 60 * 24))% 365;	
             Difference =String.valueOf(difference_In_Days);  
        }
 
        // Catch the Exception
        catch (ParseException e) 
       {
            e.printStackTrace();
        }
return "P"+Difference+"D";
    }
 
public static String InvoiceDateCheckforFirst_Bill_New(String Invoice_Date)
    {
       LocalDate InvoiceDate = LocalDate.parse(Invoice_Date);
       LocalDate previousMonthEnd = LocalDate.now().minusMonths(1).withDayOfMonth(25);
logger.error(previousMonthEnd.toString());
LocalDate currentMonthEnd = LocalDate.now().withDayOfMonth(26);

if (InvoiceDate .isAfter(previousMonthEnd) && InvoiceDate .isBefore(currentMonthEnd))
 {
return "Yes";
} else {
return "No";
}

    }
 
}


